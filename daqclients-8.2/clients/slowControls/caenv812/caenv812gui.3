'\"
'\" Copyright (c) 2005 Michigan State University All Rights Reserved
'\"  Licensed under the GPL.  See http://www.gnu.org/licenses/gpl.txt
'\"  terms and conditions.
'\"
'\" The definitions below are for supplemental macros used in Tcl/Tk
'\" manual entries.
'\"
'\" .AP type name in/out ?indent?
'\"	Start paragraph describing an argument to a library procedure.
'\"	type is type of argument (int, etc.), in/out is either "in", "out",
'\"	or "in/out" to describe whether procedure reads or modifies arg,
'\"	and indent is equivalent to second arg of .IP (shouldn't ever be
'\"	needed;  use .AS below instead)
'\"
'\" .AS ?type? ?name?
'\"	Give maximum sizes of arguments for setting tab stops.  Type and
'\"	name are examples of largest possible arguments that will be passed
'\"	to .AP later.  If args are omitted, default tab stops are used.
'\"
'\" .BS
'\"	Start box enclosure.  From here until next .BE, everything will be
'\"	enclosed in one large box.
'\"
'\" .BE
'\"	End of box enclosure.
'\"
'\" .CS
'\"	Begin code excerpt.
'\"
'\" .CE
'\"	End code excerpt.
'\"
'\" .VS ?version? ?br?
'\"	Begin vertical sidebar, for use in marking newly-changed parts
'\"	of man pages.  The first argument is ignored and used for recording
'\"	the version when the .VS was added, so that the sidebars can be
'\"	found and removed when they reach a certain age.  If another argument
'\"	is present, then a line break is forced before starting the sidebar.
'\"
'\" .VE
'\"	End of vertical sidebar.
'\"
'\" .DS
'\"	Begin an indented unfilled display.
'\"
'\" .DE
'\"	End of indented unfilled display.
'\"
'\" .SO
'\"	Start of list of standard options for a Tk widget.  The
'\"	options follow on successive lines, in four columns separated
'\"	by tabs.
'\"
'\" .SE
'\"	End of list of standard options for a Tk widget.
'\"
'\" .OP cmdName dbName dbClass
'\"	Start of description of a specific option.  cmdName gives the
'\"	option's name as specified in the class command, dbName gives
'\"	the option's name in the option database, and dbClass gives
'\"	the option's class in the option database.
'\"
'\" .UL arg1 arg2
'\"	Print arg1 underlined, then print arg2 normally.
'\"
'\" RCS: @(#) $Id$
'\"
'\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp
..
'\"	# SO - start of list of standard options
.de SO
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
'\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\fBoptions\\fR manual entry for details on the standard options.
..
'\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
'\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
'\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.de UL
\\$1\l'|0\(ul'\\$2
..
.TH caenv812gui 3 "" Tcl "NSCL DAQ Tcl support"
.BS
'\" Note:  do not modify the .SH NAME line immediately below!
.SH NAME
caenv812gui \- Megawidget control panel for the CAEN V812 CFD.
.SH SYNOPSIS
.DS
\fBpackage require caenv812
caenv812\fI pathName ?options?\fR
.DE

.BE

.SH DESCRIPTION
.PP
caenv812gui supplies a megawidget that is a control panel for the
CAEN V812 constant fraction discriminator.  The megawidget is the
same as that used by the caenv812control application, and is available
for use in custom user control applications.
.SH "WIDGET-SPECIFIC OPTIONS"
.OP -crate "" ""
Specifies the VME crate in which the module controlled by this
widget lives.  If this is not supplied when constructing the widget,
it defaults to 0.  You may not configure the \fB-crate\fR after the
widget has been constructed as the widget is bound to the module when it
is first constructed.
.OP -base "" ""
Required option at construction time.  The argument to this option is the
base address of the module.  There is no default.  The \fB-base\fR option
must be supplied at construction time and cannot be reconfigured after the
widget is initially constructed.
.OP -disable "" ""
Creating or configuring with this switch allows parts of the user interface
to be disabled.  The \fB-disable\fR option accepts as an argument
a list of the interface items to disable.
These are not cumulative across multiple uses of \fB-disable\fR.  Legitimate
list items are \fBwidths\fR, \fBmajority\fR, and \fBdeadtimes\fR  This
configuration option allows the GUI to be used for other compatible
discrimnator modules that don't have all of these controls.  For example, the
CAEN V895 leading edge discriminator by definition does not have a deadtime.
.OP -name "" ""
Required option at construction time.  The argument to this option is the
name of the module.  This module name is associated with the module address
in order to interface the widget with the device support packages CFD812 and CFDState.
This option cannot be reconfigured after construction.
.OP -command "" ""
The parameter to this option is a script to be executed when the control
panel changes a setting in the module.  This allows the user to layer
e.g. logging on top of the control panel widget.   Multiple \fB-command\fR
options are not cumulative.  To remove a previously set \fB-command\fR script,
supply the \fB-command\fR option with the script "".

The user script is invoked with a three element list appended to it of the form:
{action id newvalue}.
.DS
Where:
    action  is text describing what changed and is one of:
            threshold  - A threshold changed.
            width      - A width changed.
            deadtime   - A deadtime changed.
            majority   - The majority threshold changed.
            mask       - The enables mask.

    newvalue is a new control value associated with the change.

    id       Describes which item was changed.  This will be a channel number
             for thresholds, 0 or 1 for widths/deadtimes and an empty string for
             majority threshold and the mask.
.DE
.OP -alarmscript "" ""
The parameter to this option is a script that will be executed when
the control panel detects an alarm condition.  The alarm script will
be passed a single parameter which is a human readable alarm string.
Note that caenv812gui does not currently define any alarms, however this
option is provided for compatibility with devices that do support alarms.
.SH "WIDGET COMMANDS"
.TP
\fIpathName\fB getProperties\fR
Retrieves a property list that describes the current device settings.  Note that given the
write\-only nature of the hardware, if multiple processes exercise control over the same
physical module, this property list will only be the widgets understanding of what the
settings would be if nobody else were meddling with the device.

Property lists are a device independent way to represent module settings.  A property list
is a Tcl list of two element sublists, called properties.  Each property consists of a
property name and value. For the properties supported by the caenv812gui widget,
see \fBPROPERTIES\fR below.
.TP
\fIpathName\fB setProperties\fI propertyList\fR
Requests that the gui process the \fIpropertyList\fR parameter and set the module accordingly.
.SH "PROPERTIES"
The following properties are supported by the caenv812gui:
.TP
\fBthreshold0 .. threshold15\fR
The thresholds of the module's 16 channels.
.TP
\fBwidth0, width1\fR
The widths of the lower and upper bank of module channels.  Bank 0 controls
channels 0\-7 while bank 1 controls channels 8\-15.
.TP
\fBdeadtime0, deadtime1\fR
The deadtimes of the lower and upper bank of module channels.
The banks referred to here are the same as the banks referred to
by the \fBwidth0, width1\fR properties.
.TP
\fBmajority\fR
The majority threshold.
.TP
\fBenables\fR
The enables mask.
.SH "SEE ALSO"
CFD812, CFDState, caenv812control
