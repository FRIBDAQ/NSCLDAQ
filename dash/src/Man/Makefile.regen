SHELL := /bin/sh
HELP2MAN := $(shell which help2man)
DOXYGEN := $(shell which doxygen)

SUB_DIRS = mdata

DOXY_DIRS = doxy

include ../../config.make

all: man usage doxygen

usage: version help

check::
	@if [ -z "${HELP2MAN}" ]; then \
          echo "ERROR: help2man must be installed to generate man pages."; \
          exit 1; \
        else \
          echo "Using \"${HELP2MAN}\""; \
        fi

doxycheck::
	@if [ -z "${DOXYGEN}" ]; then \
          echo "ERROR: doxygen must be installed to generate doxygen documentation."; \
          exit 1; \
        else \
          echo "Using \"${DOXYGEN}\""; \
        fi

man: check release
	@for i in $(SUB_DIRS); do \
          echo "Making $@ in $$i..."; \
          ( \
            cd $$i; \
            for mfn in `ls ./*.mdata`; do \
              BASEN=`basename $$mfn`; \
              ROOTN=`echo $$BASEN | awk -F'.' '{print $$1;}'`; \
              rm -f ./$$ROOTN.1; \
              echo "Making man page for $$ROOTN using $$BASEN..."; \
              ln -s ../mandata ./$$ROOTN; \
              help2man --no-info ./$$ROOTN > ../man1/$$ROOTN.1; \
              rm -f ./$$ROOTN; \
            done; \
          ) || \
          case "$$MAKEFLAGS" in *k*) FAIL="yes";; *) exit 1;; esac; \
        done; test -z "$$FAIL"

version: release
	@for i in $(SUB_DIRS); do \
          echo "Making $@ in $$i..."; \
          ( \
            for mfn in `ls $$i/*.mdata`; do \
              BASEN=`basename $$mfn`; \
              ROOTN=`echo $$BASEN | awk -F'.' '{print $$1;}'`; \
              OUTN="./usage/$${ROOTN}_version.h"; \
              rm -f $$OUTN; \
              echo "Making version for $$ROOTN using $$BASEN..."; \
              ./usagedata --version $$mfn > $$OUTN; \
            done; \
          ) || \
          case "$$MAKEFLAGS" in *k*) FAIL="yes";; *) exit 1;; esac; \
        done; test -z "$$FAIL"

help: release
	@for i in $(SUB_DIRS); do \
          echo "Making $@ in $$i..."; \
          ( \
            for mfn in `ls $$i/*.mdata`; do \
              BASEN=`basename $$mfn`; \
              ROOTN=`echo $$BASEN | awk -F'.' '{print $$1;}'`; \
              OUTN="./usage/$${ROOTN}_help.h"; \
              rm -f $$OUTN; \
              echo "Making help for $$ROOTN using $$BASEN..."; \
              ./usagedata --help $$mfn > $$OUTN; \
            done; \
          ) || \
          case "$$MAKEFLAGS" in *k*) FAIL="yes";; *) exit 1;; esac; \
        done; test -z "$$FAIL"

release::
	@for i in $(SUB_DIRS); do \
          echo "Making $@ in $$i..."; \
          ( \
            for mfn in `ls $$i/*.idata`; do \
              BASEN=`basename $$mfn`; \
              ROOTN=`echo $$BASEN | awk -F'.' '{print $$1;}'`; \
              OUTN="$$i/$${ROOTN}.mdata"; \
              rm -f $$OUTN; \
              echo "Making release for $$ROOTN using $$BASEN..."; \
              sed "s/key_DAQHWY_VERSION/$(DAQHWY_VERSION)/g" $$mfn > $$OUTN; \
            done; \
          ) || \
          case "$$MAKEFLAGS" in *k*) FAIL="yes";; *) exit 1;; esac; \
        done; test -z "$$FAIL"

doxygen: doxycheck
	@for i in $(DOXY_DIRS); do \
          echo "Making $@ in $$i..."; \
          ( \
            cd $$i; \
            $(DOXYGEN) ./Doxyfile \
          ) || \
          case "$$MAKEFLAGS" in *k*) FAIL="yes";; *) exit 1;; esac; \
        done; test -z "$$FAIL"

clean:

realclean: clean

