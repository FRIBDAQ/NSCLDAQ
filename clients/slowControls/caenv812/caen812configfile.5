'\"
'\" Copyright (c) 2005 Michigan State University All Rights Reserved
'\"  Licensed under the GPL.  See http://www.gnu.org/licenses/gpl.txt
'\"  terms and conditions.
'\"
'\" The definitions below are for supplemental macros used in Tcl/Tk
'\" manual entries.
'\"
'\" .AP type name in/out ?indent?
'\"	Start paragraph describing an argument to a library procedure.
'\"	type is type of argument (int, etc.), in/out is either "in", "out",
'\"	or "in/out" to describe whether procedure reads or modifies arg,
'\"	and indent is equivalent to second arg of .IP (shouldn't ever be
'\"	needed;  use .AS below instead)
'\"
'\" .AS ?type? ?name?
'\"	Give maximum sizes of arguments for setting tab stops.  Type and
'\"	name are examples of largest possible arguments that will be passed
'\"	to .AP later.  If args are omitted, default tab stops are used.
'\"
'\" .BS
'\"	Start box enclosure.  From here until next .BE, everything will be
'\"	enclosed in one large box.
'\"
'\" .BE
'\"	End of box enclosure.
'\"
'\" .CS
'\"	Begin code excerpt.
'\"
'\" .CE
'\"	End code excerpt.
'\"
'\" .VS ?version? ?br?
'\"	Begin vertical sidebar, for use in marking newly-changed parts
'\"	of man pages.  The first argument is ignored and used for recording
'\"	the version when the .VS was added, so that the sidebars can be
'\"	found and removed when they reach a certain age.  If another argument
'\"	is present, then a line break is forced before starting the sidebar.
'\"
'\" .VE
'\"	End of vertical sidebar.
'\"
'\" .DS
'\"	Begin an indented unfilled display.
'\"
'\" .DE
'\"	End of indented unfilled display.
'\"
'\" .SO
'\"	Start of list of standard options for a Tk widget.  The
'\"	options follow on successive lines, in four columns separated
'\"	by tabs.
'\"
'\" .SE
'\"	End of list of standard options for a Tk widget.
'\"
'\" .OP cmdName dbName dbClass
'\"	Start of description of a specific option.  cmdName gives the
'\"	option's name as specified in the class command, dbName gives
'\"	the option's name in the option database, and dbClass gives
'\"	the option's class in the option database.
'\"
'\" .UL arg1 arg2
'\"	Print arg1 underlined, then print arg2 normally.
'\"
'\" RCS: @(#) $Id$
'\"
'\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp
..
'\"	# SO - start of list of standard options
.de SO
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
'\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\fBoptions\\fR manual entry for details on the standard options.
..
'\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
'\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
'\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.de UL
\\$1\l'|0\(ul'\\$2
..
.TH caen812configfile 5 "" Tcl "NSCL DAQ Tcl support"
.BS
'\" Note:  do not modify the .SH NAME line immediately below!
.SH NAME
caen812configfile \- Format of configuration files for CAEN V812 software.
.SH SYNOPSIS

\fBVariables:\fR
.DS
Name
ModuleBase
Crate
Thresholds(i)
WidthLow
WidthHigh
DeadTimeLow
DeadTimeHigh
Majority
mask_arr(i)
.DE

.BE

.SH DESCRIPTION
.PP
This manpage describes the format of the configuration files used by packaged CAEN V812
contant fraction discriminator control software.  The purpose of a configuration file is
to describe how to connect to and identify a module and optionally, to provide
 a set of values to load into the module.
.PP
CFD configuration files are Tcl scripts.  Refer to the Tcl man pages for more information
about the syntax of Tcl scripts, or get a book like: \fIPractical Programming in Tcl and Tk\fR by
K.B. Welch, K. Jones and J. Hobbs.  The Tcl configuration files set a bunch of variables.  Each
variable controls some aspect of the configuration.  See the sections below for information about each type of variable.

.SH "CONFIGURATION AND IDENTIFICATION VARIABLES"
.PP
These variables describe the device in such a way that the software can connect to it and control it.
These variables also provide an identification of the module.
.TP
\fBName\fR
This variable is required.  It contains a human readable name for the module
that is by the software to identify the module.
.TP
\fBModuleBase\fR
This variable is required.  It contains the base address of the module.
.TP
\fBCrate\fR
This variable is optional.   If provided it supplies the number of the VME crate
that the module is plugged into.  If not supplied, this defaults to 0 which is
sufficient for most single VME crate systems.
.SH "DEVICE SETTINGS VARIABLES"
.PP
Device settings allow a configuration file to specify the settings of the device.
All of these variables are optional.  If a variable is not present, the
default is to not modify the corresponding device control parameter.

.TP
\fBThresholds(i)\fR
The \fBTresholds\fR variable is an array with indices in the range 0 through 15
inclusive.  Each element of the array corresponds to the threshold of a channel
of the discriminator.  Element 0 for channel 0 and so on.  Threshold values must be
in the range -1 through -255 inclusive.  These represent the threshold in mV.
.TP
\fBWidthLow\fR
Specifies the width value of the low bank of channels (channels 0-7).  The
width value is an arbitrary number in the range 0..255 inclusive and is not
linearly related to a physical width. See the CAEN V812 manual for more
information about this.
.TP
\fBWidthHigh\fR
Specifies the width value of the high bank of channels (channesl 8-15).
.TP
\fBDeadTimeLow\fR
Specifies the deadtime value of the low bank of channels.  The
deadtime is an arbitrary value between 0 and 255 inclusive and
is not linearly related to a physical deadtime.
.TP
\fBDeadTimeHigh\fR
Specifies the deadtime value of the high bank of channels.
.TP
\fBMajority\fR
Specifies the majority logic threshold.
.TP
\fBmask_arr(i)\fR
Specifies the enables mask.  This array has element indices that run from
0..through 15 inclusive.   Each element of the array is non\-zero to enable 
the corresponding channel and zero to disable it.
.SH "EXAMPLE"
.PP
This section contains a complete example of a configuration
file complete with a comment.  The module described in this
file is at base address 0xc20000 of VME crate 0.  Its name
is NSCL_CFD.  All device settings are supplied.

.CS
# CFD configuration file written Fri Dec 05 12:23:05 EST 2003
set Name "NSCL_CFD"
set ModuleBase 0xc20000
set Crate      0
set Thresholds(0) -20
set Thresholds(1) -20
set Thresholds(2) -20
set Thresholds(3) -20
set Thresholds(4) -20
set Thresholds(5) -255
set Thresholds(6) -255
set Thresholds(7) -255
set Thresholds(8) -20
set Thresholds(9) -20
set Thresholds(10) -20
set Thresholds(11) -20
set Thresholds(12) -255
set Thresholds(13) -255
set Thresholds(14) -255
set Thresholds(15) -255
set WidthLow  128
set WidthHigh 158
set DeadTimeLow  200
set DeadTimeHigh 200
set Majority  2
set mask_arr(0) 1
set mask_arr(1) 1
set mask_arr(2) 1
set mask_arr(3) 1
set mask_arr(4) 1
set mask_arr(5) 1
set mask_arr(6) 1
set mask_arr(7) 1
set mask_arr(8) 1
set mask_arr(9) 1
set mask_arr(10) 1
set mask_arr(11) 1
set mask_arr(12) 1
set mask_arr(13) 1
set mask_arr(14) 1
set mask_arr(15) 1

.CE
.SH "SEE ALSO"
caenv812control, loadcfd
