# Process this file with autoconf to produce a configure script.
AC_INIT(CopyrightTools/CopyrightNotice.cpp)
AC_CONFIG_AUX_DIR(config)
AM_CONFIG_HEADER(config.h)

#    Separate device libraries.

AM_INIT_AUTOMAKE(nscldaq, 7.4)  

#
#   The variable below should track the
#   version number above to ensure that
#   all the .so's get appropriately versioned:
#
SOVERSION="7:4"


#  Checks for parameters:




# Checks for programs.
AC_PROG_AWK
AC_PROG_CXX
AC_PROG_CC
AC_PROG_CPP
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_LIBTOOL
AC_PATH_PROG(DOXYGEN, doxygen, echo)

#  Needed components for hyperlatex

AC_PATH_PROG(HYPERLATEX, hyperlatex, echo)
AC_CHECK_PROG(HAVELATEX,  latex, yes, no)
AC_CHECK_PROG(HAVEDVIPS,  dvips, yes, no)
AC_CHECK_PROG(HAVEKPATHSEA, kpsewhich, yes, no)

#

AC_PROG_GCC_TRADITIONAL

# Checks for libraries.


# Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(string.h)
AC_CHECK_HEADERS(malloc.h)
AC_CHECK_HEADERS(netdb.h)
AC_CHECK_HEADERS(netinet/in.h)
AC_CHECK_HEADERS(fcntl.h)
AC_CHECK_HEADERS(sys/ioctl.h)
AC_CHECK_HEADERS(sys/time.h)
AC_CHECK_HEADERS(arpa/inet.h)
AC_CHECK_HEADERS(sys/socket.h)
AC_CHECK_HEADERS(gdbm.h)
AC_CHECK_HEADERS(limits.h)
AC_CHECK_HEADERS(stddef.h)


AC_HEADER_MAJOR
AC_HEADER_SYS_WAIT
AC_HEADER_TIME
AC_HEADER_STAT
AC_PATH_XTRA

# Checks for typedefs, structures, and compiler characteristics.

AC_STRUCT_TM
AC_TYPE_SIZE_T
AC_TYPE_PID_T
AC_TYPE_OFF_T
AC_C_CONST
AC_C_INLINE



# Checks for library functions.

AC_CHECK_LIB(gdbm, gdbm_open)
AC_FUNC_MMAP
AC_CHECK_FUNCS(stat)
AC_CHECK_FUNCS(malloc)
AC_CHECK_FUNCS(munmap)
AC_CHECK_FUNCS(getpagesize)
AC_CHECK_FUNCS(memset)
AC_CHECK_FUNCS(strerror)
AC_CHECK_FUNCS(gethostbyname)
AC_CHECK_FUNCS(gethostbyaddr)
AC_CHECK_FUNCS(inet_ntoa)
AC_CHECK_FUNCS(gettimeofday)
AC_CHECK_FUNCS(select)
AC_CHECK_FUNCS(strchr)
AC_CHECK_FUNCS(gethostname)
AC_CHECK_FUNCS(getpass)
AC_CHECK_FUNCS(socket)
AC_CHECK_FUNCS(strdup)
AC_CHECK_FUNCS(strstr)
AC_CHECK_FUNCS(fork)
AC_CHECK_FUNCS(clock_gettime)
AC_CHECK_FUNCS(strtol)
AC_CHECK_FUNCS(strtoul)


# NSCL DAQ specific checks:

#  We need to locate Spectrodaq most of all:
#
#   We look in the following order:
#    1. In /opt/spectrodaq/bin
#    2. In /usr/opt/spectrodaq/bin
#    3. In the location suggested by --with-spectrodaq-home

spectrodaq_conf_dir=""

AC_MSG_CHECKING([ for spectrodaq-conf ])


  AC_ARG_WITH(spectrodaq-home,
       [  --with-spectrodaq-home=top level directory of spectrodaq installation],
       [spectrodaq_conf_dir="$withval/bin"
	spectrodaq_found="yes"],[spectrodaq_found="no"])


if test $spectrodaq_found == "no"; then
   AC_CHECK_FILE(/opt/spectrodaq/bin/spectrodaq-conf,
	[spectrodaq_conf_dir=/opt/spectrodaq/bin
	 spectrodaq_found="yes"])
fi 

if test $spectrodaq_found == "no"; then
  AC_CHECK_FILE(/usr/opt/spectrodaq/bin/spectrodaq-conf,
	[spectrodaq_conf_dir=/usr/opt/spectrodaq/bin
	spectrodaq_found="yes"])
fi

if test $spectrodaq_found == "no"; then
	AC_MSG_ERROR([ Cannot locate spectrodaq-conf help me by using --with-spectrodaq-home])
else
SPECTRODAQ_FLAGS=$($spectrodaq_conf_dir/spectrodaq-conf --cflags)
SPECTRODAQ_LDFLAGS=$($spectrodaq_conf_dir/spectrodaq-conf --libs)
AC_MSG_RESULT([ found in $spectrodaq_conf_dir ])
fi


# Locate Tcl/Tk and setup compile/link switches for them too:

#  TCL headers:
#    We know of a few places the headers can live:
#       /usr/include              redhat linux.
#       /usr/include/tcl          debian dude that made  link to default tcl.
#       /usr/include/tcl<version> debian linux
#       /usr/local/include        default for source based install.
#       Whatever the user specifies. 
#        For now, the versions we look for are determined by the
#        variable tcl_versions  that variable is a list of version 
#        number specifiers.
#

tcl_versions="8.4 8.3 8.2 8.1 8.0"     # First match;  so order new -> old.
tcl_header_dir=""
AC_MSG_CHECKING([for tcl headers])

AC_ARG_WITH(tcl-header-dir,
	[  --with-tcl-header-dir=path Path to tcl headers],
	[tcl_header_dir="$withval"
	tcl_headers_found="yes"],[tcl_headers_found="no"])


	# /usr/include

if test $tcl_headers_found == "no"; then
   AC_CHECK_FILE([/usr/include/tcl.h],
	[tcl_header_dir="/usr/include"
	tcl_headers_found="yes"])
fi

	# /usr/include/tcl

if test $tcl_headers_found == "no"; then
   AC_CHECK_FILE([/usr/include/tcl/tcl.h],
	[tcl_header_dir="/usr/include/tcl"
	tcl_headers_found="yes"])
fi

	# /usr/include/tcl<version>

if test $tcl_headers_found == "no" ; then
 for version in $tcl_versions;  do
   if test $tcl_headers_found == "no" ; then   # stop at first match
      testdir=/usr/include/tcl$version
      AC_CHECK_FILE([${testdir}/tcl.h],
	[tcl_header_dir=${testdir}
	 tcl_headers_found="yes"])
   fi
 done
fi

      # /usr/local/include
if test $tcl_headers_found == "no"; then
   AC_CHECK_FILE([/usr/local/include/tcl.h],
	[tcl_header_dir="/usr/local/include/tcl"
	tcl_headers_found="yes"])
fi


if test $tcl_headers_found == "yes"; then
   TCL_FLAGS="-I${tcl_header_dir}"
   AC_MSG_RESULT([found in $tcl_header_dir])
else
   AC_MSG_ERROR([can't find tcl.h try using --with-tcl-header-dir to help me])
fi

#  Tcl libraries:
#     We look for the following:
#      /usr/lib/libtcl.a           - Usually a link to a default lib.
#      /usr/lib/libtcl<version>.a  - version of tcl from tcl_versions
#      /usr/local/lib/libtcl.a     - As above but installed from source.
#      /usr/local/lib<version>.a   - As Above but installed from source.
#      If --with-tcl-libdir=dir      is supplied, that directory is 
#                                    searched first.
# ASSUMPTIONS:  libtcl and libtk will have the same naming conventions.
#

tcl_libsearchpath=""
tcl_libfound="no"
AC_MSG_CHECKING([Tcl/Tk library to use])

	# Does the user want us to look somewhere in particular:

AC_ARG_WITH(tcl-libdir,
	[  --with-tcl-libdir=dir Specify where the tcl libraries live.],
	[tcl_libsearchpath=$withval])

tcl_libsearchpath="$tcl_libsearchpath /usr/lib /usr/local/lib"

tcl_libfiles=libtcl.a
for v in ${tcl_versions}
do
   tcl_libfiles="$tcl_libfiles libtcl${v}.a"
done


for dir in ${tcl_libsearchpath} 
do
  for file in ${tcl_libfiles}
  do
    fname=$dir/$file
    if test $tcl_libfound == "no" 
    then
      AC_CHECK_FILE($fname,
	[tcl_libdir=$dir
         tcl_libname=$file
	 tcl_libfound="yes"
	])
    fi
  done
done

if test $tcl_libfound == "yes"
then
  # Find the lib basename:

  tcl_libname=$(echo $tcl_libname|cut -c 4- )  # trim off lib 
  #
  #  Use basename to trim of the .a or .so:
  #

  tcl_libname=$(basename $(basename $tcl_libname .a) .so)
  tk_libname=tk$(echo $tcl_libname|cut -c 4-)   # trim off tc...and use tk
  TCL_LDFLAGS="-L${tcl_libdir} -l${tk_libname}  -l${tcl_libname}"
  
else
  AC_MSG_ERROR([Unable to find the tcl library, help me out with --with-tcl-libdir])
fi

AC_MSG_CHECKING([ for VME device ])
#   VMEDEVICE  - The name of the selected api.
#


VMEDEVICE="SBSBIT3"     # Support for Nikhef drv dropped

if test $VMEDEVICE = "SBSBIT3" 
then
   VMEBUILDHEADERS="-I$(pwd)/btdriver/include"
   VMEBUILDLIBS="-L$(pwd)/btdriver/lib -lbtp"

#  Since the bt library is part of the build:

   VMELIBRARYHEADERS="-I$prefix/include"
   VMELIBRARY="-L$prefix/lib -lbtp"
fi

AC_MSG_RESULT([hard coded to SBSBIT3: BUILDHEADERS: $VMEBUILDHEADERS])

#   CAMAC defaults to CESCAMAC but can be overidden via --with-camac=VC32CAMAC

CAMAC="-DCESCAMAC"
AC_ARG_WITH(camac,
       [ --with-camac=interface - specify the camac interfce (e.g. VC32CAMAC)],
	CAMAC="-D$withval",[])

#  X11 libraries 

X11INCS="${X_CFLAGS}"
X11LIBS="${X_LIBS} ${X_EXTRA_LIBS} -lXm -lXt -lX11"

#  To run latex on hyperlatex documentation, we need all of the  following:
#  Latex, dvips, kpathsea and the existence of hyperlatex.sty findable by
#  kpathsea:
#
if test $HAVELATEX = "yes" -a $HAVEDVIPS == "yes" -a \
	$HAVEKPATHSEA = "yes"
then
	stylefile=$(kpsewhich hyperlatex.sty)
	if test "$stylefile" != ""
	then
	   AC_PATH_PROG(LATEX, latex)
	   AC_PATH_PROG(DVIPS, dvips)
	else
	   LATEX="echo"
	   DVIPS="echo"
	fi
fi



#  Figure out where the linux kernel headers are.
#  We'll look for  $(HEADERS)/linux/module.h  in the following spots:
#  - /usr/src/kernel-headers-$(uname -r)/include  [debian]
#  - /usr/src/linux-$(uname-r)/include            [redhat]
#  - /usr/src/linux/include                       [old? redhat]
#  -  Where the user tells us with --with-kernel-headers=value.

AC_MSG_CHECKING([for kernel headers (.../linux/module.h)])

AC_ARG_WITH(kernel-headers,
	[--with-kernel-headers=location of linux kernel headers],
	[KERNEL_INCS="-I$withval"],[KERNEL_INCS="-"])

if test $KERNEL_INCS = "-" ; then
  AC_CHECK_FILE(/usr/src/kernel-headers-$(uname -r)/include/linux/module.h,
    [KERNEL_INCS="-I/usr/src/kernel-headers-$(uname -r)/include"])
fi

if test $KERNEL_INCS = "-" ; then
  AC_CHECK_FILE(/usr/src/linux-$(uname -r)/include/linux/module.h,
      [KERNEL_INCS="-I/usr/src/linux-$(uname -r)/include"])
fi

if test $KERNEL_INCS = "-" ; then
  AC_CHECK_FILE(/usr/src/linux/include/linux/module.h,
      [KERNEL_INCS="-I/usr/src/linux-$(uname -r)/include"])
fi

if test $KERNEL_INCS = "-"; then
	AC_MSG_ERROR([Could not find kernel headers. Try the --with-kernel-headers switch])
fi


#   Figure out SMP flag (needed by the btdriver build).

AC_MSG_CHECKING([for smp system (btdriver)])

if (uname -v |grep -q SMP)
then
  SMP_FLAG="-D__SMP__"
  AC_MSG_RESULT([System runs the SMP kernel])
else
  SMP_FLAG=""
  AC_MSG_RESULT([System is not running an SMP kernel])
fi

#
#   Look for epics in:
#    /usr/local/epics
#    /opt/epics
#    /soft/intel/epics   [nscl].
#    --with-epics-rootdir=
# Underneath that we have (we require intel linux remember):
#    include                  - the include directory
#    include/os/linux-x86     - os specific includes.
#    lib/linux-x86            - libs
#    bin/linux-x86/caRepeater - The caRepeater program.
#

epicstestdirs="/usr/local/epics /opt/epics /soft/intel/epics"
haveepics="no"

AC_MSG_CHECKING([ for epics includes, libs and binaries])

#  Check for --with-epics-rootdir....

AC_ARG_WITH(epics-rootdir,
	[  --with-epics-rootdir=top level directory of EPICS install],
	[haveepics="yes"
	 epicsroot="$withval"],
	[haveepics="no"])



if test $haveepics == "no"
then
   for dir in $epicstestdirs
   do
      if test $haveepics == "no"
      then
        AC_CHECK_FILE([${dir}/include/cadef.h],
	              [haveepics="yes"
                       epicsroot=$dir])
      fi
   done
fi

#  If we found epics we can build the software that needs it.
#  otherwise it's optional.

if test $haveepics == "yes"
then
	# Have epics:

   EPICSSOFTWARE="controlpush" # Add this directory to build.
   EPICS_INCLUDES="-I$epicsroot/include -I$epicsroot/include/os/Linux"
   EPICS_LDFLAGS="-L$epicsroot/lib/linux-x86 -lca -Wl,\"-rpath=$epicsroot/lib/linux-x86\""
   EPICS_BIN="-DEPICS_BIN=\"\\\"$epicsroot/bin/linux-x86\\\"\""
else
	# No epics.. provide blank variables:

   EPICSSOFTWARE=""	# no directories to add to make.
   EPICS_LDFLAGS=""	# No ldflags.	
   EPICS_INCLUDES=""	# No includes.
   EPICS_BIN=""
fi

# define substitutions:

#  Go for a strict linguistic interpretation:

#       CXXFLAGS="-std=c++98 -pedantic"

#   someday:   AC_SUBST(CXXFLAGS)

	# EPICS if it exists.

AC_SUBST(EPICSSOFTWARE)
AC_SUBST(EPICS_LDFLAGS)
AC_SUBST(EPICS_INCLUDES)
AC_SUBST(EPICS_BIN)

	# Spectrodaq:

AC_SUBST(spectrodaq_conf_dir)
AC_SUBST(SPECTRODAQ_FLAGS)
AC_SUBST(SPECTRODAQ_LDFLAGS)

	# tcl/tk

AC_SUBST(TCL_FLAGS)
AC_SUBST(TCL_LDFLAGS)

	# VME device:

AC_SUBST(VMEDEVICE)
AC_SUBST(VMELIBRARY)
AC_SUBST(VMELIBRARYHEADERS)
AC_SUBST(VMEBUILDHEADERS)
AC_SUBST(VMEBUILDLIBS)

	# CAMAC device:

AC_SUBST(CAMAC)

	# X11: 

AC_SUBST(X11LIBS)
AC_SUBST(X11INCS)

	# DOXYGEN

AC_SUBST(DOXYGEN)

	# Hyperlatex:

AC_SUBST(HYPERLATEX)
AC_SUBST(LATEX)
AC_SUBST(DVIPS)

#   Linux kernel headers:

AC_SUBST(KERNEL_INCS)

#   Kernel type (SMP or not)

AC_SUBST(SMP_FLAG)


#   The base part of the .so version:

AC_SUBST(SOVERSION)

#  Create output files:

AC_OUTPUT( Makefile Headers/Makefile CopyrightTools/Makefile \
	Exception/Makefile  TCL/Makefile Security/Makefile Ftp/Makefile \
	VMEApi/Makefile cvt/Makefile \
	SpecTclOnline/Makefile DeviceSupport/Makefile \
	Readout/Makefile diskrun/Makefile \
	EventLog/Makefile  Scaler/Makefile contrib/Makefile \
	contrib/lecroy/Makefile contrib/whedco/Makefile \
	contrib/caenv812/Makefile contrib/scriptedReadout/Makefile \
	contrib/scalerdisplay/Makefile contrib/N568Panel/Makefile \
	vmetcl/Makefile \
	vmetcl/camactcl/Makefile vmetcl/vhq202m/Makefile bufdump/Makefile \
	TclServer/Makefile bcnaf/Makefile TcpHoister/Makefile Stager/Makefile \
	Scripts/Makefile framework/Makefile AlarmDisplay/Makefile \
	LogDisplay/Makefile ProductionReadout/Makefile \
	ProductionReadout/hyperlatex/Makefile \
	btdriver/Makefile btdriver/dd/Makefile btdriver/lib/Makefile \
	btdriver/include/Makefile  controlpush/Makefile dvdburn/Makefile \
	daqstart/Makefile )
