'\"
'\" Copyright (c) 2004  Michigan State University
'\" The TCL formatting macros have been shamelessly stolen
'\" from the httpd tcl man page:
'\"
'\" Copyright (c) 1995-1997 Sun Microsystems, Inc.
'\" Copyright (c) 1998-2000 by Ajuba Solutions.
'\"
'\" See the file "license.terms" for information on usage and redistribution
'\" of this file, and for a DISCLAIMER OF ALL WARRANTIES.
'\" 
'\" RCS: @(#) $Id: http.n,v 1.10.2.5 2002/04/18 16:46:09 dgp Exp $
'\" 
'\" The definitions below are for supplemental macros used in Tcl/Tk
'\" manual entries.
'\"
'\" .AP type name in/out ?indent?
'\"	Start paragraph describing an argument to a library procedure.
'\"	type is type of argument (int, etc.), in/out is either "in", "out",
'\"	or "in/out" to describe whether procedure reads or modifies arg,
'\"	and indent is equivalent to second arg of .IP (shouldn't ever be
'\"	needed;  use .AS below instead)
'\"
'\" .AS ?type? ?name?
'\"	Give maximum sizes of arguments for setting tab stops.  Type and
'\"	name are examples of largest possible arguments that will be passed
'\"	to .AP later.  If args are omitted, default tab stops are used.
'\"
'\" .BS
'\"	Start box enclosure.  From here until next .BE, everything will be
'\"	enclosed in one large box.'\"
'\" .BE
'\"	End of box enclosure.
'\"
'\" .CS
'\"	Begin code excerpt.
'\"
'\" .CE
'\"	End code excerpt.
'\"
'\" .VS ?version? ?br?
'\"	Begin vertical sidebar, for use in marking newly-changed parts
'\"	of man pages.  The first argument is ignored and used for recording
'\"	the version when the .VS was added, so that the sidebars can be
'\"	found and removed when they reach a certain age.  If another argument
'\"	is present, then a line break is forced before starting the sidebar.
'\"
'\" .VE
'\"	End of vertical sidebar.
'\"
'\" .DS
'\"	Begin an indented unfilled display.
'\"
'\" .DE
'\"	End of indented unfilled display.
'\"
'\" .SO
'\"	Start of list of standard options for a Tk widget.  The
'\"	options follow on successive lines, in four columns separated
'\"	by tabs.
'\"
'\" .SE
'\"	End of list of standard options for a Tk widget.
'\"
'\" .OP cmdName dbName dbClass
'\"	Start of description of a specific option.  cmdName gives the
'\"	option's name as specified in the class command, dbName gives
'\"	the option's name in the option database, and dbClass gives
'\"	the option's class in the option database.
'\"
'\" .UL arg1 arg2
'\"	Print arg1 underlined, then print arg2 normally.
'\"
'\" RCS: @(#) $Id: man.macros,v 1.3.12.1 2001/04/03 22:06:43 hobbs Exp $
'\"
'\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp
..
'\"	# SO - start of list of standard options
.de SO
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
'\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\fBoptions\\fR manual entry for details on the standard options.
..
'\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
'\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
'\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.de UL
\\$1\l'|0\(ul'\\$2
..
'\"  End of stolen macros --------------------------------
.TH "vhq" 3tcl 1.0 DAQ "DAQ TCL Packages"
.BS
.SH NAME
vhq \- TCL Package to control ISEG power supplies.
.SH SYNOPSIS
\fBpackage require vhq\f
.sp
\fB::vhq::create\fR \fIbase\fR ?\fIcrate\fR?
.sp
\fB::vhq::delete\fR \fImodule\fR
.sp
\fB::vhq::id\fR \fImodule\fR
.sp
\fB::vhq::stat1\fR \fImodule\fR
.sp
\fB::vhq::stat2\fR \fImodule\fR
.sp
\fB::vhq::rampspeed \fR \fImodule\fR a|b ?\fIvalue\fR?
.sp
\fB::vhq::setv\fR \fImodule\fR a|b ?\fIvalue\fR
.sp
\fB::vhq::limit\fR \fImodule\fR v|c|i a|b ?\fIvalue\fR?
.sp
\fb::vhq::actual\fR \fImodule\fR a|b
.SH DESCRIPTION
.PP
The vhq package allows you to control the ISEG family of VME High detector
bias supply controllers.  This package is built on top of the vme package.
Therefore, scripts that make use of the vhq package must run on systems that
are physically connected to VME crates that have the ISEG controller(s)
being controlled.
.SH COMMANDS
.TP
\fB::vhq::create\fP \fIbase\fP ?\fIcrate\fR?
This command creates a handle to an ISEG power supply controller and
associates it with a VME address range.  The handle is returned as
the command value for the supply where:
.RS
.TP
\fIbase\fR
Is the base address of the module in VME space.  The module base address
(in short IO space) is set via a very strange procedure described in the
module documentation.  
.TP
\fIcrate\fR
Is the number of the VME crate in which the module is inserted.  This
value defaults to 0 which is suitable for use in systems with only  a
single VME crate.
.RE
.TP
\fB::vhq::delete\fP \fImodule\fR
Destroys the correspondence between a module handler returned by
\fB::vhq::create\fR and the VME module.  Any resources required to
maintain this correspondence are released.
.RS
.TP
\fImodule\fR
Is a controller that was returned from the \fB::vhq::create\fR command.
.RE
.TP
\fB::vhq::id\fP \fImodule\fR
Returns the serial number of the specified module.  The serial number is returned
as a Binary Coded Decimal (BCD) string.
.RS
.TP
\fImodule\fR
Is a module handle that was returned from a \fB::vhq::create\fR command.
.RE
.TP
\fB::vhq::stat1\fR \fImodule\fR
Returns the information from the \fImodule\fR status register 1.  This register
contains bit encoded data for both of he two channels in the module.  The data are
returned as a list of two elements.  Element 0 contains status for chanel 0, element 1
the status for channel 1.  Each element is itself a list of two element sublists.
Each of the two element sublists is a keyword value pair.  The keyword describes the
bit and the value is 0 if the bit is clear an 1 if the bit is set.  The keywords are:
.RS
.TP
\fBvz\fR
 The voltage value is currently zero.
.TP
\fBmanual\fR
The manual swithc is enabled.
.TP
\fBplus\fR
The voltage output is positive.  The polarity of the module is controlled
by a hardware switch within the module itself.
.TP
\fBoff\fR
The High voltage is powered down.
.TP
\fBkill\fR
Is true if the kill switch is on.  The kill switch enables various alarm
status conditions to trip the voltage off (e.g. over current or undervoltage).
.TP
\fBrampup\fR
True if the power supply is ramping to a new value.
.TP
\fBstable\fR
True if the power supply has reached a stable voltage.
.TP
\fBerror\fR
True if some error is present in status register 2 for the channel.
.RE
.TP
\fB::vhq::stat2\fR \fImodule\fR
Returns information from status register 2 of \fImodule\fR.  The format of
the returned value is similar to that of \bf::vhq::stat1\fR, however the 
list is a three element list.  The first element of the list is gives 
the status of the timeout bit as {tot 0|1}.  The second element of the list
gives channel 0 specific status while the third element of the list goves
channel 1 specific status.  As before, status is a list of keyword value pairs.
Valid keywords are:
.RS
.TP
\fBilimit\fR
True if the supply is current limiting.
.TP
\fBOpComplete\fR
True if the last operation is complete.
.TP
\fBFpChanged\fR
True if a front panel switch has changed.
.TP
\fBVoverset\fR
True if the supply is in overvoltage.
.TP
\fBInhibited\fR
True ifthe supply is inhibited.
.TP
\fBOverVorI\fR
True if there is either an over voltage or over current state.
.TP
\fBBadQuality\fR
True if the power voltage is not regulating well.
.RE
.TP
\fB::vhq::rampspeed\fR \fImodule\fR a|b ?\fIvalue\fR?
Returns the current ramp speed in 10V/sec units.  The optional
\fIvalue\fR causes the ramp speed to be reprogrammed.
.RS
.TP
\fBmodule\fR
The module handle returned from the \fB::vhq::create\fR calls.
.TP 
\fBa|b\fR
Selects which channel is operated on, channel A or B.
.RE
.TP
\fB::vhq::setv\fR \fImodule\fR a|b ?\fIvalue\fR?
Retrieves the voltage target.  If the optional \fIvalue\fR is supplied,
it is taken as a new voltage target and a ramp to that target
is begun.
.RS
.TP
\fBmodule\fR
Is a module that was retunred from \fB::vhq::create\fR and selects the
supply that is operated on. 
.TP
\fBa|b\fR
Determines which channel, a or b will be read or set.
.RE
.TP
\fB::vhq::limit\fR \fImodule\fR v|c|i a|b ?\fIvalue\fR?
Examines or modifies the voltage or current limit of a device.
.RS
.TP
\fImodule\fR
Is a module handle returned from \fBvhq::create\fR specifying which hardware
is being operated on.
.TP
\fB v|c|i\fR
Selects whether the voltage (v) or current (c or i) limits are being operated on.
.TP
\fBa|b\fR
Selects which channel (a or b) is affected.
.TP
?\fBvalue\fR?
If present, this is the new value for the limit.
.RE
.TP
\fB::vhq::actual\fR \fImodule\fR a|b
Returns a two element list containing the voltage and current for the specified
channel (a or b).
