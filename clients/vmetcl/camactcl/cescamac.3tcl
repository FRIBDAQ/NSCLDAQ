'\"
'\" Copyright (c) 2004  Michigan State University
'\" The TCL formatting macros have been shamelessly stolen
'\" from the httpd tcl man page:
'\"
'\" Copyright (c) 1995-1997 Sun Microsystems, Inc.
'\" Copyright (c) 1998-2000 by Ajuba Solutions.
'\"
'\" See the file "license.terms" for information on usage and redistribution
'\" of this file, and for a DISCLAIMER OF ALL WARRANTIES.
'\" 
'\" RCS: @(#) $Id: http.n,v 1.10.2.5 2002/04/18 16:46:09 dgp Exp $
'\" 
'\" The definitions below are for supplemental macros used in Tcl/Tk
'\" manual entries.
'\"
'\" .AP type name in/out ?indent?
'\"	Start paragraph describing an argument to a library procedure.
'\"	type is type of argument (int, etc.), in/out is either "in", "out",
'\"	or "in/out" to describe whether procedure reads or modifies arg,
'\"	and indent is equivalent to second arg of .IP (shouldn't ever be
'\"	needed;  use .AS below instead)
'\"
'\" .AS ?type? ?name?
'\"	Give maximum sizes of arguments for setting tab stops.  Type and
'\"	name are examples of largest possible arguments that will be passed
'\"	to .AP later.  If args are omitted, default tab stops are used.
'\"
'\" .BS
'\"	Start box enclosure.  From here until next .BE, everything will be
'\"	enclosed in one large box.'\"
'\" .BE
'\"	End of box enclosure.
'\"
'\" .CS
'\"	Begin code excerpt.
'\"
'\" .CE
'\"	End code excerpt.
'\"
'\" .VS ?version? ?br?
'\"	Begin vertical sidebar, for use in marking newly-changed parts
'\"	of man pages.  The first argument is ignored and used for recording
'\"	the version when the .VS was added, so that the sidebars can be
'\"	found and removed when they reach a certain age.  If another argument
'\"	is present, then a line break is forced before starting the sidebar.
'\"
'\" .VE
'\"	End of vertical sidebar.
'\"
'\" .DS
'\"	Begin an indented unfilled display.
'\"
'\" .DE
'\"	End of indented unfilled display.
'\"
'\" .SO
'\"	Start of list of standard options for a Tk widget.  The
'\"	options follow on successive lines, in four columns separated
'\"	by tabs.
'\"
'\" .SE
'\"	End of list of standard options for a Tk widget.
'\"
'\" .OP cmdName dbName dbClass
'\"	Start of description of a specific option.  cmdName gives the
'\"	option's name as specified in the class command, dbName gives
'\"	the option's name in the option database, and dbClass gives
'\"	the option's class in the option database.
'\"
'\" .UL arg1 arg2
'\"	Print arg1 underlined, then print arg2 normally.
'\"
'\" RCS: @(#) $Id: man.macros,v 1.3.12.1 2001/04/03 22:06:43 hobbs Exp $
'\"
'\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp
..
'\"	# SO - start of list of standard options
.de SO
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
'\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\fBoptions\\fR manual entry for details on the standard options.
..
'\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
'\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
'\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.de UL
\\$1\l'|0\(ul'\\$2
..
'\"  End of stolen macros --------------------------------
.TH "cescamac" 3tcl 1.1 DAQ "CES Camac TCL Loadable package"
.BS
.SH NAME
camac \- TCL loadable package to access CAMAC via CES CBD8210
.SH SYNOPSIS
\fBpackage require camac\fR
.sp
\fB::camac::cdreg\fR  \fIb c n ?vmecrate?\fR
.sp
\fB::camac::cfsa\fR   \fIf a ?d?\fR
.sp
\fB::camac::cssa\fR   \fIf a ?d?\fR
.sp
\fB::camac::qstop\fR  \fIf a ?maxn?\fR
.sp
\fB::camac::qscan\fR  \fIf a ?maxn?\fR
.sp
\fB::camac::cblock\fR \fIf a num\fR
.sp
\fB::camac::isOnline\fR \fIb c ?vmecrate?\fR
.sp
\fB::camac::getGl\fR     \fIb ?vmecrate?\fR
.sp
\fB::camac::C\fR     \fIb c ?vmecrtate?\fR
.sp
\fB::camac::Z\fR      \fIb c ?vmecrate?\fR
.sp
\fB::camac::isInhibited\fR    \fIb c ?vmecrate?\fR
.sp
\fB::camac::Inhibit\fR  \fIb c state ?vmecrate?\fR
.sp
\fB::camac::ReadLams\fR \fIb c ?vmecrate\fR

.SH DESCRIPTION
.PP
The camac package provides access to CAMAC crates on systems that have 
VME busses attached to them via the SBS/Bit3 PCI/VME bus bridge, when one
or more VME crates will have a CES CBD8210 branch highway driver installed
in it.  Note that this device is no longer manufactured. We strongly suggest 
that all current users of this device switch to the Wiener CC32/VC32 (see the
SEE ALSO section of this document).  All new systems should be built around the
CC32/VC32 subsystem.
.PP
Where possible, the package attempts to mimic the functionality specified
by the ESONE CAMAC routines described by the CAMAC standard documents.  In TCL,
there are cases where this is not possible.  In addition, there are cases where
we have implemented extensions not foreseen by the ESONE standards.
.PP
The philosophy behind the ESONE standard is that a module is accessed by first using
\fBcdreg\fR to acquire a handle to it.  We have extended the notion of branches 
and crates in the ESONE system to include an additional optional vme crate 
parameter.  Once a module handle has been acquired, it is passed to functions
that manipulate the module.
.PP 
Note that all of the camac functions live in the namespace \fB::camac::\fR. All are
exported so they can be imported  into the current namespace via e.g. 
.CS
package require camac
namespace import ::camac::*
...
set module [cdreg 0 1 2];    # instead of e.g. ::camac::cdreg
.CE
.SH COMMANDS
.TP
\fB::camac::cdreg\fP  \fIb c n ?vmecrate\fR
Creates and returns a handle to a module.  The handle can be used as the \fImodule\fR
argument of commands described later in this section.
.RS
.TP
\fIb\fP
The number of the branch the module is installed in.  Note that this
number is the number on the front panel dial of the CES CBD8210 module.
.TP
\fIc\fP
The number of the CAMAC crate in which the module is installed. Note that
this is the number in the thumbwheel on the crate controller's front panel.
.TP
\fIn\fP
The number of the slot in which the module is inserted.
.TP
\fIvmecrate\fP
The optional number of the VME crate in which the CES CBD 8210 is 
installed.  Note that if omitted, this value defaults to 0 which is 
sufficient for systems with a single VME crate.
.RE
.TP
\fB::camac::cfsa\fP  \fImodule f a ?d?\fR
Peforms a CAMAC transaction on \fImodule\fR.  If a data transfer is required, it
is performed at the full 24 bit width of the CAMAC dataway.  The return value of a
successfully executed command is a three element list.  The list elements are the dataway Q and X 
responses, and any data that has been transferred (either in or out).
.RS
.TP
\fImodule\fP
A  module handle that was returned from camac::cdreg.
\fIf\fP
The CAMAC function code to execute on the module.
\fIa\fP
The module subaddress the function code is targeted to.
\fI?data?\fP
Optional data that is required for write function codes (15 < \fIf\fR < 24).
.RE
.TP
\fB::camac::cssa\fP  \fImodule f a ?data?\fR
This function is identical to \fB::camac::cfsa\fR however only the least 16 significant bits of
data are transferred in the case of data transfer operations.
.TP
\fB::camac::qstop\fP \fImodule f a ?maxn?\fR
Performs a Qstop block transfer from the target module.  Qstop transfers perform the same data
transfer operation targeted at the same module and subaddress repeatedly until the module
does not return a Q response to the operation.  This operation only supports reads.
(0<= \fIf\fR < 8).  The data read from the module is returned as a TCL formatted list.
.RS
.TP
\fImodule\fP
Is the module targeted by this operation.   The module is a handle returned by the
\fB::camac::cdreg\fR command.
.TP
\fIf\fP
Is the function code to repeat.  The operation fails if this
function code is not in the range 0 <= \fIf\fR <= 7.
.TP
\fIa\fP
Is the subaddress of the module this operation is targeted at.  In most cases, this will
represent a data channel.
.TP
\fImaxn\fP
If present, represents the maximum number of transfers that are allowed to occur with a 
Q response before terminating.  By default this is MAXINT.  
.RE
.TP
\fB::camac::qscan\fP  \fImodule f a ?maxn?\fR
Performs a Q scan starting at the indicated module and subaddress.   A Q-scan is a block
transfer operation that repeatedly performs the indicated function.  After each repetition, the 
module subaddress is incremented.  When a module stops returning a Q, the slot is incremented.
The scan continues until the dataway X response is false indicating the scan has entered an
empty slot.  This implementation only supports read operations (0<= \fIf\fR < 8).
.RS
.TP
\fImodule\fP
Is the module targeted by this operation.   The module is a handle returned by the
\fB::camac::cdreg\fR command.
.TP
\fIf\fP
Is the function code to repeat.  The operation fails if this
function code is not in the range \[0,7\].
.TP
\fIa\fP
Is the subaddress of the module this operation is targeted at.  In most cases, this will
represent a data channel.
\fImaxn\fP
If present, represents the maximum number of transfers that are allowed to occur with a 
before terminating.  By default this is MAXINT.  
.RE
.TP
\fB::camac::cblock\fR \fImodule f a num\fR
Performs an unconditional block transfer from the specified location. This implementation 
only supports block reads.  The same function is repeated as indicated by the \fInum\fR parameter.
.RS
.TP
\fImodule\fP
Is the module targeted by this operation.   The module is a handle returned by the
\fB::camac::cdreg\fR command.
.TP
\fIf\fP
Is the function code to repeat.  The operation fails if this
function code is not in the range \[0,7\].
.TP
\fIa\fP
Is the subaddress of the module this operation is targeted at.  In most cases, this will
represent a data channel.
.TP
\fInum\fP
The number of transfers to perform.
.RE
.TP
\fB::camac::isOnline\fP  \fIb c ?v?\fR
Returns a boolean value that is true if the indicated crate is online.  Note that the value is 
not well defined when there is no branch controller for the branch \fIb\fR.  The operation will
fail if the VME crate \fIv\fR is offline.
.RS
.TP
\fIb\fR
The branch to check.
.TP
\fIc\fR
The crate to check.
.TP
\fIv\fR
The VME crate in which to check.  If omitted, this optional parameter defaults to crate
0 which is suitable for systems with a single VME crate.
.RE
.TP
\fB::camac::GetGL\fP \fIb ?v?\fR
Returns a bitmask that represents the set of graded LAMs for a particular branch.  In a parallel
branch highawy, the LAM (Look At Me) signals from each module go through a LAM grader in the
crate controller and contribute to building up a mask of up to 24 graded lams present globally on 
on the branch highway.  (It is still possible to interrogate individual crates about their
contributions to this mask).  At the NSCL, generally, this LAM grading is done by bit encoding
the slots within each crate.
.RS
.TP
\fIb\fR
The branch to interrogate for its graded lam mask.
.TP
\fIv\fR
The optional VME crate in which the branch controller is installed.  If this parameter
is omitted, then it defaults to 0 which is suitable for a system with a single VME crate.
.RE
.TP
\fB::camac::C\fP \fIb c ?v?\fR
Performs a C cycle (clear) on the indicated CAMAC crate.
.RS
.TP
\fIb\fR
Selects the branch to operate on.
.TP
\fIc\fR
Selects the crate to operate on.
.TP
\fIv\fR
 Optional parameter to select the VME crate in which the branch controller is installed.
 This parameter defaults to zero which is appropriate in a single VME crate system.
.RE
.TP
\fB::camac::Z\fP  \fIb c ?v?\fR
Performs a Z cycle on the selected CAMAC crate.
.RS
.TP
\fIb\fR
Selects the branch in which the crate lives.
.TP
\fIc\fR
Selects the crate to operate on.
.TP
\fIv\fR
Optional parameter that indicates which VME crate the branch controller lives in. This
parameter defaults to 0 which is appropriate in single VME crate systems.
.RE
.TP
\fB::camac::isInhibited\fP \fIb c ?v?\fR
Returns a boolean flag indicating the state of the dataway inhibit on the selected CAMAC crate.
.RS
.TP
\fBb\fR
The branch containing the crate to check.
.TP
\fBc\fR
Selects the crate to check.
.TP
\fBv\fR
Optional parameter that indicates which VME crate the branch highway controller is installed in.
This parameter defaults to zero which is appropriate in a single VME crate system.
.RE
.TP
\fB::camac::Inhibit\fP \fIb c state ?v?\fR
Sets or clears the state of the dataway inhibit in the selected CAMAC crate.
.RS
.TP 
\fIb\fR
The branch the crate lives in.
.TP
\fIc\fR
The crate to inhibit or uninhibit.
.TP
\fIstate\fR
The desired state of the inhibit.  Nonzero sets the inhibit (inhibits the crate), while
zero removes the inhibit (uninhibits the crate).
.TP
\fIv\fR
Optional parameter that indicates which VME crate the branch controller lives in. This
parameter defaults to 0 which is appropriate in single VME crate systems.
.RE
.TP
\fB::camac::ReadLams\fP \fIb c ?v?\fR
Reads the mask of graded Look At Me (LAM) signals from a specified crate.  Each CAMAC crate
maps the set of LAMs from its slot to a graded lam pattern.  This is done using a device called
a LAM grader that is plugged into the back of the crate controller.  At the NSCL, we typically
are using a completely passive LAM grader that maps each slot into a corresponding bit of the
24 bit graded lam word.
.RS
.TP
\fIb\fR
The branch in which the crate lives.
.TP
\fIc\fR
The number of the crate to read the lam mask from.
.TP
\fIv\fR
Optional parameter that indicates which VME crate the branch controller lives in. This
parameter defaults to 0 which is appropriate in single VME crate systems.
.RE
.SH "SEE ALSO"
vmetcl(3tcl), wienercamac(3tcl)
.SH "KEYWORDS"
camac, tcl, crate, ces8210