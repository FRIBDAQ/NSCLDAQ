/*!
	\page Modes Supported module operating modes.

	\section Modesec Module operating modes.

	The SIS3600 is a 32 bit coincidence register/latch.  It therefore has
	two operating modes (refer to page 27 of the hardware manual);
	- Latch mode: In this mode, The leading edge of the external "Next Event" 
	  signal latches the state the inputs.  The inputs should remains stable
	  throughout the entire duration of the Next Event Pulse.
        - Coincidence mode: In this mode, ones are recorded for all bits that
          undergo a transition to true during the duration of the "Next Event" 
	  signal.  The bits should remain stable until the Next Event pulse is
	  released.

	Note that the module contains a FIFO.  It is therefore possible to, e.g.
	in latch mode, latch in an arbitrary set of inputs.  Since the Next Event
	pulse can be as short as 10ns, in theory, the module could be used to 
        readout some external subsystem at the rate of 10Mhz.  Designing systems
	that function in this way is beyond the scope of this document.

	The remainder of this page describes how to setup the module in 
	- \ref Latch
	- \ref Coincidence

	and describes the \ref FastClear

	\section Latch Latch mode.
	
	Latch mode is seected by invoking the CSIS3600::SetLatchMode member function.
	The sample code below expands on the constructor example in \ref Intro to
	construct the module and set it into latch mode:

	\code
	   #include <CSIS3600.h>
	...
	   CSIS3600* pModule(0);       // At program startup, null pointer.
        ...
           void initevt() 
           {
        ...
	     if(!pModule) {
               pModule = new CSIS3600(0x36000000, 0);    // Base,crate.
             }
	     pModule->SetLatchMode();              // Run in latch mode.
           }

	\endcode.

	\section Coincidence Coincidence mode.

	Concidence mode is selected by invoking the CSIS3600::SetCoincidenceMode
	member function.
	The sample code below expands on the constructor example in \ref Intro to
	construct a module and set it into Coincidence mode.
	\code
	   #include <CSIS3600.h>
	...
	   CSIS3600* pModule(0);       // At program startup, null pointer.
        ...
           void initevt() 
           {
        ...
	     if(!pModule) {
               pModule = new CSIS3600(0x36000000, 0);    // Base,crate.
             }
	     pModule->SetCoincidenceMode();              // Run in latch mode.
           }

	\endcode.

	\section FastClear Fast clear window.

	The module includes support for a fast clear input.  If the fast clear
	input is pulsed within the fast clear window after the falling edge of
	the "Next Event" signal, no data is transferred to the module fifo for 
	that event.
	
	The fast clear window is setup by first calling the 
	CSIS3600::SetFastClearWindow member function to select a fast clear
	window size and then calling the CSIS3600::EnableExternalClear member
	to enable the external fast clear.

	Extending the sample codein \ref Coincidence:

	\code
	   #include <CSIS3600.h>
	...
	   CSIS3600* pModule(0);       // At program startup, null pointer.
        ...
           void initevt() 
           {
        ...
	     if(!pModule) {
               pModule = new CSIS3600(0x36000000, 0);    // Base,crate.
             }
	     pModule->SetCoincidenceMode();              // Run in latch mode.
	     pModule->SetFastClearWindow(150);           // 150ns fc window.
	     pModule->EnableExternalClear();             // Allow fast clears.
           }

	\endcode
	Note that the parameter to CSIS3600:SetFastClearWindow is a window
	width in ns that may be in the range [120ns,25000ns].

*/