/*!

	\page Registration Object Registries names and descriptions.

  The goal of the framework is to provide some capability of introspection
to the application.  Introspection allows programs to examine themselves,
determine what objects are instantiated, and for what types as well as
to get descriptive information about each object.  For the spectrodaq client
framework, introspection is achieved via:

- \ref registries Object registries (dictionaries of objects) 
- \ref Hierarchyinfo Object class hierarchy positioning information
- \ref SelfDescription Object description member functions.

For a simple application example see \ref regExample "Registration Example"
below.

\section  registries Object Registries and the ApplicationRegistry.

The intent of object registries and the application registry is to allow
a program to determine what set of objects from what general class types
are currently instantiated, and to get pointers to a specific object, given
its name, for later manipulation.  This registration of objects allows:
- Objects to circularly reference each other for communication purposes
- In the future: we will be able to provide support for Tcl/Tk commands
  to list, create and manipulate objects by their names, allowing for
  "programming free" configuration of software given that an appropriate
  set of classes exists and is linked into the application.

Each application using an application framework contains a single instance of
an \link CApplicationRegistry application registry. \endlink  
The static function CApplicationRegistry::getInstance retrieves a pointer
to this registry.

Application registries are a subclass of the CClassifiedObjectRegistry class.
classified object registries contain several CObjectRegistry objects.  Each 
of these object registries is a dictionary of classes for a particular type
of object.

Most classes in the framework are descended from the CRegisteredObject class.
This class of object registers itself in the appropriate registry on 
construction, and removes itself from the appropriate registry on destruction.
Subclasses usually provide two types of constructors:
- Anonymous object constructors -  These constructors choose a unique but
  meaningless name for the object and register the object under that name
  in the appopriate object registry.
- Named object constructors - These constructors allow you to choose a name
  for the object and register the object under that name in the appropriate
  object registry.  If an object of the selected name already exists in
  the registry, a CDuplicateNameException will be thrown from the 
  constructor.

The application registry can be searched for specific objects within a 
specific registry or the registries themselves can be iterated through and 
objects enumerated or searched for in each registry.


\section Hierarchyinfo Object class hierarchy positioning information.

CNamedObject derived classes provide two member functions to support retrieving
information about the place of the object in the class hierarchy.  This is 
intended to be descriptive information, rather than information which can
be used from within a program.  (To programmatically manipulate object types,
it is better to use the C++ RTTI subsystem.):
- CNamedObject::AppendClassInfo should be called from within the constructor
  of an application class.  This member function, allows a string which
  describes the full class derivation to be built up.
- CNamedObject::getClassPath Can be called to return this class derivation
  string.

\section SelfDescription  Object Description member functions.

CNamedObject derived classes implement the member function 
\link CNamedObject::DescribeSelf DescribeSelf(). \endlink  DescribeSelf
provides a human readable dump of the current state of an object.  If you
implement DescribeSelf() be sure to call your base class DescribeSelf
so that the full state of the object can be produced.

\section regExample  Registration Example.

The example in this section shows how to create objects which make full use
of the introspective features of the class hierarchy.  The example creates
two Events, a \link CTimerEvent Timer event \endlink and a \link CFileEvent
file event. \endlink  

The file event accepts numeric input on stdin, locates the timer event by name,
describes it and schedules it to run in single shot mode after n seconds
where n is just the number the user typed in. If a non-numeric value
is entered, the application exits.

\include registry.cpp

*/