name: Build (and packaging)

on:
  workflow_call:
    inputs:
      os-version:
        required: true
        type: string
      packaging:
        required: true
        type: boolean

jobs:
  build-and-packaging:
    name: Build (and packaging)
    runs-on: ubuntu-latest
    container:
      image: fribdaq/frib-${{ inputs.os-version }}-ci
      credentials:
        username: changj0frib
        password: ${{ secrets.DOCKERHUB_CHANGJ0FRIB_FOR_CI_READONLY }}
      options: --cpus 2
    steps:
      - uses: actions/checkout@v3
      - name: autoreconf
        working-directory: ./main
        run: autoreconf -if
      - name: Configure libtcl++
        env:
          GIT_SSH_COMMAND: "ssh -o StrictHostKeyChecking=no"
        working-directory: ./main
        shell: bash
        run: |
          git config --global --add safe.directory '*'
          eval `ssh-agent -s`
          
          echo "${{ secrets.LIBTCLPLUS }}" | ssh-add -
          ./tcl++incorp
          ssh-add -D
          
          eval `ssh-agent -k`
      - name: Incorporate unified format
        env:
          GIT_SSH_COMMAND: "ssh -o StrictHostKeyChecking=no"
        working-directory: ./main
        shell: bash
        run: |
          git config --global --add safe.directory '*'
          eval `ssh-agent -s`
          
          echo "${{ secrets.UNIFIEDFMT }}" | ssh-add -
          ./unifiedfmt-incorp.sh
          ssh-add -D
          
          eval `ssh-agent -k`
      - name: Creating build directory
        run: mkdir main/oot
      - name: Configuring
        working-directory: ./main/oot
        shell: bash
        run: |
          # temporary fix for missing header
          cp ../config_pixie16api.h .
          
          ../configure --prefix=$PWD/install \
             --enable-usb=yes \
             --enable-caen-digitizer-support \
             --enable-docs \
             --enable-epics-tools=yes \
             --enable-ddas=/usr/opt/ddas/5.0-004 \
             --with-caen-digitizer-libroot=/usr/opt/caendigitizerlibs \
             --with-epics-rootdir=/usr/opt/epics \
             --with-xiaapidir=/usr/opt/xiaapi/2.13.0/ \
             --with-plx-sdk=/usr/opt/plx \
             CXX=/usr/opt/mpi/openmpi-4.0.1/bin/mpicxx
      - name: Make
        working-directory: ./main/oot
        run: make -j2 clean && make -j2 all && make -j2 install
      - name: Packaging for source distribution
        if: ${{ inputs.packaging == true }}
        working-directory: ./main/oot
        run: |
          make -j2 dist
          mv nscldaq-$GITHUB_REF_NAME.tar.gz nscldaq-$GITHUB_REF_NAME-dist-${{ inputs.os-version }}.tar.gz
      - name: Upload source distribution package
        if: ${{ inputs.packaging == true }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.os-version }} object distribution
          path: ./main/oot/nscldaq-${{ github.ref_name }}-dist-${{ inputs.os-version }}.tar.gz
      - name: Packaging for binary distribution
        if: ${{ inputs.packaging == true }}
        working-directory: /usr/opt/nscldaq
        run: tar -czf nscldaq-$GITHUB_REF_NAME-${{ inputs.os-version }}.tar.gz $GITHUB_REF_NAME
      - name: Upload binary distribution package
        if: ${{ inputs.packaging == true }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.os-version }} binary distribution
          path: /usr/opt/nscldaq/nscldaq-${{ github.ref_name }}-${{ inputs.os-version }}.tar.gz