#!/bin/sh
# -*- tcl -*-
# The next line is executed by /bin/sh, but not tcl \
exec tclsh "$0" ${1+"$@"}

package require tcltest
namespace import ::tcltest::*

source vector.tcl;                  # Object under test
test construction {Construction results in an empty vector} \
    -setup {
        set vector [blt::vector create %AUTO%]    
    }       \
    -body {
        $vector length
    } \
    -result 0
    
test append-1 {Append a single element} \
    -setup {
        set vector [blt::vector create %AUTO%]        
    } \
    -body {
        $vector append element
        lappend result [$vector length]
        lappend result [$vector index 0]
    } \
    -cleanup {
        unset result
        $vector destroy
    } \
    -result [list 1 element]

test append-multiple {Append several elements in one shot} \
    -setup {
        set vector [blt::vector create %AUTO%]    
    }   \
    -body {
        $vector append el1 el2 el3
        set length [$vector length]
        lappend result $length
        for {set i 0} {$i < $length} {incr i} {
            lappend result [$vector index $i]
        }
        set result
    } \
    -cleanup {
        unset result
        $vector destroy
    } \
    -result [list 3 el1 el2 el3]

test append-multiple2 {Append several elements in multiple appends} \
    -setup {
        set vector [blt::vector create %AUTO%]    
    }   \
    -cleanup {
        unset result
        $vector destroy
    }   \
    -body {
        $vector append el1 el2
        $vector append el3
         set length [$vector length]
        lappend result $length
        for {set i 0} {$i < $length} {incr i} {
            lappend result [$vector index $i]
        }
        set result
    } \
    -result [list 3 el1 el2 el3]

test index {Get elements out in a different order than inserted} \
    -setup {
        set vector [blt::vector create %AUTO%]
    }   \
    -cleanup {
        unset result
    } \
    -body {
        $vector append el1 el2 el3
        for {set i 2} {$i >= 0} {incr i -1} {
            lappend result [$vector index $i]
        }
        set result
    } -result [list el3 el2 el1]

test set-1 {Set an arbitrary element value} \
    -setup {
        set vector [blt::vector create %AUTO%]
        $vector append el1 el2 el3
    } \
    -cleanup {
        unset result
        $vector destroy
    } \
    -body {
        $vector set 1 replaced
        for {set i 0} {$i < [$vector length]} {incr i} {
            lappend result [$vector index $i]
        }
        set result
    } -result [list el1 replaced el3]

test set-2 {Set illegal element} \
    -setup {
        set vector [blt::vector create %AUTO%]
        $vector append el1 el2 el3        
    } \
    -cleanup {
        unset result
        $vector destroy
    } \
    -body {
        set result [catch {
            $vector set 3 failse
        }]
        
    } -result 1

test range-1 {Default range is all elements} \
    -setup {
       set vector [blt::vector create %AUTO%]
        $vector append el1 el2 el3        
    } \
    -cleanup {
        unset result
        $vector destroy
    } \
    -body {
        set result [$vector range]
    } -result [list el1 el2 el3]

test range-2 { specified range.} \
    -setup {
       set vector [blt::vector create %AUTO%]
        $vector append el1 el2 el3 el4       
    } \
    -cleanup {
        unset result
        $vector destroy
    } \
    -body {
        set result [$vector range 1 2]
    } -result [list el2 el3]

test edelete-1 {Delete elements when index list is sorted ok} \
    -setup {
       set vector [blt::vector create %AUTO%]
        $vector append el1 el2 el3 el4       
    } \
    -cleanup {
        unset result
        $vector destroy
    } \
    -body {
        $vector delete 3 1
        set result [$vector range]
    } -result [list el1 el3]
    
test edelete-2 {Delete elements when the index needs to be sorted} \
    -setup {
       set vector [blt::vector create %AUTO%]
        $vector append el1 el2 el3 el4       
    } \
    -cleanup {
        unset result
        $vector destroy
    } \
    -body {
        $vector delete 1 3
        set result [$vector range]
    } -result [list el1 el3]

test trace-delete {Test traces of deletes} \
   -setup {
       set vector [blt::vector create %AUTO%]
        $vector append el1 el2 el3 el4       
    } \
    -cleanup {
        unset result
        $vector destroy
    } \
    -body {
        set result ""
        $vector configure -tracewrite [list set result]
        $vector delete 0
        set result [expr {"$vector" eq "$result"}]
    } -result 1
    
test trace-append {Test traces of append} \
   -setup {
       set vector [blt::vector create %AUTO%]
        $vector append el1 el2 el3 el4       
    } \
    -cleanup {
        unset result
        $vector destroy
    } \
    -body {
        set result ""
        $vector configure -tracewrite [list set result]
        $vector append junk
        set result [expr {"$vector" eq "$result"}]
    } -result 1

test trace-set {Test traces of set} \
   -setup {
       set vector [blt::vector create %AUTO%]
        $vector append el1 el2 el3 el4       
    } \
    -cleanup {
        unset result
        $vector destroy
    } \
    -body {
        set result ""
        $vector configure -tracewrite [list set result]
        $vector set 0 junk
        set result [expr {"$vector" eq "$result"}]
    } -result 1


cleanupTests