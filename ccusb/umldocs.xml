<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
                      "file:///usr/share/xml/docbook/schema/dtd/4.3/docbookx.dtd"

>
<book>
   <bookinfo>
      <title>CC-USB based Data Acquisition System</title>
      <author><firstname>Ron</firstname><surname>Fox</surname></author>
      <revhistory>
          <revision>
	     <revnumber>1.0</revnumber>
	     <date>February 3, 2008</date>
	     <authorinitials>RF</authorinitials>
	     <revremark>Original Release</revremark>
	  </revision>
	  <revision>
	    <revnumber>2.0</revnumber>
	    <date>January 18, 2010</date>
	    <revremark>Added information about additional modules and made it
	               closer to what a class might need
	    </revremark>
	  </revision>
	  <revision>
	    <revnumber>2.1</revnumber>
	    <date>March 24, 2010</date>
	    <revremark>Document support for CAEN C1205 and CAEN 257
	       modules.
	    </revremark>
	  </revision>
      </revhistory>
   </bookinfo>
   
   <!-- Introductory material (chapter 1).  -->
   
   <chapter>
      <title>Introduction</title>
      <para>
         This chapter is an orientation to the CC-USB based data
         acquisition system.
         <itemizedlist>
            <listitem>
               <para>
                  The Section "CC-USB description" provides an overview of the
                  CC-USB controller module
               </para>
            </listitem>
            <listitem>
               <para>
                  "Supported Devices" provides information about which
                  data taking devices are supported by this release and
                  any support restrictions.
               </para>
            </listitem>
            <listitem>
               <para>
                  "Script organization" is an overview to how configuration
                  scripts cooperate to supply configuration for readout,
                  and the NSCL histogramming program; SpecTcl.
               </para>
            </listitem>
         </itemizedlist>
      </para>
      <section>
         <title>CC-USB description</title>
         <para>
            The CC-USB is a CAMAC controller that connects to a host system
            via a USB-2 interface.  USB-2 is capable of trasnfer rates of
            480Mb/sec, however the USB protocol has a very  high transfer
	    initiation
            latency.  This makes USB-2 unsuitable for directly interacting with
            data taking devices on an event by event basis.  
         </para>
         <para>
            The CC-USB implements local intelligence via a capability described
            in its manual as a <firstterm>stack</firstterm>.  A stack is essentially
            a list of CAMAC actions stored in the CC-USB.
	    The execution of a stack is triggered by an external
            condition.  Stacks run without host interaction, filling buffers of
            data which can then be transferred to the host computer.
            Stacks are the CC-USB's way to work around the high latencies of
            USB-2.  
         </para>
         <para>
            The CC-USB supports two stacks, and event stack and a periodic stack.
            The event stack is executed in response to an external trigger.
            The external trigger can be a CAMAC LAM (look at me) or, more commonly,
            a NIM logic true pulse on IN 1.   The periodic stack can be execute
            either time or event periodically (by event periodic I mean that after
            some number of event triggers have been accepted, the periodic stack
            is executed).  The periodic stack is intended to be used to read
            scalers. Some setups may use scalers as counters to monitor
	    detector rates, or to determine acquisition efficiency (live-time).
         </para> 
         <para>
            Stacks are rather hard to construct by hand. The  CC-USB system
            automates stack construction through configuration files.
	    Configuration files allow you to define your setup in terms of the
	    modules you want to use, and the order in which they should be read
	    in response to the stack's trigger.  Configuration files not only
	    remove the error prone nature of stack construction but allow you
	    to think of your data acquisition problem in terms of the
	    devices you use and how you will use them.  
         </para>
	 <para>
	    The section
	    <link linkend="scriptorg">Script organization</link>,
	    later in this chapter describes how configuration files, or scripts,
	    are used by the acquisition and analysis software.
	    <link linkend="configfiles">Chapter 3 - Configuration Files</link>
	    describes configuration files in detail.
	 </para>
      </section>
      <section>
         <title>Supported Devices</title>
	 <para>
	    One consequence of using high level configuration scripts to describe
	    you experiment is that the scripts can only support a pre-determined
	    set of CAMAC modules.  Each module requires driver software that
	    undersands the readout requirements of its module and unpacking
	    software tha understands the format of the data that is provided
	    by that module.
	 </para>
         <para>
            The following devices are supported:
           <orderedlist>
	       <listitem>
		  <para>
		     Ortec AD811 peak sensing ADC.
		  </para>
	       </listitem>
               <listitem>
                  <para>
                     Phillips 7164/7164H.  This is a 16 channel peak
                     sensing adc.
                  </para>
               </listitem>
               <listitem>
                  <para>
                     Phillips 7166/7166H. This is a 16 Channel charge integrating
                     ADC (QDC).
                  </para>
               </listitem>
               <listitem>
                  <para>
                     Phillips 7167/7167H. This is a 16 channel individually gated
                     charge integrating ADC (QDC).
                  </para>
               </listitem>
               <listitem>
                  <para>
                     Phillips 7186/7186/H.  This is a 16 channel time digitizer
                     (TDC).
                  </para>
               </listitem>
	       <listitem>
		  <para>
		     LeCroy Research Systems (LRS) 2228.  This module is a
		     time interval digitizer.  It can be used in either common
		     start or common stop mode.
		  </para>
	       </listitem>
	       <listitem>
		  <para>
		     LeCroy Research Systems (LRS) 2249W ADC.  This module
		     is a charge integrating ADC.
		  </para>
	       </listitem>
	       <listitem>
		  <para>
		     LeCroy Research Systems (LRS) 2551 scaler module.  This
		     module is normally placed in a scaler stack.
		  </para>
	       </listitem>
	       <listitem>
		  <para>CAEN C1205 QDC</para>
	       </listitem>
	       <listitem>
		  <para>
		     CAEN 257 scaler module.  This module is normally placed in a
		     scaler stack.
		  </para>
	       </listitem>
            </orderedlist>
         </para>
         <para>
            The architecture of the system is such that additional module types
            can be supported at a later time if desired.
         </para>
      </section>
      <section id="scriptorg">
         <title>Script organization</title>
         <para>
	    A configuration file is used to drive both the generation of
	    CC-USB stacks and the unpacking of event data.  Configuration files
	    are written in an extension of the Tcl<footnote>
	    <para>
	       For a Tcl tutorial that goes well beyond what you will
	       need, see
	       <ulink url="http://www.tcl.tk/man/tcl8.5/tutorial/tcltutorial.html">
		  http://www.tcl.tk/man/tcl8.5/tutorial/tcltutorial.html</ulink>
	    </para>
	    </footnote>
	    (Tool Command Language)
	    scripting language.  As such you have a fully featured programming
	    language at your disposal whan you are building your configuration.
	 </para>
	 <para>
	    Configuration files all are located in the
	    <filename>config</filename> directory of your
	    account (<filename>~/config</filename> to be precise). The file you
	    will usually have to edit is
	    <filename>~/config/daqconfig.tcl</filename> or <filename>daqconfig</filename>
	    for short.
	 </para>
	 <para>
	    Each time you start data taking, the readout software will
	    interpret 
	    <filename>daqconfig.tcl</filename>,
	    initialize the CAMAC modules you are using,
	    create and download the stacks you describe.  You can therefore
	    update a configuration file and the update will be effective
	    the next time you start a run.
	 </para>
	 <para>
	    SpecTcl histogrammer will interpret the <filename>daqconfig.tcl</filename>
	    script, create parameter definitions and spectra for each of the
	    digitizer channels you define in your configuration.
	    SpecTcl will also configure its event decoder to unpack your raw
	    events into the parameters you have described in
	    <filename>daqconfig.tcl</filename>.  Since SpecTcl will only
	    interpret <filename>daqconfig.tcl</filename> when you start it,
	    you will need to restart SpecTcl when:
	    <itemizedlist>
	       <listitem>
		  <para>
		     You define new parameters in existing digitizers
		     and want to see the spectra from these parameters.
		  </para>
	       </listitem>
	       <listitem>
		  <para>
		     You alter the set of modules or the order of modules
		     present in the event stack.
		  </para>
	       </listitem>
	    </itemizedlist>
	 </para>
      </section>
   </chapter>
   <chapter>
      <title>Getting Started</title>
      <para>
	 This chapter provides a quickstart for people who just want to get
	 off the ground and take some data.  When you have finished reading this
	 chapter you should know:
      </para>
      <itemizedlist>
	 <listitem>
	    <para>
	       The components of the NSCL Data Acquisition system (NSCLDAQ)
	       you will be using.
	    </para>
	 </listitem>
	 <listitem>
	    <para>
	       How to configure your computer account for data taking.
	    </para>
	 </listitem>
	 <listitem>
	    <para>
	       How to edit <filename>daqconfig.tcl</filename> to
	       prepare to take data.
	    </para>
	 </listitem>
	 <listitem>
	    <para>
	       How to modify the sample scaler configuration file.
	    </para>
	 </listitem>
	 <listitem>
	    <para>
	       How to set up a trigger for the CC-USB event list.
	    </para>
	 </listitem>
	 <listitem>
	    <para>
	       How to start up each component of the data acquisition system.
	    </para>
	    </listitem>
      </itemizedlist>
      <section>
	 <title>Introducing NSCLDAQ</title>
	 <para>
	    The NSCL Data Acquisition system (NSCLDAQ) is a distributed
	    data acquisition system.  A single system provides data from
	    a data source to an arbitrary set of client systems.
	    We will use this system.  For the purposes of this discussion,
	    all client software will run in the data source system.
	    Multi-computer data taking systems are beyond the scope of this
	    document.
	 </para>
	 <para>
	    The NSCLDAQ is a flexible system that consists of many components.
	    When you use the CC-USB for data taking, every effort has been
	    made to provide near turnkey operation.  If you are interested in
	    reading
	    more about NSCLDAQ, documentation is online at
	    <ulink url='http://docs.nscl.msu.edu/daq'>http://docs.nscl.msu.edu/daq</ulink>.
	 </para>
	 <para>
	    When you use the CC-USB readout system you will only need
	    to know about the Readout, SpecTcl and scaler display components
	    of the system. If you record data to disk, the event logging component
	    will run behind the scenes automatically.
	 </para>
      </section>
      <section>
	 <title>Configuring your account for data taking</title>
	 <para>
	    In order to minimize what you need to know to get started, a
	    script has been provided that configures your account for data-taking.
	    This script:
	    <itemizedlist>
	       <listitem>
		  <para>
		     Creates the directory structure expected by the CC-USB
		     data acquisition system.
		  </para>
	       </listitem>
	       <listitem>
		  <para>
		     Copies some startup scripts into your
		     account's <filename>bin</filename> subdirectory,
		  </para>
	       </listitem>
	       <listitem>
		  <para>
		     Creates the <filename>config</filename> directory
		     and copies sample configuration files into it, as well
		     as support scripts for SpecTcl's configuration file
		     decode.
		  </para>
	       </listitem>
	       <listitem>
		  <para>
		     Creates the <filename>spectcl</filename> directory and
		     sets it up as the default directory in which
		     SpecTcl will be run by copying initialization
		     scripts that ensure SpecTcl will process
		     <filename>daqconfig.tcl</filename> when it is started.
		  </para>
	       </listitem>
	       <listitem>
		  <para>
		     Sets up ssh host/identity keys so that you can ssh localhost
		     without providing additional login credentials.  This is
		     used by the GUI that runs the readout program (remember
		     NSCLDAQ is a distributed system and the GUI does not assume
		     the Readout program will run on the same system it
		     runs on).
		  </para>
	       </listitem>
	    </itemizedlist>
	 </para>
	 <para>
	    To set up your account for data taking, the first time you use it,
	    login, bring up a terminal window and type:
	    <informalexample>
	       <programlisting>
/usr/opt/ccusbsetup/daqsetup
	       </programlisting>
	    </informalexample>
	    When you are promted to do so accept the host key for
	    <literal>localhost</literal>, then logout of the 'remote' session
	    the script set up to exchange those keys.
	 </para>
      </section>
      <section>
	 <title>Editing daqconfig.tcl</title>
	 <para>
	    The core configuration file is <filename>daqconfig.tcl</filename>
	    A sample <filename>daqconfig.tcl</filename> file was copied to your
	    <filename>config</filename> directory when you set up the account.
	 </para>
	 <para>
	    The sample configuration file uses one of each type of module and
	    sets up an event as well as a scaler stack.  You can follow its
	    example to create your own configuration file.  If you get stuck,
	    have a look at the reference material in the chapter
	    <link linkend='configfiles'>'Configuration Files'</link>.
	    In general:
	 </para>
	 <itemizedlist>
	    <listitem>
	       <para>
		  Ensure the modules <literal>-slot</literal> number
		  matches the CAMAC crate slot in which you've inserted
		  the module.
	       </para>
	    </listitem>
	    <listitem>
	       <para>
		  Ensure the <literal>-id</literal> value is unique across
		  all modules that are in the events stack.
	       </para>
	    </listitem>
	    <listitem>
	       <para>
		  Make sure that all modules you want read out in response to the
		  event trigger are in
		  the <literal>[list ...]</literal> that follows the
		  <literal>-modules</literal> switch on the
		  <literal>stack config events</literal> line of the file.
		  Make sure that only those modules are listed that you want
		  to read out as well.  If you define a module, but don't
		  list it in either stack it will be ignored.  List modules
		  in the order in which you want them read.
	       </para>
	    </listitem>
	    <listitem>
	       <para>
		  Be sure that if you use any scaler modules you have listed them
		  in the <literal>[list ]</literal> part of the
		  <literal>stack config scaler</literal> command.  List them
		  in the order you want them read.
	       </para>
	    </listitem>
	    <listitem>
	       <para>
		  If you are not using scaler modules, remove the two lines
		  that describe the scaler stack
		  <literal>stack create scaler</literal> and
		  <literal>stack config scaler...</literal>.
	       </para>
	       <para>
		  If you do use the scaler stack you can adjust the readout
		  period  by setting it in seconds after the <literal>-period</literal>
		  switch.
	       </para>
	    </listitem>
	    <listitem>
	       <para>
		  If you add modules, you will want to add to the
		  <literal>for</literal> loops below the module and stack
		  definitions.  These sections define meta-data that is used
		  by SpecTcl to set up parameters and spectra. 
	       </para>
	    </listitem>

	 </itemizedlist>
      </section>
      <section>
	 <title>Editing the scaler configuration file</title>
	 <para>
	    The scaler configuration file is only needed if you
	    are going to read and display scaler data.  If you are not
	    going to do this, skip this section.
	 </para>
	 <para>
	    When you set up the account for data taking the setup script
	    created the file <filename>config/scalers.def</filename>.
	    This file is a sample scaler definition file.  Look carefully
	    at the comments at the top of the file.  The comments describe how
	    to edit this file to meet your needs.
	 </para>
      </section>
      <section>
	 <title>Setting up the CC-USB trigger</title>
	 <para>
	    Part, but not all of the electronics setup includes providing a
	    trigger to the CC-USB.  The trigger defines when the
	    list of modules described in your <command>stack</command> for event readout
	    will be read.
	 </para>
	 <para>
	    To trigger CC-USB readout, send a NIM true pulse into the CC-USB's
	    <literal>I1</literal> input.  In addition, you will typically need
	    to provide gates to the CAMAC modules to tell them to start converting.
	    Use the <literal>-delay</literal> switch on the event <command>stack</command>
	    command to allow all of your CAMAC modules to finish converting before
	    starting to execute the event stack.  The value for this is the number of
	    microseconds the CC-USB will delay between the <literal>I1</literal> pulse 
	    executing the event readout list. If you do not set the
	    <literal>-delay</literal> value large enough, you may start reading
	    the CAMAC modules before they hafve finished comverting.l
	 </para>
      </section>
      <section>
	 <title>Starting up NSCLDAQ components</title>
	 <para>
	    The account setup script installs several scripts in the account's
	    <filename>~/bin</filename> directory that know how to start up
	    the components of NSCLDAQ you needs.  Specifically.
	 </para>
	 <variablelist>
	    <varlistentry>
	    <term><filename>startReadout</filename></term>
	       <listitem>
		  <para>
		     Starts the readout GUI and the CC-USB readout program.
		     The GUI has buttons that allow you to start/stop runs,
		     record data or not.  The Readout program will read the file
		     <filename>~/config/daqconfig.tcl</filename> at the beginning
		     of each run to determine how to setup the CC-USB for data
		     taking.
		  </para>
	       </listitem>
	    </varlistentry>
	    <varlistentry>
	       <term><filename>startSpecTcl</filename></term>
	       <listitem>
		  <para>
		     Starts the NSCL SpecTcl histogtramming program. Please note
		     that you must still attach SpecTcl to the online NSCLDAQ
		     system via the <literal>Data Source</literal> menu.
		  </para>
		  <para>
		     SpecTcl will process the <filename>~/config/daqconfig.tcl</filename>
		     file only once, as it start up.  If you make changes to that
		     file that might change the event structure, you must restart
		     SpecTcl.
		  </para>
	       </listitem>
	    </varlistentry>
	    <varlistentry>
	       <term><filename>startScaler</filename></term>
	       <listitem>
		  <para>
		     Starts the NSCL Scaler display program.  This command
		     processes the <filename>~/config/scalers.def</filename> file.
		     This file provides names for each scaler channel, defines
		     display pages and allows you to define which scalers, and
		     scaler ratios appear on which pages.
		  </para>
		  <para>
		     The script connects the scaler program to the NSCLDAQ
		     online system automatically.
		  </para>
	       </listitem>
	    </varlistentry>
	 </variablelist>
      </section>
   </chapter>
   
   <!-- Desscribe the configuration files.. probably the longest chunk -->
   
   <chapter id="configfiles">
      <title>Configuration Files.</title>
      <para>
         This chapter describes the configuration files that drive
         Readout and SpecTcl.  The end of this chapter
         contains reference material that describes the extensions to Tcl that
         have been incorporated into the Readout configuration script engine
         to support building CC-USB stacks directly from the
         configuration file <filename>~/config/daqconfig.tcl</filename>.
      </para>
      <section>
         <title><filename>daqconfig.tcl</filename> The readout config file</title>
         <para>
            The <filename>~/config/daqconfig.tcl</filename> file is the
            basis for configuring the Reaout (directly), and SpecTcl (indirectly).
            This file is a script for a Tcl
            interpreter that has been extended with additional commands that
            support describing the hardware to be readout and how to aggregate
            that hardware into stacks.
         </para>
         <para>
            Extensions to Tcl for configuration are a group of commands.
            The command keyword for each command indicates the type of
            device or item it manipulates.  For example the
            <command>ph7xxx</command> command creates, configures or gets
            the configuration of the various supported Phillips digitizer
            modules.
         </para>
         <para>
            The extensions to Tcl are what Tcl calls
            <firstterm>command ensembles</firstterm>.
            A command ensemble is a command with subcommands.  Each
            extension has three subcommands:
            <variablelist>
               <varlistentry>
                  <term><command>create</command></term>
                  <listitem>
                     <para>Creates an item of the type associated with a command
                     </para>
                  </listitem>
               </varlistentry>
               <varlistentry>
                  <term><command>config</command></term>
                  <listitem>
                     <para>Configures an item of the type associated with a command
                     </para>
                  </listitem>
               </varlistentry>
               <varlistentry>
                  <term><command>cget</command></term>
                  <listitem>
                     <para>Returns configuration information about an item
                        of the type associated with a command.
                     </para>
                  </listitem>
               </varlistentry>
            </variablelist>
         </para>
         <para>
            The following are the commands that have been added to the
            Tcl interpreter.  See the command reference at the end of this chapter
            for documentation of each command.
         </para>
         <variablelist>
	    <varlistentry>
	       <term><command>ad811</command></term>
	       <listitem>
		  <para>
		     Manages the Ortec AD811 8 channel peak sensing ADC.  This
		     command could probably also work with an ORTEC TD811 8
		     channel TDC as the two modules are software compatible.
		  </para>
	       </listitem>
	    </varlistentry>
	    <varlistentry>
	       <term><command>lrs2228</command></term>
	       <listitem>
		  <para>
		     Manages the LeCroy Research System LRS 2228 TDC.
		  </para>
	       </listitem>
	    </varlistentry>
	    <varlistentry>
	       <term><command>lrs2249</command></term>
	       <listitem>
		  <para>
		     Manages the LeCroy Research Systems LRS 2249 QDC.  This
		     module comes in subtypes as well indicated by a letter
		     after the 2249 model number.  This command works for all
		     types of LRS 2249.  Testing was done with the LRS 2249W
		  </para>
	       </listitem>
	    </varlistentry>
	    <varlistentry>
	       <term><command>lrs2551</command></term>
	       <listitem>
		  <para>
		     Manages the LeCroy Research Systesm LRS 2251 scaler module.
		     This module is normally read in the scaler stack, however
		     in special application (not supported by the automatic
		     SpecTcl unpacking software), this module could be read out
		     by the event stack.
		  </para>
	       </listitem>
	    </varlistentry>
            <varlistentry>
               <term><command>ph7xxx</command></term>
               <listitem>
                  <para>
                     Manages Phillips 16 channel digitizers.  These include
                     the 7164 (ADC), 7166, 7167 (QDCs), and 7186 (TDC) modules.
                  </para>
               </listitem>
            </varlistentry>
	    <varlistentry>
	       <term><command>c1205</command></term>
	       <listitem>
		  <para>
		     Manages CAEN 1205 16 channnel QDC modules.
		  </para>
	       </listitem>
	    </varlistentry>
	    <varlistentry>
	       <term><command>c256</command></term>
	       <listitem>
		  <para>
		     Manages CAEN 257 scaler modules.
		  </para>
	       </listitem>
	    </varlistentry>
            <varlistentry>
               <term><command>stack</command></term>
               <listitem>
                  <para>Used to construct readout and scaler stacks.
                  </para>
               </listitem>
            </varlistentry>
         </variablelist>
      </section>
      <section>
         <title>Configuring SpecTcl</title>
         <para>
            Using the helper file
            <filename>~/config/spectclconfig.tcl</filename>,
            SpecTcl's startup scripts are able to process enough of the
            <filename>~/config/daqconfig.tcl</filename> to be able to
            create a correspondence between module channel numbers and
            parameter names. The <filename>~/config/spectclconfig.tcl</filename>
            script provides Tcl <command>proc</command>s extract the order
            in which the modules have been added to the event readout stack.
	    This file is installed when the account was set up as a data acquisition
	    account.
         </para>
         <para>
	    When <filename>~/config/spectclconfig.tcl</filename> processes
	    <filename>~/config/daqconfig.tcl</filename> it expects that file
	    top have set the global variable <varname>parameters</varname>.
              This variable is an array that is indexed by module name.
	    Each element contains a list of names
            of the channels for each digitizer you are using.  Each of these lists can
            terminate early if the last channels in an module are not used.  Intermediate
            unused channels should be named <literal>""</literal>; an empty string.
            <footnote id="tclarrays">
               <para>
                  Unlike C, C++ or Fortran, Tcl arrays are indexed by strings.
                  thus you can say things like:
                  <programlisting>
set parameters(adc1) "a b c d e f g h i j k l m n o p"
                  </programlisting>
                  which creates an array element indexed by the string
                  <literal>"adc1"</literal>.
               </para>
            </footnote>
         </para>
         <example>
            <title>Sample configuration and <varname>parameters definnitions</varname></title>
            <programlisting>
ph7xxx create adc1 -slot 6 -id 1
ph7xxx create adc2 -slot 7 -id 2


stack create events 
stack config events -type event -modules [list adc1 adc2] -delay 10 -lamtimeout 8


set parameters(adc1) [list ph1.00 ph1.01 ph1.02 ph1.03  \
                           ph1.04 ph1.05 ph1.06 ph1.07  \
                           ph1.08 ph1.09 ph1.10 ph1.11  \
                           ph1.12 ph1.13 ph1.14 ph1.15]

set parameters(adc2) [list ph2.00 ph2.01 ph2.02 ph2.03  \
                           ph2.04 ph2.05 ph2.06 ph2.07  \
                           ph2.08 ph2.09 ph2.10 ph2.11  \
                           ph2.12 ph2.13 ph2.14 ph2.15]


            </programlisting>
         </example>
         <para>
            In the example above, two modules named <literal>adc1</literal>
                                                 and
                                                   <literal>adc2</literal>
            are created.
            At the bottom of the file we can see that for each adc
            named adc<emphasis>n</emphasis>, we have defined the names of
            all 16 channels to be:
            ph<emphasis>n</emphasis>.00 through
            ph<emphasis>n</emphasis>.16
            The tcl <command>list</command> command creates a list of items.
            the <command>[...]</command> in Tcl substitutes the results of
            the command enclosed in the square brackets in place on the
            current command.
         </para>
         <para>
            The SpecTcl initialization file <filename>spectclconfig.tcl</filename>
            processes this configuration to produce SpecTcl parameters and
            1-d spectra for each of these parameters.
         </para>
      </section>
 

      <section id='scriptref'>
         <title>Script Reference</title>
         <para>
            This section contains reference information about the commands
            that have been added to Tcl to support configuring 
            the readout.  In addition a reference to the set of meaningful
            <filename>daqconfig.tcl</filename>
	    script variables is supplied.
         </para>
         <para>
            Please note that in some cases you must either specify specific
            options for SpecTcl to be able to decode the data or allow those
            options to default.  When this is the case, the correct settings
            are indicated.
         </para>
	 <refentry id="ad811">
	   <refmeta>
	      <refentrytitle>ad811</refentrytitle>
	      <manvolnum>1ccusbReadout</manvolnum>
	   </refmeta>
	   <refnamediv>
	      <refname>ad811</refname>
	      <refpurpose>Support the Ortec AD811 ADC</refpurpose>
	   </refnamediv>
	   
	   <refsynopsisdiv>
	     <cmdsynopsis>
	     <command>
ad811 create <replaceable>module-name   ?option...?</replaceable>
	     </command>
	     </cmdsynopsis>
	     <cmdsynopsis>
	     <command>
ad811 config <replaceable>module-name ?option...?</replaceable>
	     </command>
	     </cmdsynopsis>
	     <cmdsynopsis>
	     <command>
ad811 cget <replaceable>module-name</replaceable>
	     </command>
	     </cmdsynopsis>
	   </refsynopsisdiv>
	   <refsect1>
	      <title>DESCRIPTION</title>
	      <para>
	       This command ensemble provides support for the ORTEC AD811
	       8 channel peak sensing ADC.  This module requires about 80
	       microseconds to convert.  All channels convert unconditionally.
	      </para>
	      <para>
		  <parameter>module-name</parameter> is either the name to be
		  given to an ADC in the <command>create</command> subcommand
		  or the name given to a previously created module in the
		  <command>config</command> or <command>cget</command> commands.
	      </para>
	      <para>
	       Both <command>create</command> and <command>config</command> take
	       configuration options.   Each option is a keyword value pair where
	       the keyword defines what the option is and the value is a value
	       associated with that option.  See OPTIONS below for more information
	       about the options supported by <command>ad811</command>.
	      </para>
	      <para>
	       The <command>cget</command> option returns the configuration options
	       for the named module as a Tcl list.  Each element of the list is
	       a two element sublist.  The first element of each sublist is
	       the configuration parameter name, and the second the value associated
	       with that name.
	      </para>
	   </refsect1>
	   <refsect1>
	    <title>
	       OPTIONS
	    </title>
	    <para>
	       The <command>ad811</command> configuration options are:
	    </para>
	    <variablelist>
	       <varlistentry>
		  <term><option>-id</option> <replaceable>vsn</replaceable></term>
		  <listitem>
		     <para>
			   Each module has an identifier which, for historical
			   reasons is called a <firstterm>virtual slot number</firstterm>,
			   or <firstterm>vsn</firstterm>.  To maximize the decode
			   error detection the virtual slot numbers for each
			   module should be unique.  This option allows you
			   to set the virtual slot number for the module.
		     </para>
		     </listitem>
	       </varlistentry>
	       <varlistentry>
		  <term><option>-slot</option> <replaceable>slotnum</replaceable></term>
		  <listitem>
		     <para>
			The value of this parameter tells the readout software
			which CAMAC crate slot houses the module.  Recall that
			CAMAC is slot addressable.  Slots number from 1 on the
			left, with an increasing slot number towards the right.
			The right two slots are reserved for the CAMAC Crate
			controller (in our case a CC-USB).
		     </para>
		  </listitem>
	       </varlistentry>
	    </variablelist>
	   </refsect1>
	   <refsect1>
	      <title>EXAMPLE</title>
	      <para>
	       The example below creates and configures an AD811 that is in
	       slot 2 of the CAMAC crate and, when read will have a virtual
	       slot number of 2:
	      </para>
	      <example>
		  <title>AD811 configuration file example</title>
		  <programlisting>
ad811  create adc -slot 2 -id 2
		  </programlisting>
	      </example>
	   </refsect1>
	 
	 </refentry>
<refentry id="c1205">
  <refmeta>
     <refentrytitle>c1205</refentrytitle>
     <manvolnum>1ccusbReadout</manvolnum>
  </refmeta>
  <refnamediv>
     <refname>c1205</refname>
     <refpurpose>Manage CAEN C1205 QDC modules.</refpurpose>
  </refnamediv>
  
  <refsynopsisdiv>
    <cmdsynopsis>
    <command>
c1205 create <replaceable>module-name ?option...?</replaceable>
    </command>
    </cmdsynopsis>
<cmdsynopsis>
<command>
c1205 config <replaceable>module-name ?option...?</replaceable>
</command>
</cmdsynopsis>
<cmdsynopsis>
<command>
c1205 config <replaceable>module-name</replaceable>
</command>
</cmdsynopsis>
  </refsynopsisdiv>
  <refsect1>
     <title>DESCRIPTION</title>
	      <para>
		  This command ensemble allows you to create and configure
		  CAEN model C1205 QDC modules.  The C1205 is a sixteen
		  channel charge integrating ADC.
	      </para>
	      <para>
		  The <command>create</command> command
		  allows you to create a new module and assign a
		  <parameter>module-name</parameter> to it so that it can
		  be referred to in subsequent configuration commands.
		  You may optionally include configuration switch value pairs
		  on the <command>create</command> command line.
	      </para>
	      <para>
		  The <command>config</command> subcommand allows you to
		  set the configuration parameters for an existing module.
		  <parameter>module-name</parameter> is the name assigned to
		  that module whe it was created.
	      </para>
	      <para>
		  The <command>cget</command> command returns as its value
		  the module configuration as a Tcl list where each list element
		  is a sublist containing the name and value of a configuration
		  parameter.
	      </para>
	      <para>
		  Configuration options are name/value pairs.   The name
		  of a configuration option is sometimes called a
		  <firstterm>switch</firstterm> because it resembles the
		  command line switches of command shell commands.
		  For a full description of these options see OPTIONS below.
	      </para>
  </refsect1>
  <refsect1>
      <title>OPTIONS</title>
      <para>
	 The CAEN C1205 supports the following configuration option switches.
	 The switches and values can be supplied to both the
	 <command>create</command> and the <command>config</command>
	 subcommands.
      </para>
      <variablelist>
	 <varlistentry>
	 <term><option>-slot</option> <replaceable>n</replaceable></term>
	 <listitem>
	    <para>
	       Specifies the slot in which the module is installed
	       to <literal>n</literal>.
	       If this is not set correctly, the Readout program will
	       not be able to communicate with the module and will emit
	       a warning, if the slot <literal>n</literal> is empty.
	       This parameter must be provided.
	    </para>
	 </listitem>
	 </varlistentry>
	 <varlistentry>
	    <term><option>-id</option> <replaceable>n</replaceable></term>
	    <listitem>
	       <para>
		  Sets the id of the module to <literal>n</literal>.
		  The module id is placed as a marker word prior
		  to the data from the module.  It is used by the
		  unpacking software to unambiguously identify The
		  data from each module.  For the C1205, the id
		  value is also programmed into the lower 8 bits of the
		  control status register and will therefore also
		  appear in the bottom 8 bits of the header word
		  read from the module.
	       </para>
	       <para>
		  While the <option>-id</option> value defaults to
		  0, and need not be unique, your data is most
		  reliably decoded if each module in your system has
		  a unique id value.
	       </para>
	    </listitem>
	 </varlistentry>
	 <varlistentry>
	    <term><option>-usepedestals</option> <replaceable>true|false</replaceable></term>
	    <listitem>
	       <para>
		  The value of this configuration parameter determines how
		  bit 12 of the control status register is initialized.
		  If <literal>true</literal> (default value), the bit is
		  set to one which enables pedestal subtraction from the input
		  signal.
	       </para>
	    </listitem>
	 </varlistentry>
	 <varlistentry>
	    <term><option>-hires</option> <replaceable>true|false</replaceable></term>
	    <listitem>
	       <para>
		  The value of this configuration parameter determins how
		  bit 16 of the module control status register is
		  initialized.  If <literal>true</literal> (default value)
		  the bit is set to zero enabling high resolution mode.
		  If set <literal>false</literal> low resolution mode
		  is selected.
		  High resolution
		  mode provides 12 bits of data resolution while low
		  resolution mode provides only 10 bits of data resolution.
		  High resolution comes at a cost of an additional 1.5
		  microseconds of conversion time (5.5 microseconds compared
		  with 4 microseconds for low resolution).
	       </para>
	    </listitem>
	 </varlistentry>
	 <varlistentry>
	    <term><option>-thresholds</option> <replaceable>threshold-list</replaceable></term>
	    <listitem>
	       <para>
		  Provides the channel threshold registers.  This is a Tcl
		  list of 16 integers in the range <literal>0-4095</literal>.
		  Data is read from a module only if the data value for the
		  module's low range is greater than the corresponding element
		  of the list.  The thresholds default to a list of 16 zeroes.
	       </para>
	    </listitem>
	 </varlistentry>
	 <varlistentry>
	    <term><option>-lopedestals</option> <replaceable>pedestal-list</replaceable></term>
	    <listitem>
	       <para>
		  Provides a list of 16 integers (0-4095) which are subtracted
		  from the data values to  produce the low range value.
	       </para>
	    </listitem>
	 </varlistentry>
	 <varlistentry>
	    <term><option>-midpedestals</option> <replaceable>pedestal-list</replaceable></term>
	    <listitem>
	       <para>
		  Same  as <option>-lopedestals</option> but the pedestals
		  are applied to the mid level conversion.
	       </para>
	    </listitem>
	 </varlistentry>
	 <varlistentry>
	    <term><option>-hipedestal</option> <replaceable>pedestal-list</replaceable></term>
	    <listitem>
	       <para>
		  Same as <option>-lopedestals</option> but the pedestals
		  are applied to the low level conversion.
	       </para>
	    </listitem>
	 </varlistentry>
	 <varlistentry>
	    <term><option>-rangemode</option> <replaceable>mode</replaceable></term>
	    <listitem>
	       <para>
		  Sets the module range mode.  The value for
		  <replaceable>mode</replaceable> must be one of the following:
		  <variablelist>
		     <varlistentry>
			<term><literal>all</literal></term>
			<listitem>
			   <para>
			      Conversions from all ranges appear in each event.
			      In this mode, some of the conversions will likely
			      have negative values.
			   </para>
			</listitem>
		     </varlistentry>
		     <varlistentry>
			<term><literal>auto</literal></term>
			<listitem>
			   <para>In this mode (default) only the  range
			      the conversion falls in will appear in the
			      data fromt he mdule.
			   </para>
			</listitem>
		     </varlistentry>
		     <varlistentry>
			<term><literal>sparse</literal></term>
			<listitem>
			   <para>Same as auto, but only data from channels
			      are above the channel thresholds set
			      via the <option>-thresholds</option> option
			      appear in the data from the module.
			   </para>
			</listitem>
		     </varlistentry>
			      
		  </variablelist>
	       </para>
	    </listitem>
	 </varlistentry>
	 
      </variablelist>
  </refsect1>

</refentry>
<refentry id="c257">
  <refmeta>
     <refentrytitle>Manage CAEN C257 scaler module.</refentrytitle>
     <manvolnum>1ccusbReadout</manvolnum>
  </refmeta>
  <refnamediv>
     <refname>c257</refname>
     <refpurpose>Manages the C257 scaler module</refpurpose>
  </refnamediv>
  
  <refsynopsisdiv>
    <cmdsynopsis>
    <command>
c257 create <replaceable>name ?options...?</replaceable>
    </command>
    </cmdsynopsis>
    <cmdsynopsis>
    <command>
c257 config <replaceable>name ?options...?</replaceable>   
    </command>
    </cmdsynopsis>
   <cmdsynopsis>
   <command>
c257 cget <replaceable>name</replaceable>   
   </command>
   </cmdsynopsis>
  </refsynopsisdiv>
  <refsect1>
     <title>DESCRIPTION</title>
	 <para>
	     This command ensemble allows you to create and configure
	     CAEN model C257 scaler modules.  The C257 is a 16 channel
	     scaler module.  Support is intended to be used with the
	     scaler stack.  The C257 is capable of cascading channels
	     to produce very wide counters, however this mode is not supported
	     by this release of the software limiting the width of each
	     scaler to 24 bits.  Thus, to use the module with this
	     software requires that all of the module jumpers be set to the
	     <literal>SINGLE</literal> position rather than to
	     <literal>CASCADE</literal>.
	 </para>
	 <para>
	     The <command>create</command> command
	     allows you to create a new module and assign a
	     <parameter>module-name</parameter> to it so that it can
	     be referred to in subsequent configuration commands.
	     You may optionally include configuration switch value pairs
	     on the <command>create</command> command line.
	 </para>
	 <para>
	     The <command>config</command> subcommand allows you to
	     set the configuration parameters for an existing module.
	     <parameter>module-name</parameter> is the name assigned to
	     that module whe it was created.
	 </para>
	 <para>
	     The <command>cget</command> command returns as its value
	     the module configuration as a Tcl list where each list element
	     is a sublist containing the name and value of a configuration
	     parameter.
	 </para>
	 <para>
	     Configuration options are name/value pairs.   The name
	     of a configuration option is sometimes called a
	     <firstterm>switch</firstterm> because it resembles the
	     command line switches of command shell commands.
	     For a full description of these options see OPTIONS below.
	 </para>
  </refsect1>
  <refsect1>
   <title>
      OPTIONS
   </title>
   <para>
      The module is configured via the following set of options.
   </para>
   <variablelist>
      <varlistentry>
	 <term><option>-slot</option> <replaceable>slotnumber</replaceable></term>
	 <listitem>
	    <para>
	       Specifies <parameter>slotnumber</parameter> as the CAMAC
	       crate slot in which the module  is inserted.  This must
	       be correct or else the software will not be able to
	       communicate with the module.
	    </para>
	 </listitem>
      </varlistentry>
      <varlistentry>
	  <term><option>-id</option> <replaceable>module-id</replaceable></term>
	  <listitem>
	      <para>
	       Specifies a module id for the unit.  If the
	       <option>-insertid</option> configuration parameter is
	       <literal>true</literal> this id is inserted prior to the
	       scaler data readout by the stack.  This option, and
	       <option>-insertid</option> should not be used in the scaler
	       stack and is intended as latent support for using the
	       scaler in an event stack (e.g. for supplying an event
	       timestamp).
	      </para>
	  </listitem>
      </varlistentry>
      <varlistentry>
	  <term><option>-insertid</option> <replaceable>true|false</replaceable></term>
	  <listitem>
	      <para>
	       If this parameter is <literal>true</literal> the value specified
	       by the <option>-id</option> option will be inserted in the data
	       buffer prior to the
	       data from this module.
	       This should be <literal>false</literal> (the default) if
	       the module is used in the scaler stack.
	      </para>
	      <para>
		  <option>-id</option> and <option>-insertid</option>
		  are intended as latent support for using the scaler module
		  in the event stack (e.g. to supply an event timestamp).
	      </para>
	  </listitem>
      </varlistentry>
      <varlistentry>
	  <term><option>-readinhibit</option> <replaceable>true | false</replaceable></term>
	  <listitem>
	      <para>
	       If this parameter is <literal>true</literal> (the default), the
	       CAMAC crate is held inhibited while the scaler module is
	       being read, and the module is read with an F2 Q-scan.
	       If <literal>false</literal> the module is read via 16
	       F0's directed at specific subaddresses followed by an
	       F9 to reset the counters.
	      </para>
	  </listitem>
      </varlistentry>
   </variablelist>
  </refsect1>

</refentry>
	 <refentry id="lrs2228">
	   <refmeta>
	      <refentrytitle>Manage LRS2228 LeCroy TDC</refentrytitle>
	      <manvolnum>1ccusbReadout</manvolnum>
	   </refmeta>
	   <refnamediv>
	      <refname>lrs2228</refname>
	      <refpurpose>Manages the LRS2228 TDC</refpurpose>
	   </refnamediv>
	   
	   <refsynopsisdiv>
	     <cmdsynopsis>
	     <command>
lrs2228 create <replaceable>module-name ?option...?</replaceable>
	     </command>
	     </cmdsynopsis>
	     <cmdsynopsis>
	     <command>
lrs2228 config <replaceable>module-name ?option...?</replaceable>
	     </command>
	     </cmdsynopsis>
	     <cmdsynopsis>
	     <command>
lrs2228 cget <replaceable>module-name</replaceable>
	     </command>
	     </cmdsynopsis>
	     
	   </refsynopsisdiv>
	   <refsect1>
	      <title>DESCRIPTION</title>
	      <para>
		  This command ensemble allows you to create and configure
		  LeCroy model LRS 2228 TDC modules.  The LRS 2228 is an eight
		  channel Time digitizer.
	      </para>
	      <para>
		  The <command>create</command> command
		  allows you to create a new module and assign a
		  <parameter>module-name</parameter> to it so that it can
		  be referred to in subsequent configuration commands.
		  You may optionally include configuration switch value pairs
		  on the <command>create</command> command line.
	      </para>
	      <para>
		  The <command>config</command> subcommand allows you to
		  set the configuration parameters for an existing module.
		  <parameter>module-name</parameter> is the name assigned to
		  that module whe it was created.
	      </para>
	      <para>
		  The <command>cget</command> command returns as its value
		  the module configuration as a Tcl list where each list element
		  is a sublist containing the name and value of a configuration
		  parameter.
	      </para>
	      <para>
		  Configuration options are name/value pairs.   The name
		  of a configuration option is sometimes called a
		  <firstterm>switch</firstterm> because it resembles the
		  command line switches of command shell commands.
		  For a full description of these options see OPTIONS below.
	      </para>
	   </refsect1>
	   <refsect1>
	    <title>OPTIONS</title>
	    <para>
	       The following options are recognized by the
	       <command>lrs2228 create</command> and
	       <command>lrs2228 config</command> commands.
	    </para>
	    <variablelist>
	       <varlistentry>
		  <term><option>-id</option> <replaceable>vsn</replaceable></term>
		  <listitem>
		     <para>
			Each module should be assigned a unique virtual
		        number.  If not assigned this will be 0.  The data packet
			returned by the module will be prefixed by the ID.
			This provides error checking for the code that wil be
			unpacking the raw data.
		     </para>
		  </listitem>
	       </varlistentry>
	       <varlistentry>
		  <term><option>-slot</option> <replaceable>camac-slot</replaceable></term>
		  <listitem>
		     <para>
			Provides the number of the slot in which the CAMAC
			module has been installed (<parameter>camac_slot</parameter>).
			This must match the physical slot the module has been
			stuffed in in order to ensure the proper module is
			initialized and reads.
		     </para>
		  </listitem>
	       </varlistentry>
	    </variablelist>
	   </refsect1>
	   <refsect1>
	      <title>EXAMPLES</title>
	      <para>
		  The following is an example of the <command>create</command>
		  command for the LRS2228:
	      </para>
	      <example>
	       <title>LRS2228 creation example</title>
	       <programlisting>
lrs2228 create tdc -slot 6 -id 4		  
	       </programlisting>
	      </example>
	   </refsect1>
	 </refentry>
	 <refentry id="lrs2249">
	   <refmeta>
	      <refentrytitle>lrs2249</refentrytitle>
	      <manvolnum>1ccusbReadout</manvolnum>
	   </refmeta>
	   <refnamediv>
	      <refname>lrs2249</refname>
	      <refpurpose>Manage LeCroy 2249 QDC modules</refpurpose>
	   </refnamediv>
	   
	   <refsynopsisdiv>
	     <cmdsynopsis>
	     <command>
lrs2249 create <replaceable>module-name ?option...?</replaceable>
	     </command>
	     </cmdsynopsis>
	     <cmdsynopsis>
	     <command>
lrs2249 config <replaceable>module-name ?option...?</replaceable>
	     </command>
	     </cmdsynopsis>
	     <cmdsynopsis>
	     <command>
lrs2249 cget <replaceable>module-name</replaceable>
	     </command>
	     </cmdsynopsis>
	   </refsynopsisdiv>
	   <refsect1>
	      <title>DESCRIPTION</title>
	      <para>
	       The <command>lrs2249</command> command ensemble
	       allows you to read out
	       LeCroy model LRS 2249 modules.  The LRS 2249 is a charge integrating
	       ADC (QDC).
	      </para>
	      <para>
	       The <command>create</command> subcommand creates
	       a new module assigning it the <parameter>module-name</parameter>
	       you supply.  The <parameter>module-name</parameter> can be used
	       to refer to the module in future commands.  You may optionally
	       provide cofiguration information when creating the module.
	      </para>
	      <para>
	       The <command>config</command> subcommand configures an existing
	       module by providing configuration options for an existing
	       <parameter>module-name</parameter> (created via the
	       <command>create</command> subcommand).  Configuration options are
	       name/value pairs that are also sometimes called switches because
	       of their resemblance to shell command switches.  For a list of
	       the valid configuration options for the LRS 2249 module, see
	       the OPTIONS section below.
	      </para>
	      <para>
	       The <command>cget</command> subcommand returns the configuration
	       parameters for <parameter>module-name</parameter> as a Tcl list
	       of items.  Each item is itself a two element sublist containing
	       in order the name and value of a configuration option.
	      </para>
	   </refsect1>
	   <refsect1>
	    <title>OPTIONS</title>
	    <para>
	       The <command>lrs2249</command> command has the following configuration
	       options:
	    </para>
	    <variablelist>
	       <varlistentry>
		  <term><option>-id</option> <replaceable>vsn</replaceable></term>
		  <listitem>
		     <para>
			Sets the module virtual slot number to <parameter>vsn</parameter>.
			The virtual slot number prefixes the data packet read from this
			module and is used by SpecTcl as a check on the validity
			the event.  Each module should have a unique <parameter>vsn</parameter>.
			If the <option>-id</option> option does not set the virtual
			slot it defaults to 0.
		     </para>
		  </listitem>
	       </varlistentry>
	       <varlistentry>
		  <term><option>-slot</option> <replaceable>slot</replaceable></term>
		  <listitem>
		     <para>
			Provides the module <parameter>slot</parameter>.  This
			parameter must match the number of the slot in the
			CAMAC crate in which the module is installed.
		     </para>
		  </listitem>
	       </varlistentry>
	    </variablelist>
	       
	   </refsect1>
	   <refsect1>
	      <title>EXAMPLE</title>
	      <para>
	       The command below creates and configures an LRS 2249 QDC module:
	      </para>
	      <example>
	       <title>The lrs2249 command</title>
	       <programlisting>
lrs2249 create qdc -slot 5 -id 3
	       </programlisting>
	      </example>
	   </refsect1>
	 
	 </refentry>
	 <refentry id="lrs2551">
	   <refmeta>
	      <refentrytitle>lrs2551</refentrytitle>
	      <manvolnum>1ccusbReadout</manvolnum>
	   </refmeta>
	   <refnamediv>
	      <refname>lrs2551</refname>
	      <refpurpose>Manage LRS 2551 modules</refpurpose>
	   </refnamediv>
	   
	   <refsynopsisdiv>
	     <cmdsynopsis>
	     <command>
lrs2551 create <replaceable>module-name ?options...?</replaceable> 
	     </command>
	     </cmdsynopsis>
	     <cmdsynopsis>
	     <command>
lrs2551 config <replaceable>module-name ?options...?</replaceable> 	     
	     </command>
	     </cmdsynopsis>
	     <cmdsynopsis>
	     <command>
lrs2551 cget <replaceable>module-name</replaceable> 	     
	     </command>
	     </cmdsynopsis>
	   </refsynopsisdiv>
	   <refsect1>
	      <title>DESCRIPTION</title>
	      <para>
	       The <command>lrs2551</command> command allows you to create and
	       configure LeCroy LRS 2551 scaler modules.  The LRS 2551 is a
	       12 channel scaler.  While it is normally read in the periodic
	       scaler stack, it is also possible to read it in the event
	       stack when properly configured.
	      </para>
	      <para>
	       The <command>create</command> subcommand creates a new module
	       assigning it the name <parameter>module-name</parameter>.
	       <parameter>module-name</parameter> should be used to refer
	       to the module in future commands. Optional configuration data
	       can also be appended to the <command>create</command> subcommand.
	      </para>
	      <para>
	       The <command>config</command> subcommand configures an existing
	       <parameter>module-name</parameter>.  The configuration items are
	       name value pairs.  See OPTIONS below for more information about
	       the options supported by the <command>lrs2551</command> command.
	      </para>
	      <para>
	       The <command>cget</command> subcommand returns the current
	       module configuration.  The configuration is returned as a Tcl list.
	       Each element of the list is a two element sublist that contains
	       the configuration name and value in that order.
	      </para>
	   </refsect1>
	   <refsect1>
	    <title>OPTIONS</title>
	    <para>
	        The <command>lrs2551</command> command supports the following
		configuration options:
	    </para>
	    <variablelist>
	       <varlistentry>
		  <term><option>-cumulative</option> <replaceable>on|off</replaceable></term>
		  <listitem>
		     <para>
			If <option>-cumulative</option> is false (default),
			the scaler module is cleared after each readout providing
			the counts between each readout as the value of each
			channel. This shoulid be false when used with the NSCLDAQ
			scaler display program in the scaler stack.
		     </para>
		  </listitem>
	       </varlistentry>
	       <varlistentry>
		  <term><option>-id</option> <replaceable>vsn</replaceable></term>
		  <listitem>
		     <para>
			Supplies the virtual slot number; <replaceable>vsn</replaceable>
			for the module.  This only needs to be supplied if the
			module is going to be read in the event stack.
			Note that currently unpacking scaler data from the event
			stack is not supported.
		     </para>
		  </listitem>
	       </varlistentry>
	       <varlistentry>
		  <term><option>-insertid</option> <replaceable>true|false</replaceable></term>
		  <listitem>
		     <para>
			If <literal>true</literal> (the default is <literal>false</literal>),
			the virtual slot number set by the <option>-id</option>
			configuration value is inserted in the data block from
			the scaler.  If <literal>false</literal> it is not.
			If used with the NSCLDAQ Scaler display in the scaler stack,
			this should be <literal>false</literal>.
		     </para>
		  </listitem>
	       </varlistentry>
	       <varlistentry>
		  <term><option>-slot</option> <replaceable>slot</replaceable></term>
		  <listitem>
		     <para>
			Sets the <parameter>slot</parameter> configuration.
			When installed in the CAMAC crate, the module should
			be inserted in the <parameter>slot</parameter> specified
			by this option.
		     </para>
		  </listitem>
		  </varlistentry>
	    </variablelist>
	    
	   </refsect1>
	   <refsect1>
	      <title>EXAMPLES</title>
	      <para>
	       This example creates an LRS 2551 scaler:
	      </para>
	      <example>
	       <title>The lrs2551 command</title>
	       <programlisting>
lrs2551 create counters -slot 4
	       </programlisting>
	      </example>
	   </refsect1>
	 
	 </refentry>
         <refentry id="ph7xxx">
           <refmeta>
              <refentrytitle>ph7xxx</refentrytitle>
              <manvolnum>1ccusbReadout</manvolnum>
           </refmeta>
           <refnamediv>
              <refname>ph7xxx</refname>
              <refpurpose>Define Phillips ADC/TDC/QDC modules</refpurpose>
           </refnamediv>
           
           <refsynopsisdiv>
             <cmdsynopsis>
         	<command>
ph7xxx create <replaceable>name</replaceable> <optional>?option value ...?</optional>         	
         	</command>
             </cmdsynopsis>
                 <cmdsynopsis>
                     <command>
ph7xxx config <replaceable>name  option value...</replaceable>
                     </command>
                 </cmdsynopsis>
                  <cmdsynopsis>
                      <command>
ph7xxx cget <replaceable>name</replaceable>
                      </command>
                  </cmdsynopsis>
                
           </refsynopsisdiv>
           <refsect1>
              <title>DESCRIPTION</title>
              <para>
               Creates, configures and interrogates the configuration of Philips
               CAMAC digitizers.
              </para>
              <para>
               The <command>create</command> command creates
               a new digitizer <replaceable>name</replaceable> configuration.
               The <replaceable>name</replaceable> parameter must be unique.
               The optional <optional>option value</optional> pairs that follow
               specify the configuration for that module.  This configuration
               can  be supplemented or overridden by subsequent
               <command>config</command> operations on the module.
              </para>
               <para>
                  The <command>config</command> subcommand configures the existing
                  module <replaceable>name</replaceable>.  The remainder of the
                  command line are option value pairs described in the section
                  OPTIONS below.  The module <replaceable>name</replaceable> must
                  have already been created via the <command>create</command>
                  subcommand.  Note that configuration options are processed
                  from left to right, if a configuration option appears more than
                  once, the last instance takes effect.
               </para>
               <para>
                  The <command>cget</command> subcommand returns the configuration
                  of the module.  This can be used in more advanced scripts to
                  analyze the configuration of the system.  The configuration of
                  a module <replaceable>name</replaceable> is returned as a
                  properly formatted Tcl list.  Each element of the list is itself
                  a pair (a two element sublist).  The first element of each pair
                  is the configuration parameter name, the second element the
                  value, which may itself be  a list (e.g. for the
                  <literal>-llt</literal> option.
               </para>
           </refsect1>
           <refsect1>
              <title>
         	OPTIONS
              </title>
              <variablelist>
         	<varlistentry>
         	    <term><option>-slot</option> <replaceable>slotnumber</replaceable></term>
         	    <listitem>
         		<para>
                           This option configures the slot in which the module
                           will be installed.  All modules must be in unique slots,
                           although that is not verified by the configuration manager.
                           The slot must be an integer number from one through 23
                           (slot 24/25 holds the CAMAC crate controller).
         		</para>
                        <para>
                           The default value for this parameter is illegal (0),
                           so you must specify this parameter.
                        </para>
         	    </listitem>
         	</varlistentry>
		<varlistentry>
		     <term><option>-id</option> <replaceable>vsn</replaceable></term>
		     <listitem>
			<para>
			   Each module has an identifier which, for historical
			   reasons is called a <firstterm>virtual slot number</firstterm>,
			   or <firstterm>vsn</firstterm>.  To maximize the decode
			   error detection the virtual slot numbers for each
			   module should be unique.  This option allows you
			   to set the virtual slot number for the module.
			</para>
		        <para>
			   If the <option>-id</option> is not supplied, it defaults
			   to zero.
			</para>
		     </listitem>
		</varlistentry>
                <varlistentry>
                  <term><option>-sparse</option> <replaceable>bool</replaceable></term>
                  <listitem>
                     <para>
                        If the value of this configuration is true, the module
                        is read in sparse readout mode (A Q-Stop of F4@A0).
                        SpecTcl expects this to be true and that is also the default
                        value.
                     </para>
                     <para>
                        The values
                        <literal>true</literal>,
                        <literal>yes</literal>,
                        <literal>1</literal>,
                        <literal>on</literal> and
                        <literal>enabled</literal> are all recognized as true
                        values while the values
                        <literal>false</literal>,
                        <literal>no</literal>,
                        <literal>0</literal>,
                        <literal>off</literal>, and
                        <literal>disabled</literal> are all recognized as false
                        values.
                     </para>
                  </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term><option>-readhits</option> <replaceable>bool</replaceable></term>
                     <listitem>
                        <para>
                           If the value of this configuration is true,the module's
                           hit register is read prior to the channels (F6@A1).
                           SpecTcl requires this parameter to be true, and that's the
                           default value.
                        </para>
                        <para>
                           SpecTcl will use this value to determine the number of
                           digitizer data words that follow for this module.
                        </para>
                        <para>
                        The values
                        <literal>true</literal>,
                        <literal>yes</literal>,
                        <literal>1</literal>,
                        <literal>on</literal> and
                        <literal>enabled</literal> are all recognized as true
                        values while the values
                        <literal>false</literal>,
                        <literal>no</literal>,
                        <literal>0</literal>,
                        <literal>off</literal>, and
                        <literal>disabled</literal> are all recognized as false
                        values.
                     </para>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term><option>-pedestals</option> <replaceable>int[16]</replaceable></term>
                     <listitem>
                        <para>
                           Supplies the pedestals for each channel.  This must be
                           a 16 element list of integers.  These values are
                           initialized to zero.  Note that the pedestals are
                           ignored unless <option>-usepdestals</option> is true.
                        </para>
                        <para>
                           The best way to construct this list of pedestals is to
                           use the Tcl <command>list</command> command for example:
                        </para>
                        <example>
                           <title>Using the <command>list</command> command to
                                  construct pedestals</title>
                           <programlisting>
                           <command>
ph7xxx config someadc -pedestals [list 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20]
                           </command>
                           </programlisting>
                        </example>
                        <para>
                           Note that pedestals can be specified as decimal values
                           (as shown in the example above), hexadecimal value
                           by preceding a number with the text <literal>0x</literal>
                           or octal by preceding the number with a leading <literal>0</literal>.
                        </para>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term><option>-llt</option> <replaceable>int[16]</replaceable></term>
                     <listitem>
                        <para>
                           Supplies the low level thresholds for each channel.  This must
                           be a 16 element list of integers.  These values are initialized
                           to zero.  Note that the low level thresholds are ignored unless
                           <option>-usellt</option> is true.
                        </para>
                        <para>
                           See the description of <option>-pedestals</option> above
                           for more information about how to construct this list.
                        </para>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term><option>-hlt</option> <replaceable>int[16]</replaceable></term>
                     <listitem>
                        <para>
                           Supplies the high level thresholds for each channel. This
                           must be a 16 element list of integers.  These values
                           are initialized to full scale (<literal>4095</literal>).
                           The high level thresholds are ignored unless the
                           parameter <option>-usehlt</option> is true.
                        </para>
                        <para>
                           See the description of <option>-pedestals</option>
                           above for more information about how to construct
                           this list.
                        </para>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term><option>-usellt</option> <replaceable>boolean</replaceable></term>
                     <listitem>
                        <para>
                           Enables or disables the low level threshold (sets or clears
                           the <literal>LT Enable</literal> bit in the control
                           register).  This is useful if
                           <option>-llt</option> has been used to program
                           low level thresholds and <option>-sparse</option>
                           has been set to true.
                        </para>
                       <para>
                        The values
                        <literal>true</literal>,
                        <literal>yes</literal>,
                        <literal>1</literal>,
                        <literal>on</literal> and
                        <literal>enabled</literal> are all recognized as true
                        values while the values
                        <literal>false</literal>,
                        <literal>no</literal>,
                        <literal>0</literal>,
                        <literal>off</literal>, and
                        <literal>disabled</literal> are all recognized as false
                        values.
                     </para>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term><option>-usehlt</option> <replaceable>bool</replaceable></term>
                     <listitem>
                        <para>
                           Enables or disables the high level threshold (sets or
                           clears the <literal>UT Enable</literal> bit in the
                           module control register).  This is useful if
                           <option>-hlt</option> has been used to set the high
                           level thresholds and <option>-sparse</option> has
                           been set to true.
                        </para>
                       <para>
                        The values
                        <literal>true</literal>,
                        <literal>yes</literal>,
                        <literal>1</literal>,
                        <literal>on</literal> and
                        <literal>enabled</literal> are all recognized as true
                        values while the values
                        <literal>false</literal>,
                        <literal>no</literal>,
                        <literal>0</literal>,
                        <literal>off</literal>, and
                        <literal>disabled</literal> are all recognized as false
                        values.
                     </para>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term><option>-usepedestals</option> <replaceable>bool</replaceable></term>
                     <listitem>
                        <para>
                           Enables or disables per chanel pedestal subtraction.
                           This is most useful when <option>-pedestals</option>
                           has been used to program a set of pedestals into
                           the module.
                        </para>
                       <para>
                        The values
                        <literal>true</literal>,
                        <literal>yes</literal>,
                        <literal>1</literal>,
                        <literal>on</literal> and
                        <literal>enabled</literal> are all recognized as true
                        values while the values
                        <literal>false</literal>,
                        <literal>no</literal>,
                        <literal>0</literal>,
                        <literal>off</literal>, and
                        <literal>disabled</literal> are all recognized as false
                        values.
                     </para>
                     </listitem>
                  </varlistentry>
              </variablelist>
           </refsect1>
           <refsect1>
              <title>EXAMPLES</title>
              <para>
                  The example below creates a Phillips module named
                  <literal>adc1</literal> and programs all of the configuration
                  options.  Note that in many cases you won't need to do this
                  (e.g. for ADC's the high level thresholds usually can be left
                  up at <literal>4095</literal>
              </para>
              <example>
                  <title>Sample <command>ph7xxx</command> commands</title>
                  <programlisting>
ph7xxx create adc1 -slot 5
ph7xxx config adc1 -sparse enabled -readhits true -usellt true -usehlt false
ph7xxx config adc1 -usepedestals enabled
ph7xxx config adc1 -pedestals [list 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 ]
ph7xxx config adc1 -llt [list 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10]
ph7xxx config adc1 -hlt [list 3000 3000 3000 3000 3000 3000 3000 \
                              3000 3000 3000 3000 3000 3000 3000 3000 3000 ]
                  </programlisting>
              </example>
           </refsect1>

         </refentry>
         <refentry id="stack">
           <refmeta>
              <refentrytitle>stack</refentrytitle>
              <manvolnum>1ccusbReadout</manvolnum>
           </refmeta>
           <refnamediv>
              <refname>stack</refname>
              <refpurpose>Create and configure CC-USB stacks.</refpurpose>
           </refnamediv>
           
           <refsynopsisdiv>
             <cmdsynopsis>
         	<command>
stack create <replaceable>name</replaceable>

         	</command>
             </cmdsynopsis>
               <cmdsynopsis>
                   <command>
stack config <replaceable>name option value...</replaceable>
                   </command>
               </cmdsynopsis>
            <cmdsynopsis>
                <command>
stack cget <replaceable>name</replaceable>
                </command>
            </cmdsynopsis>
           
           </refsynopsisdiv>
           <refsect1>
              <title>DESCRIPTION</title>
              <para>
         	Creates and configures CC-USB stacks.  Stacks are lists of
                CAMAC operations that are loaded into the CC-USB for autonomous
                execution.  There are two types of stacks; an
                <firstterm>event</firstterm> stack that is executed when
                a front panel trigger or a specified LAM is detected, and
                a <firstterm>scaler</firstterm> stack that can be periodically
                triggered.
              </para>
               <para>
                  Stacks contain lists of modules.  The modules themselves
                  determine the set of readout instructions that make up each
                  stack.  
               </para>
               <note>
                  <para>
                     In this version of the U. Mass. Lowell software, no
                     CAMAC scaler modules are supported, so the scaler stack
                     is not very useful.
                  </para>
               </note>
               <para>
                  The <command>create</command> subcommand creates a new stack.
                  The name of the new stack is <replaceable>name</replaceable>.
                  This <replaceable>name</replaceable> will be used to refer to
                  this stack in future configuration commands.
               </para>
               <para>
                  The <command>config</command> subcommand configures the stack
                  <replaceable>name</replaceable>.  The configuration is
                  specified as a set of option value pairs.  The options
                  are described in the section OPTIONS below.
               </para>
               <para>
                  The <command>cget</command> subcommand returns the configuration
                  of the stack <replaceable>name</replaceable> as its command value.
                  This subcommand is intended for advanced applications that may
                  analyze the configuration of the stack.  The configuration is
                  returned as a properly formatted Tcl list.  Each element of the list
                  is itself a two element sublist (pair).  The first element of each
                  pair is the name of a configuration parameter the second, that
                  configuration parameter's value.  Note that the value may itself
                  be a list.
               </para>
           </refsect1>
           <refsect1>
              <title>
         	OPTIONS
              </title>
               <para>
                  Options are used to configure the stack.  Each option has associated
                  with it a keyword that selects it and a value.  The option s supported
                  by the <command>stack</command> command are subdivided into three groups:
                  <orderedlist>
                     <listitem>
                        <para>Options used for both event and scaler stacks.</para>
                     </listitem>
                     <listitem>
                        <para>Options that are only used for event stacks and are ignored
                           for scaler stacks</para>
                     </listitem>
                     <listitem>
                        <para>Options that are only used for scaler stacks, and are
                           ignored for event stacks.
                        </para>
                     </listitem>
                  </orderedlist>
               </para>
               <formalpara>
                  <title>Options for all stack types</title>
                  <para>
                  </para>
               </formalpara>
               <variablelist>
                  <varlistentry>
         	     <term><option>-type</option> <replaceable>stack-type</replaceable></term>
         	     <listitem>
         		<para>
                           Defines the type of stack that is being used.  This
                           can be one of the keywords
                           <literal>event</literal> for event stacks or
                           <literal>scaler</literal> for scaler stacks.
                           The CC-USB only supports one scaler and one event stack.
                           The current version of the configuration engine allows
                           you to create more than one of each stack. In that case,
                           it is not well defined which stacks are actually loaded.
         		</para>
                        <para>
                           The default <option>-type</option> is <literal>event</literal>.
                        </para>
         	     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term><option>-modules</option> <replaceable>module-list</replaceable></term>
                     <listitem>
                        <para>
                           This option defines the set of modules that are added
                           to the stack.  <replaceable>module-list</replaceable> is a
                           properly formatted Tcl list of names of modules
                           (ph7xxx's in this implementation) that will be read
                           by this stack.  See the EXAMPLES section below
                           for more information.
                        </para>
                     </listitem>
                  </varlistentry>
               </variablelist>
               <formalpara>
                  <title>Event stack options</title>
                  <para>
                  </para>
               </formalpara>
               <variablelist>
                  <varlistentry>
                     <term><option>-lams</option>   <replaceable>mask</replaceable></term>
                     <listitem>
                        <para>
                           Specifies the mask of LAMs that can trigger the list.
                           I suggest leaving this value at zero, and deriving a
                           trigger signal for the NIM IN1 input as the readout
                           trigger.
                        </para>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term><option>-lamtimeout</option> <replaceable>microseconds</replaceable></term>
                     <listitem>
                        <para>
                           The <command>ph7xxx</command> command delays the read
                           of the module until it is signalling a LAM.
                           <replaceable>microseconds</replaceable> specifies the
                           total number of microseconds the stack should wait for
                           this LAM.  The value should be on the order of the
                           conversion time of the module.  Defaults to zero.
                        </para>
                     </listitem>
                  </varlistentry>
                  <varlistentry>
                     <term><option>-delay</option> <replaceable>microseconds</replaceable></term>
                     <listitem>
                        <para>
                           Delays the execution of the stack for <replaceable>microseconds</replaceable>
                           microseconds after the trigger condition is detected.
                           This can be used to ensure the digitization hardware
                           has sufficient time to complete its digitization prior
                           to stack execution. Defaults to zero.
                        </para>
                     </listitem>
                  </varlistentry>
               </variablelist>
               <formalpara>
                  <title>Options only available for scalers stacks</title>
                  <para>
                     The options below are only legal for stacks of
                     <option>-type</option> <literal>scaler</literal>
                  </para>
               </formalpara>
               <variablelist>
                  <varlistentry>
                     <term><option>-period</option> <replaceable>seconds</replaceable></term>
                     <listitem>
                        <para>
                           Number of seconds between execution of the scaler stack.
                           This defaults to 2.
                        </para>
                     </listitem>
                  </varlistentry>
               </variablelist>
            
           </refsect1>
           <refsect1>
               <title>EXAMPLES</title>
               <para>
                  The example below extends the example in the
                  <link linkend="ph7xxx">ph7xxx</link> command reference
                  reading the defined modules in an event stack:
               </para>
               <example>
                  <title>Example of the <command>stack</command> command.</title>
                  <programlisting>
ph7xxx create adc1 -slot 6
ph7xxx create adc2 -slot 7                                  <co id="defmodules" />


stack create events                                         <co id="stackdef" />
stack config events -type event -modules [list adc1 adc2]   <co id="typemods" />
stack config events -delay 10 -lamtimeout 8                 <co id ="timing" />
                  </programlisting>
               </example>
               <calloutlist>
                  <callout arearefs="defmodules">
                     <para>
                        These two lines define the modules that we will be using
                        for the experimental setup.
                     </para>
                  </callout>
                  <callout arearefs="stackdef">
                     <para>
                        Creates a new stack called <literal>events</literal>
                        In subsequent lines I'm going to configure this stack
                        to handle the event trigger.
                     </para>
                  </callout>
                  <callout arearefs="typemods">
                     <para>
                        The stack is configured to be the event stack, and
                        the two modules we created <literal>adc1</literal>
                        and <literal>adc2</literal> are added to the stack
                        in that order.  When the stack is loaded, it will
                        contain the instructions to read out these two modules.
                     </para>
                  </callout>
                  <callout arearefs="timing">
                     <para>
                        Configures the stack so that the CC-USB will start
                        stack execution 10 microseconds after the IN1 trigger.
                        Stack instructions that wait for a lam on their target
                        module will wait at most 8 microseconds.  Since the
                        <option>-lams</option> option is left to default to zero,
                        CAMAC lams will not be able to trigger the list.
                     </para>
                  </callout>
               </calloutlist>
               
                  
           </refsect1>
         </refentry>
            <refentry id="variables">
              <refmeta>
                 <refentrytitle>Variables</refentrytitle>
                 <manvolnum>1ccusbReadout</manvolnum>
              </refmeta>
              <refnamediv>
                 <refname>Variables</refname>
                 <refpurpose>Variables to set in the script</refpurpose>
              </refnamediv>
              
              <refsynopsisdiv>
                <cmdsynopsis>
            	<command>
set parameters(<replaceable>module-name</replaceable>) <replaceable>channel-list</replaceable>
            	</command>
                </cmdsynopsis>
              </refsynopsisdiv>
              <refsect1>
                 <title>DESCRIPTION</title>
                  <para>
                     When SpecTcl sets up its event decode software, it needs to
                     know how to unpack specific channels of a CAMAC module into
                     meaningful parameters.  SpecTcl parameters have names,
                     therefore, this means assigning SpecTcl parameter names
                     to specific input channels of each module. So that
                     <filename>~/config/spectclconfig.tcl</filename> can
                     issue SpecTcl commands that create this channel to
                     parameter name correspondence.
                  </para>
                  <para>
                     <filename>~/config/spectclconfig.tcl</filename> does this
                     by using a Tcl array.  In Tcl, array indices are text strings,
                     not numbers. It makes sense, therefore, to create an
                     array, named <varname>parameters</varname>
                     whose indices are the names of the modules that
                     are being read out, and whose contents are a list of the
                     channel names in that module.  
                  </para>
                  <para>
                     Given this arrangement, SpecTcl can examine the
                     <option>-modules</option> configuration of the event stack
                     to determine the order in which modules will appear in
                     the event, and then use the <varname>parameters</varname> array
                     contents to know how to map each digitizer channel in the
                     event to a SpecTcl parameter.
                  </para>
              </refsect1>
              <refsect1>
                 <title>EXAMPLES</title>
                 <para>
                     This example shows how to set up the <varname>parameters</varname>
                     array to define a correspondence between the channels of
                     the modules defined in the <link linkend="ph7xxx">ph7xxx</link>
                     reference page example, and SpecTcl parameters.
                 </para>
                 <para>
                     Note that SpecTcl parameter names can be essentially any
                     string.  Periods in the string are used to define a parameter
                     hierarchy that is reflected in the SpecTcl GUI.
                 </para>
                 <example>
                  <title>Making a corresopndence between module channels and parameters</title>
                  <programlisting>
ph7xxx create adc1 -slot 6
ph7xxx create adc2 -slot 7                                  <co id="adcdef" />

...

set parameters(adc1) [list ph1.00 ph1.01 ph1.02 ph1.03  \
                           ph1.04 ph1.05 ph1.06 ph1.07  \  <co id="adc1params" />
                           ph1.08 ph1.09 ph1.10 ph1.11  \
                           ph1.12 ph1.13 ph1.14 ph1.15]

set parameters(adc2) [list ph2.00 ph2.01 ph2.02 ph2.03  \
                           ph2.04 ph2.05 ph2.06 ph2.07  \ <co id="adc2params" />
                           ph2.08 ph2.09 ph2.10 ph2.11  \
                           ph2.12 ph2.13 ph2.14 ph2.15]
                  </programlisting>
                 </example>
                  <calloutlist>
                     <callout arearefs="adcdef" >
                        <para>
                           Defines the two adc modules from the original example.
                           I'm going to assume that at some point these adc
                           modules are put in the event stack in some order.
                        </para>
                     </callout>
                     <callout arearefs="adc1params">
                        <para>
                           Defines the parameter names that will be assigned to
                           each of the 16 channels of the module
                           <literal>adc1</literal>.  If you don't want a channel
                           to be assigned a parameter specify it's name as
                           <literal>""</literal>, and empty string.
                           If the last several channels of a module will not
                           be used, simply specify a shorter list.
                        </para>
                        <para>
                           In this example, channel 0 of adc1 will be called
                           <literal>ph1.00</literal> and so on.
                        </para>
                     </callout>
                     <callout arearefs="adc2params">
                        <para>
                           Similarly, the parameter names for the channels in the
                           <literal>adc2</literal> module are defined.
                        </para>
                     </callout>
                  </calloutlist>
                 <para>
                  I want to reiterate at this point that when
                  <filename>~/config/spectclconfig.tcl</filename> runs it
                  will actually create the parameters you specify as well as a
                  1-d spectrum for each raw parameter created.
                 </para>
              </refsect1>

            </refentry>
            

      </section>
         <section>
            <title>A complete <filename>daqconfig.tcl</filename> file</title>
            <para>
               In this section I will present a complete sample
               <filename>~/config/daqconfig.tcl</filename> configuration file.
            </para>
            <example>
               <title>A complete <filename>daqconfig.tcl</filename> file</title>
               <programlisting>
ph7xxx create adc1 -slot 6
ph7xxx create adc2 -slot 7                              <co id="modules" />


stack create events 
stack config events -type event -modules [list adc1 adc2] \ <co id="stacks" />
                    -delay 10 -lamtimeout 8


set parameters(adc1) [list ph1.00 ph1.01 ph1.02 ph1.03  \
                           ph1.04 ph1.05 ph1.06 ph1.07  \
                           ph1.08 ph1.09 ph1.10 ph1.11  \
                           ph1.12 ph1.13 ph1.14 ph1.15]    <co id="params" />

set parameters(adc2) [list ph2.00 ph2.01 ph2.02 ph2.03  \
                           ph2.04 ph2.05 ph2.06 ph2.07  \
                           ph2.08 ph2.09 ph2.10 ph2.11  \
                           ph2.12 ph2.13 ph2.14 ph2.15]
               </programlisting>
            </example>
            <calloutlist>
               <callout arearefs="modules">
                  <para>
                     This section of the configuration file defines the modules
                  </para>
               </callout>
               <callout arearefs="stacks">
                  <para>
                     This section defines the <literal>events</literal> stack to
                     read the two modules defined previously.
                  </para>
               </callout>
               <callout arearefs="params">
                  <para>
                     This section tells SpecTcl's configuration scripts
                     the paramter names to assign to each channel of the
                     ADC modules. Note that spectra named
                     <literal>ph1.00</literal> ... <literal>ph1.15</literal>
                     and <literal>ph2.00</literal> ... <literal>ph2.15</literal>
                     will be created that are 1-d spectra on the
                     raw parameters.
                  </para>
               </callout>
            </calloutlist>
         </section>
   </chapter>   
   <chapter id="spectcl">
      <title>SpecTcl</title>
      <para>
         <application>SpecTcl</application> is the histogramming component of the NSCL data acquision system.
         It uses an application called <application>Xamine</application> to
         display spectra that have been created.
      </para>
      <para>
         SpecTcl is actually a library not a program.  To make it work with a specific
         data set, the experimenter, in general must supply software that takes as
         input raw events, and produces as output parameters from which <application>SpecTcl</application>
         can increment the appropriate histograms. 
      </para>
      <para>
         For general applications, this user supplied software is organized as a logical pipeline
         of <firstterm>Event Processors</firstterm>.  Event processors are run sequentially,
         each event processor has access to the raw event and to the parameters that have been
         computed by event processors that executed prior to it.  Normally the first
         set of event processors operate on the raw event to produce raw parameters.
         Once this has been done, additional event processors can operate on the
         raw parameters to produce additional parameters without needing to know
         the form of the raw event.
      </para>
      <para>
         An example of an event processor that might operate
         on decoded parameters would be a calibrator.  A calibrator would take
         a set of raw parameters, and apply a calibration function to each of them
         to produce calibrated parameters (e.g. taking raw ADC values and producing
         energies).
      </para>
      <para>
         The <application>SpecTcl</application> provided with this software
         includes a first stage event processor that knows how to unpack the
         raw events from the CC-USB for any set of stacks that can be defined
         by the <filename>daqconfig.tcl</filename> file we have described into
         a set of <application>SpecTcl</application> parameters.
      </para>
      <para>
         This chapter describes how SpecTcl's initialization scripts use the
         <filename>daqconfig.tcl</filename> definitions and variables to create
         parameter definitions and an initial set of spectra. 
      </para>
      <section>
         <title>Using <filename>daqconfig.tcl</filename> to drive event decoding</title>
         <para>
            SpecTcl needs to know two thing for each module:
            <itemizedlist>
               <listitem>
                  <para>The order of appearance of each module in the event stack.</para>
               </listitem>
               <listitem>
                  <para>The names to be given to parameters from each channel of a module.
                  </para>
               </listitem>
            </itemizedlist>
         </para>
         <para>
            The reference section of the
            <link linkend="configfiles">Configuration Files</link> chapter
            describes the <varname>parameters</varname> array.
            Recall that Tcl arrays are indexed by strings not numbers.
            Each element the <varname>parameters</varname> array should be
            a Tcl list that describes the names of the channels of a module.
            The index of each element is the name of a module created with
            the <command>ph7xxx create</command> command in the <filename>daqconfig.tcl</filename>
            file.
         </para>
         <para>
            The <command>list</command> command is a Tcl command that will build lists
            with proper quoting and bracketing.  Surround each list element that has
            spaces or {} brackets with quotes.  Surround each list element that has
            [] brackets or $'s. with {}'s.
            For example:
         </para>
         <example>
            <title>Using the Tcl <command>list</command> command</title>
            <programlisting>
set parameters(someAdc) [list simple "has spaces or {" {has [tcl special] $characters} <replaceable>...</replaceable>]
            </programlisting>
         </example>
         <para>
            I strongly encourage you not to use Tcl special characters in parameter
            names, and to avoid spaces as well.
         </para>
         <para>
            The config directory that is installed when you create a new account
            for data taking includes two scripts
            <filename>daqconfig.tcl</filename> and <filename>spectclconfig.tcl</filename>.
            <filename>daqconfig.tcl</filename> is a sample configuration script.
            <filename>spectclconfig.tcl</filename> is an initialization script for
            SpecTcl that knows how to process <filename>daqconfig.tcl</filename>.
         </para>
         <para>
            SpecTcl can be told to use <filename>spectclconfig.tcl</filename> to process <filename>daqconfig.tcl</filename>
            when it starts.
         </para>
         <para>
            Let's conclude this section with an example of some code in the
            <filename>SpecTclRC.tcl</filename> initialization file that
            makes use of all this:
         </para>
         <example>
            <title>Incorporating automatic parameter/spectrum generation into SpecTcl</title>
            <programlisting>
set setupFilename [file join ~ config spectclconfig.tcl]
source $setupFilename
            </programlisting>
         </example>
         <para>
            This setup code is included in the <filename>SpecTclRC.tcl</filename>
            file that is installed in the data taking accounts you create.
         </para>
      </section>
      
   </chapter>

 
 
</book>