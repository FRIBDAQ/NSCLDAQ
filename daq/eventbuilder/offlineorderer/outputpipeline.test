

package require tcltest
package require InstallRoot
package require ring 

tcltest::test pkgrequire-0 {Test that the package can be required 
} -body {
  package require OfflineEVBOutputPipeline 
} -result 11.0


set daqbin [file join [InstallRoot::Where] bin]


## Keep adding a's together until we ring name that doesn't exist
#
proc findNonExistentRing {} {
  set name a
  set status [catch {ringbuffer usage $name} msg]
  while {$status!=0} {
    append name a
    set status [catch {ringbuffer usage $name} msg]
  }
  return $name
}



tcltest::test createPipelineCommand-0 { Test that default values are 
} -setup {
  set pipeline [OfflineEVBOutputPipeline %AUTO%]
  set params  [OfflineEVBOutputPipeParams %AUTO%]
} -cleanup {
  $params destroy
  $pipeline destroy
} -body {
  $pipeline createPipelineCommand $params
} -result "| $daqbin/eventlog --source=tcp://localhost/OfflineEVBOut --prefix=reordered --path=[file join $::env(HOME) offlinestagearea] --oneshot --number-of-sources=2 |& cat"





tcltest::test getsetPipeFD-0 {Test that pipeline fd can be set and read
} -setup {
  set pipeline [OfflineEVBOutputPipeline %AUTO%]
} -cleanup {
  $pipeline destroy
} -body {
  $pipeline setPipeFD 23
  $pipeline getPipeFD
} -result 23





tcltest::test getsetRunning-0 {Test that pipeline running parameter can be set and read
} -setup {
  set pipeline [OfflineEVBOutputPipeline %AUTO%]
} -cleanup {
  $pipeline destroy
} -body {
  $pipeline setRunning on 
  $pipeline getRunning
} -result on 





#tcltest::test launch-0 {Test that pipeline can be launched 
#} -setup {
#  set pipeline [OfflineEVBOutputPipeline %AUTO%]
#  set params [OfflineEVBOutputPipeParams %AUTO%]
#} -cleanup {
#  $params destroy
#  $pipeline destroy
#} -body {
#  $pipeline launch $params 
#} -returnCodes 0 
#
#
#tcltest::test launch-1 {Test that pipeline can be launched and that running becomes true
#} -setup {
#  set pipeline [OfflineEVBOutputPipeline %AUTO%]
#  set params [OfflineEVBOutputPipeParams %AUTO%]
#} -cleanup {
#  $params destroy
#  $pipeline destroy
#} -body {
#  $pipeline launch $params 
#  $pipeline getRunning
#} -result true -returnCodes 0 
#
#
#tcltest::test launch-2 {Test a nonexistent ring simply gets created
#} -setup {
#  set ringname [findNonExistentRing]
#  puts "Ring name $ringname doesn't exist"
#  set pipeline [OfflineEVBOutputPipeline %AUTO%]
#  set params [OfflineEVBOutputPipeParams %AUTO% -inputring $ringname]
#} -cleanup {
#  ringbuffer delete $ringname
#} -body {
#  $pipeline launch $params
#  expr {[string length [ringbuffer usage $ringname]] > 0}
#} -result {}



tcltest::cleanupTests


