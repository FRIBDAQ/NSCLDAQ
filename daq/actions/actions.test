
package require Actions 1.0
package require tcltest

set ::fullPath [tcltest::makeDirectory test]

tcltest::test buildPktERR {Test that ERRMSG directives succeed
} -setup {
  set action [::Actions %AUTO%]
  set line "ERRMSG 10 abcdefghij"
} -cleanup {
  $action destroy
} -body {
  $action buildPacket $line
} -result {ERRMSG abcdefghij 10}

tcltest::test buildPktLOG {Test that LOGMSG directives succeed
} -setup {
  set action [::Actions %AUTO%]
  set line "LOGMSG 10 abcdefghij"
} -cleanup {
  $action destroy
} -body {
  $action buildPacket $line
} -result {LOGMSG abcdefghij 10}

tcltest::test buildPktWRN {Test that WRNMSG directives succeed
} -setup {
  set action [::Actions %AUTO%]
  set line "WRNMSG 10 abcdefghij"
} -cleanup {
  $action destroy
} -body {
  $action buildPacket $line
} -result {WRNMSG abcdefghij 10}

tcltest::test buildPktTCLCMD {Test that TCLCMD directives succeed
} -setup {
  set action [::Actions %AUTO%]
  set line "TCLCMD 10 abcdefghij"
} -cleanup {
  $action destroy
} -body {
  $action buildPacket $line
} -result {TCLCMD abcdefghij 10}

tcltest::test buildPktOUTPUT {Test that OUTPUT directives succeed
} -setup {
  set action [::Actions %AUTO%]
  set line "OUTPUT 10 abcdefghij"
} -cleanup {
  $action destroy
} -body {
  $action buildPacket $line
} -result {OUTPUT abcdefghij 10}

tcltest::test buildPktDBGMSG {Test that DBGMSG directives succeed
} -setup {
  set action [::Actions %AUTO%]
  set line "DBGMSG 10 abcdefghij"
} -cleanup {
  $action destroy
} -body {
  $action buildPacket $line
} -result {DBGMSG abcdefghij 10}


tcltest::test buildPktIncomplete {Test that packet building stops on incomplete pkt
} -setup {
  set action [::Actions %AUTO%]
  set line "DBGMSG 16 abcdefghij"
} -cleanup {
  $action destroy
} -body {
  $action buildPacket $line
} -result {}


tcltest::test buildPktWithNewline {Test that packet is handled with internal newlines 
} -setup {
  set action [::Actions %AUTO%]
  set line {OUTPUT 4 a

b} 
} -cleanup {
  $action destroy
} -body {
  $action buildPacket $line
} -result {OUTPUT {a

b} 4}

tcltest::test buildPktWithMultiDirs {Test that only first packet outputted if multiple are present
} -setup {
  set action [::Actions %AUTO%]
  set line {OUTPUT 4 abcd
OUTPUT 4 efgh
OUTPUT 4 ijkl}
} -cleanup {
  $action destroy
} -body {
  $action buildPacket $line
} -result {OUTPUT abcd 4}

namespace eval testHandlers {
  variable line {}
  proc handleLog msg { variable line;  append line "log \"$msg\""}
  proc handleError msg { variable line; append line "error \"$msg\""}
  proc handleWarning msg { variable line; append line "warning \"$msg\""}
  proc handleTclCommand msg { variable line; append line "tcl \"$msg\""}
  proc handleOutput msg { variable line; append line "output \"$msg\""}
  proc handleDebug msg { variable line; append line "debug \"$msg\""}

  namespace export handleLog handleError handleWarning \
                  handleTclCommand handleOutput handleDebug
  namespace ensemble create
}

tcltest::test buildPktWithNewlines {Test that packet ending with newline works
} -setup {
  set action [::Actions %AUTO% -actionbundle testHandlers]
  $action setLine ""
} -cleanup {
  $action destroy
} -body {
  puts "test"
  $action processInput " \nTCL"
  $action processInput "CMD 3 end\n"

  set ::testHandlers::line
} -result {output " 
"tcl "end"}

tcltest::test buildPktSmushed-0 {Test that dropped whitespace get handled
} -setup {
  set action [::Actions %AUTO% -actionbundle testHandlers]
  
  set ::testHandlers::line {}
} -cleanup {
  $action destroy
} -body {
  puts "\n******** test2"
  $action processInput "LOGMSG "
  $action processInput "4 "
  $action processInput "asdf\n"

  set ::testHandlers::line
} -result "log \"asdf\"" ;# we will have to live with the fact that there is a blank line 
# emitted that gets registered as an output line. This should at least not break.


tcltest::test handleNonPktNoDirective {Test that fully non-directive data is properly handled
} -setup {
  set action [::Actions %AUTO% -actionbundle testHandlers]
  set line "abcdefghij"
  set ::testHandlers::line {}
} -cleanup {
  $action destroy
} -body {
  $action processInput $line
  set ::testHandlers::line
} -result {output "abcdefghij"}

tcltest::test handleNonPktWithDirective {Test that directive data is properly handled
} -setup {
  set action [::Actions %AUTO% -actionbundle testHandlers]
  set line "abcdef\nERRMSG 4 ghij\n"
  set ::testHandlers::line {}
} -cleanup {
  $action destroy
} -body {
  $action processInput $line
  set ::testHandlers::line
} -result {output "abcdef
"error "ghij"}


tcltest::test handleMessageLOG {test handleDirective for LOGMSG
} -setup {
  set action [::Actions %AUTO% -actionbundle testHandlers]
  set ::testHandlers::line {}
} -cleanup {
  $action destroy
} -body {
  set parsedmsg [list LOGMSG {my message}]
  $action handleMessage $parsedmsg
  set ::testHandlers::line
} -result {log "my message"}

tcltest::test handleMessageERROR {test handleDirective for ERRMSG
} -setup {
  set action [::Actions %AUTO% -actionbundle testHandlers]
  set ::testHandlers::line {}
} -cleanup {
  $action destroy
} -body {
  set parsedmsg [list ERRMSG {my message}]
  $action handleMessage $parsedmsg
  set ::testHandlers::line
} -result {error "my message"}

tcltest::test handleMessageWRN {test handleDirective for WRNMSG
} -setup {
  set action [::Actions %AUTO% -actionbundle testHandlers]
  set ::testHandlers::line {}
} -cleanup {
  $action destroy
} -body {
  set parsedmsg [list WRNMSG {my message}]
  $action handleMessage $parsedmsg
  set ::testHandlers::line
} -result {warning "my message"}

tcltest::test handleMessageTCLCMD {test handleDirective for TCLCMD 
} -setup {
  set action [::Actions %AUTO% -actionbundle testHandlers]
  set ::testHandlers::line {}
} -cleanup {
  $action destroy
} -body {
  set parsedmsg [list TCLCMD {my message}]
  $action handleMessage $parsedmsg
  set ::testHandlers::line
} -result {tcl "my message"}


tcltest::test handleMessageOUTPUT {test handleDirective for OUTPUT 
} -setup {
  set action [::Actions %AUTO% -actionbundle testHandlers]
  set ::testHandlers::line {}
} -cleanup {
  $action destroy
} -body {
  set parsedmsg [list OUTPUT {my message}]
  $action handleMessage $parsedmsg
  set ::testHandlers::line
} -result {output "my message"}

tcltest::test handleMessageDBG {test handleDirective for DBGMSG 
} -setup {
  set action [::Actions %AUTO% -actionbundle testHandlers]
  set ::testHandlers::line {}
} -cleanup {
  $action destroy
} -body {
  set parsedmsg [list DBGMSG {my message}]
  $action handleMessage $parsedmsg
  set ::testHandlers::line
} -result {debug "my message"}



tcltest::cleanupTests
