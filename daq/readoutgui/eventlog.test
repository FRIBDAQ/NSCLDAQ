#    This software is Copyright by the Board of Trustees of Michigan
#    State University (c) Copyright 2013.
#
#    You may use this software under the terms of the GNU public license
#    (GPL).  The terms of this license are described at:
#
#     http://www.gnu.org/licenses/gpl.txt
#
#    Author:
#            Ron Fox
#            NSCL
#            Michigan State University
#            East Lansing, MI 48824-1321

##
# @file eventlog.test
# @brief Tests for the eventlog bundle package.
# @author Ron Fox <fox@nscl.msu.edu>

#  Mocks:

package provide Diagnostics 1.0
package provide ReadoutGUIPanel 1.0


package require tcltest
package require eventLogBundle

package require RunstateMachine
package require Configuration
package require ExpFileSystem
package require snit

#------------------------------------------------------------------------------
#   Procs for the mocks:

namespace eval ::Diagnostics {}
namespace eval ::ReadoutGUIPanel {}


snit::type StatusBar {
    method addMessage msg {return junk}
    method setMessage {id msg} {}
}
StatusBar fakeStatusBar

proc ::Diagnostics::Error  msg {}
proc ::ReadoutGUIPanel::Log {src sev msg} {}
proc ::StatusBar::getInstance {} {return fakeStatusBar}

#------------------------------------------------------------------------------
#  eventlogBundle is a bundle and can be registered/unregistered.

tcltest::test register {::EventLog::register registers the bundle with the singleton} \
-setup {
    set m [RunstateMachineSingleton %AUTO%]
    
} \
-cleanup {
    $m removeCalloutBundle EventLog
    $m destroy
} \
-body {
    ::EventLog::register
    $m listCalloutBundles
} -result EventLog


tcltest::test unregister {::EventLog::unregister unregisters the bundle with the singleton} \
-setup {
    set m [RunstateMachineSingleton %AUTO%]
    ::EventLog::register
} \
-cleanup {
   
    $m destroy
} \
-body {
    ::EventLog::unregister
    $m listCalloutBundles
} -result [list]

#-----------------------------------------------------------------------------
# Test the data/control methods:
#

tcltest::test getPid {::EventLog::getPid reflects the ::EventLog::loggerPid value} \
-setup {
    set oldPid $::EventLog::loggerPid
    set ::EventLog::loggerPid 1234
} \
-cleanup {
    set ::EventLog::loggerPid $oldPid;    # Restore original value.
} \
-body {
    ::EventLog::getPid
} -result 1234

tcltest::test setStartupTimeout {::EventLog::startupTimeout should reflect settings} \
-setup {
    set oldValue $::EventLog::startupTimeout
} \
-cleanup {
    set ::EventLog::startupTimeout $oldValue
} \
-body {
    ::EventLog::setStartupTimeout 666
    set ::EventLog::startupTimeout
} -result 666

tcltest::test getStartupTimeout {EventLog::getStartupTimeout shouild reflect the variable} \
-setup {
    set oldValue $::EventLog::startupTimeout
    ::EventLog::setStartupTimeout 12345
} \
-cleanup {
    ::EventLog::setStartupTimeout $oldValue
} \
-body {
    ::EventLog::getStartupTimeout
} -result 12345

tcltest::test getShutdownTimeout {::EventLog::getShutdownTimeout should reflect the variable} \
-setup {
    set old $::EventLog::shutdownTimeout
    set ::EventLog::shutdownTimeout 11111
} -cleanup {
    set ::EventLog::shutdownTimeout $old
} -body {
    ::EventLog::getShutdownTimeout
} -result 11111

tcltest::test setShutdownTimeout {::EventLog::setShutdownTimeout should be reflected in get} \
-setup {
    set old [::EventLog::getShutdownTimeout]
    
} -cleanup {
    set ::EventLog::shutdownTimeout $old
} -body {
    ::EventLog::setShutdownTimeout 5440
    ::EventLog::getShutdownTimeout
} -result 5440

tcltest::test setFilePollInterval {::EventLog::filePollInterval shouild track the setting} \
-setup {
    set old $::EventLog::filePollInterval
} -cleanup {
    set ::EventLog::filePollInterval $old
} -body {
    ::EventLog::setFilePollInterval 999
    set ::EventLog::filePollInterval
} -result 999

tcltest::test getFilePollInterval {::EventLog::getFilePollInterval should track the setting} \
-setup {
    set old $::EventLog::filePollInterval
    
} -cleanup {
    ::EventLog::setFilePollInterval $old
} -body {
    ::EventLog::setFilePollInterval 98765
    ::EventLog::getFilePollInterval
} -result 98765

#------------------------------------------------------------------------------
#  Run state transitions with event logging turned on
#
#  need to re-do this with a mock object.
#

#-----------------------------------------------------------------------------
#  Run state transitions with event logging turned on.
#  For our logger we'll use cat | touch .started | touch .exited
#  This shouild make something that will hang around and
#  also make all of the appropriate files. 
#

set cat   [exec which cat]
set touch [exec which touch]
set testEventLogger "$cat | $touch .started | $touch .exited"

set here [pwd];           # This will get changed...
set stagearea [tcltest::makeDirectory stagearea $here]
::Configuration::Set StageArea $stagearea
::Configuration::Set Experiment [file join $here experiment]



#------------------------------------------------------------------------------
#  Report test results.


tcltest::cleanupTests

