/*!
    \page pg_CAMAC DASH low level camac support

    \section sec_camacintro DASH CAMAC support

At this time, the DAQ CAMAC support provides support for two 
types of VME/CAMAC interfaces.  The CES CBD-8210, which is a 
VME parallel branch highway driver and the Wiener VC32/CC32.

The CES CBD-8210 support is intended to be used with BiRA 1302
CAMAC Crate controllers, although in theory any standard compliant
A-1 or A-2 crate controller should work.   Since the CES-8210
is no longer in production it is not recommended for new setups.

The Wiener VC32/CC32 board set provides a VME board that interfaces with
a single CAMAC crate.  Note that while the physical connection between the
two boards is a SCSI-2 cable, the module is not a SCSI CAMAC crate controller.

In order to support a heterogenous CAMAC system (mix of CBD-8210 and VC/CC32
modules), a software structure similar to that of the 
\ref pg_VME is used.

CCAMACSubsystem is a class that is a container for CCAMACInterface objects.
The CAMACInterfaceFactory and the CCAMACSubsystem::createInterface and
CCAMACSubsystem::createInterfaces members allow the CAMAC subsystem to be configured
using simple descriptive textual configuration files.

Specific support for a CCAMACInterface is provided by deriving a subclass
from CCAMACInterface.  In general, the convention is that CCAMACInterface
derived classes have associated with them a CCAMACCrate derived class.
The interface is then stocked with objects of the right CCAMACCrate.  The
CCAMACCrate devices represent CAMAC crate controllers that have been connected
to the interface.

   \subsection ssec_camacclasses  Major classes of the DASH CAMAC support software.

This leads to the following set of classes:

   - CCAMACSubsystem - a singleton pattern class that is used to contain
     the CAMAC configuration.  the CCAMACInterface::addInterface method
     adds new interfaces and CCAMACInterface::createInterfaces adds interfaces
     and crates based on a configuration file.  Note that as with all singleton
     patterns, the class constructor is private.  You must call
     CCAMACSubsystem::getInstance to get a pointer to the single subsystem
     object.
   - CCAMACInterface is an abstract base class for objects that represent
     CAMAC interfaces.  A CAMAC interface is some piece of hardware
     that physically connects to the host system on the one hand and to one or more
     CAMAC Crate controllers on the other.  
   - CCAMACCrate is an abstract base class that represents a CAMAC Crate controller
     and its associated CAMAC crate. CCAMACInterface::addCrates is called on a
     concrete CCAMACInterface to install a crate into an interface.
   - CCESCBD8210 - is a concrete subclass of CCAMACInterface that implements the
     VME controller functions of the CES CBD-8210 VME parallel branch highway driver.
   - CWienerVC32 is a concrete subclass of CCAMACInterface that implements
     the VME controller functions of the Wiener VC32/CC32 board set.
   - CBiRA1302CES8210 is a concrete subclass of CCAMACCrate which implements a 
     crate on the CES CBD-8201 parallel branch highway with a BiRA 1302 crate 
     controller installed.
   - CVC32CC32 is a concrete subclass of CCAMACCrate that implements a 
     CC32 CAMAC crate controller plugged into a VC32 interface.
   - CCAMACInterfaceFactory is a factory for an extensible factory pattern class.
     The factory relies on CCAMACInterfaceCreator concrete subclasses to recognize,
     create, and configure specific concreate CCAMACCrate subclass objects.
   - CCES8210Creator is a creational object that creates the CCESCBD8210 object from
     a description line.  This must be instantiated and registered with the
     CCAMACInterfaceFactory via CCAMACInterfaceFactory::addCreator
   - CVC32Creator - is a creational object for the Wiener VC32.  It must be
     instantiated and registered with the factory via 
     CCAMACInterfaceFactory::addCreator.

  \subsection ssec_camacconfigfiles CAMAC configuration files

Many experiments will be able to describe a static CAMAC subsystem configuration.
The helper functions CCAMACSubsystem::createInterfaces allows this to be done
in a simple text file.  The format of this file is described in this section.

   - Comments are introduced using the pound (#) symbol and continue to the 
     end of the line.
   - Blank lines are treated as comments.
   - A line that is either blank or only a comment is called a logically blank
     line and is ignored.
   - Lines that are not logically blank contain a keyword that defines a
     CAMAC interface type, followed by configuration information that is
     specific to the actual CAMAC interface created by the configuration line.
   - Configuration information is usually specified as a set of keyword value
     pairs.  See e.g. CCES8210Creator and CVC32Creator for a description of
     the keyword values they support.

The following is a sample configuration file that creates a pair of
VC32 interfaces and their crates.  The interfaces are configured to be at base
addresses 0x800000 and 0x810000 and both live in VME crate 0.  This example
assumes the CVC32Creator object was registered with the factory as recognizing
the keyword "vc32".

\verbatim

vc32 -vme 0 -base 0x800000 # This is the first one at 0x800000

#   This is a set of  valid comment lines.
#   The next meaningful line registers the other controller:


vc32 -vme 0 -base 0x810000

\endverbatim

  \subsection ssec_camaclinking Using the DASH CAMAC Interface class library.

Programs which use the DASH CAMAC interface library must:
   - Specify to the compiler preprocessor where the DASH CAMAC library headers
     are located.
   - Specify the DASH CAMAC library to the compiler's linker stage.
   - Indicate to the dynamic loader where the shared libraries that make up 
     the DASH CAMAC library can be found.

In the remainder of this section we will assume that the DASH CAMAC
library is installed in the directory tree /usr/opt/dash/current.
If your DASH CAMAC installation is elsewhere, replace the string
/usr/opt/dashdaq/current with the appropriate directory specification.
To compile a source file named myfile.cpp  add the -I switch to specify the 
correct location of the DASH CAMAC library headers e.g:

\verbatim
g++ -c -I/usr/opt/dash/current/include myfile.cpp
\endverbatim

To link myfile.o

\verbatim

g++ -o myfile -L/usr/opt/dash/current/lib myfile.o -lCamac    \
              -Wl,"-rpath=/usr/opt/dash/current/lib"

\endverbatim
   


*/
