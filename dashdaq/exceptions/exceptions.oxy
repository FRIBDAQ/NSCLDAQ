/*!
	\page exception_intro    Introduction to the Exception class hierarchy
	\section sec_exceptions   Exception classes.

	This component provides a hierarchy of exceptions that are thrown
by the DASH components.  You may also use these exceptions in your code.

This component has a single key base classs: CException.  CException provides
the following features:
    - Exception context information (a text string that indicates what was
      happening when an exception was thrown.
    - A virtual member function called CException::ReasonText which provides
      a text string suitable for output that describes the exception.\
   - A virtual member function called CException::ReasonCode which, for exceptions
     that have subtypes which may dictate recovery strategy returns an integer
     code specific to the exception type that describes to the program why the
     exception was thrown.

For more information about the exception class hierarchy, See the CException class.

	\subsection ssec_exception_compile Compiling with the Exception class library
       
Each exception class has its own header which must be included into source files
that use that exception class.  The individual class description pages
give the required header.


Using the exception classes is a matter of:
- Ensuring the compiler can locate and include the exception class headers.
- Linking your software to the library that contains the class implementations.

In this discussion, we assume that the dash software is installed in a directory
tree rooted in:

\verbatim
/usr/opt/dash/current
\endverbatim

Replace this with the appropriate directory for your system if different.

To compile a source file say myfile.cpp that uses the exception headers you
will need to add an appropriate -I flag e.g.:

\verbatim
g++ -I/usr/opt/dash/current/include -c myfile.cpp
\endverbatim

To link a source file you need to add appropriate -L -l and -Wl swiches to 
locate the libraries, link them in and provide the run time loader with
information that allows it to locate the shared libraries at run time.
Suppose myfile.cpp above was a standalone program.   To link it:
\verbatim
g++ -o myfile -L/usr/opt/dash/current/lib myfile.o -lException    
             -Wl,"-rpath=/usr/opt/dash/current/lib"
\endverbatim

*/
