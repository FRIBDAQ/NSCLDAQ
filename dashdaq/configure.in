
# Process this file with autoconf to produce a configure script.
AC_INIT(Makefile.am)
AC_CONFIG_AUX_DIR(config)
AM_CONFIG_HEADER(config.h)

#    Separate device libraries.

AM_INIT_AUTOMAKE(dashdaq, 0.1-pre1)  

#
#   The variable below should track the
#   version number above to ensure that
#   all the .so's get appropriately versioned:
#
SOVERSION="0:1"
AC_SUBST(SOVERSION)




#  Compute the system type:
#  We can only build on linux-gnu  due to the VME drivers
#  We also have restrictions  on the versions for the drivers.
#
AC_MSG_CHECKING([operating system ])

AC_CANONICAL_HOST

if test "$host_os" == "linux-gnu"
then
   kernel_full_version="$(uname -r)"
   kernel_version="$(echo $kernel_full_version | cut -f1,2 -d.)"
   AC_MSG_RESULT([Building on $host_os kernel $kernel_version])   
else
   AC_MSG_ERROR([This software can only be built on linux-gnu not $host_os])
fi
KERNEL_VERSION=$kernel_full_version
AC_SUBST(KERNEL_VERSION)

# Checks for programs.

AC_PROG_CXX
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_LIBTOOL

#

AC_LANG_PUSH(C++)

#   Is there an std namespace to import from?

AC_COMPILE_IFELSE([using namespace std;], [AC_DEFINE([HAVE_STD_NAMESPACE],[1],[1 if std namespace defined])])
AH_VERBATIM([VHAVE_STD_NAMESPACE],[
/* Define STD macro according to HAVE_STD_NAMESPACE value */
#ifdef HAVE_STD_NAMESPACE
#define STD(name)  std::name
#else
#define STD(name) name
#endif])

AC_LANG_POP(C++)


# Hunt for the DASH library.
# In the end we want to define the following symbols:
#
#  DASH_CXXFLAGS    - Flags needed to compile C++ modules against dash.
#  DASH_LDFLAGS     - Flags needed to link code against dash.
#
#  The user can supply:  --with-dash-dir=<top of dash install tree>
#  We also look in (in the following order):
#     /usr/opt/daqhighway
#     /usr/local
#     /opt
#     /usr
#   We hunt in the bin subdir for daqhighway-conf.


AC_MSG_CHECKING([For Daq super highway libraries and headers])
AC_ARG_WITH(dash-dir,
	[  --with-dash-dir=top level directory of daq super highway installation],
	[dashdir=$withval
         dashfound="yes"], [dashfound="no"])


if test $dashfound == "no"; then
   for dir in /usr/opt/daqhighway /usr/local /opt /usr; do
       if test $dashfound == "no"; then
	  AC_CHECK_FILE($dir/bin/daqhighway-conf,
	                [dashdir=$dir
                         dashfound="yes"])
       fi
   done
fi

#  At this point dashfound="yes" and dashdir is the top of the install tree for dash,
#  or dashfound="no" and that's an error.
#


if test $dashfound == "yes"; then  
   AC_MSG_RESULT([ found in $dashdir])
   DASH_CXXFLAGS=$($dashdir/bin/daqhighway-conf --cflags)
   DASH_LDFLAGS=-$($dashdir/bin/daqhighway-conf --libs)
   AC_SUBST(DASH_CXXFLAGS)
   AC_SUBST(DASH_LDFLAGS)
else
   AC_MSG_ERROR([ can't find daq superhighway, help me by using -with-dash-dir=top])
fi

AC_MSG_CHECKING([ for VME device ])
#   VMEDEVICE  - The name of the selected api.
#

#  Default to SBSBit3 but allow
#    --with-vme-interface={sbs|wiener|none}
#

# Default interface is sbs.

vmeinterface="sbs"

#  Process -with-vme-interface if there.

AC_ARG_WITH(vme-interface,
	[--with-vme-interface=sbs|wiener|wienerusb|none - Choose VME interface],
	vmeinterface="$withval")

# VMEDEVICE         - Which device it is.
# VMELIBRARYHEADERS - Where the headers will live for vme lib.
# VMELIBRARY        - ld switches neede to use VME.
# DEPENDSON_VME     - Space separated list of directories that
#                     require that specific type of VME interface
#                     to build (try to keep this number small!!).
# SEPARABLELOCK     - Locking if the 'default' locking is good enough
#                     for this interface.

case "$vmeinterface" in
     sbs)
	VMEDEVICE="SBSBIT3"

	    # Definitions require to build us:
	   
	#  We can support 2.4 and 2.6 kernel builds but they're done
	#  differently:
	#


	VMELIBRARYHEADERS="-I\$(prefix)/include"
	VMELIBRARY="-L\$(prefix)/lib -lbtp -lpthread"
	AC_DEFINE(HAVE_SBSVME_INTERFACE,"1",[VME interface is sbs/bit3])
	AC_DEFINE(HAVE_VME_MAPPING, "1",[VME interface capable of mmap(2)])
	DEPENDSON_VME="PowerCheck"
	SEPERABLELOCK="Locking"

	case  $kernel_version in 
	 2.4)
 
	    # Definitions require to build us:

	    VME_DRIVERDIR="btdriver"
	    VMEBUILDHEADERS="-I$(pwd)/btdriver/include"
	    VMEBUILDLIBS="-L$(pwd)/btdriver/lib -lbtp -lpthread"
	   
	    ;;
	 2.6)
	    VME_DRIVERDIR="btdriver2.6"
	    VMEBUILDHEADERS=-I$(pwd)/btdriver2.6/include
	    VMEBUILDLIBS="-L$(pwd)/btdriver2.6/lib -lbtp -lpthread"
	    ;;
	*)
	    AC_MSG_ERROR([SBS bit3 driver can only be built on 2.4 or 2.6 kernel this is $kernel_version])
	    ;;
        esac
     ;;
     wiener) 
	#  Can only build on 2.4 kernel at this time:

	if test "$kernel_version" != "2.4"
        then
	   AC_MSG_ERROR([Wiener support can only be built on the 2.4 kernel this is $kernel_version])
        fi

	VMEDEVICE="WIENER"
	    # Definitions for the build: Static link and driver has no mmap support.

	VME_DRIVERDIR="wienerdriver"
	VMEBUILDHEADERS="-I$(pwd)/wienerdriver/lib"
	VMEBUILDLIBS="-L$(pwd)/wienerdriver/lib -lpcivme"

	# Definitions written into the user skeleton makefiles:

	VMELIBRARYHEADERS="-I\$(prefix)/include"
	VMELIBRARY="-L\$(prefix)/lib -lpcivme"
	DEPENDSON_VME=""
	SEPERABLELOCK="Locking"	
	AC_DEFINE(HAVE_WIENERVME_INTERFACE,"1",[VME Interface is Wiener])

     ;;
     wienerusb)
	VMEDEVICE="WIENERUSB"
	VME_DRIVERDIR=""
	VMEBUILDHEADERS=""
	VMEBUILDLIBS="-lusb"

	# Definitions written to the build skeletons

	VMELIBRARYHEADERS=""
	VMELIBRARY="-lusb"
	DEPENDSON_VME=""
	SEPERABLELOCK="NullLock"
	AC_DEFINE(HAVE_WIENERUSBVME_INTERFACE,"1",[VME interfaces is WienerUSB])

     ;;
     none)
	VMEDEVICE="NULL"
	VME_DRIVERDIR=""
	VMEBUILDHEADERS=""
	VMEBUILDLIBS=""

	#  Definitions written into the user skeleton makefiles:

	VMELIBRARYHEADERS=""
	VMELIBRARY=""
	DEPENDSON_VME=""
	SEPERABLELOCK="NullLock"

	AC_DEFINE(HAVE_NOVME_INTERFACE, "1",[No VME interface selected])

     ;;
     *)
     AC_MSG_ERROR([Invalid vme interface type $vmeinterface valid values are sbs, wiener or none])
     ;;
esac
AC_SUBST(VMEDEVICE)
AC_SUBST(VME_DRIVERDIR)
AC_SUBST(VMELIBRARY)
AC_SUBST(VMELIBRARYHEADERS)
AC_SUBST(VMEBUILDHEADERS)
AC_SUBST(VMEBUILDLIBS)
AC_SUBST(DEPENDSON_VME)
AC_SUBST(SEPERABLELOCK)


AC_MSG_RESULT([$VMEDEVICE])


#  Figure out where the linux kernel headers are.
#  We'll look for  $(HEADERS)/linux/module.h  in the following spots:
#  - /usr/src/kernel-headers-$(uname -r)/include  [debian]
#  - /usr/src/linux-$(uname-r)/include            [redhat]
#  - /usr/src/linux/include                       [old? redhat]
#  -  Where the user tells us with --with-kernel-headers=value.

AC_MSG_CHECKING([for kernel headers (.../linux/module.h)])

AC_ARG_WITH(kernel-headers,
	[--with-kernel-headers=location of linux kernel headers],
	[KERNEL_INCS="-I$withval"],[KERNEL_INCS="-"])

if test $KERNEL_INCS = "-" ; then
  AC_CHECK_FILE(/usr/src/kernel-headers-$(uname -r)/include/linux/module.h,
    [KERNEL_INCS="-I/usr/src/kernel-headers-$(uname -r)/include"])
fi

if test $KERNEL_INCS = "-" ; then
  AC_CHECK_FILE(/usr/src/linux-$(uname -r)/include/linux/module.h,
      [KERNEL_INCS="-I/usr/src/linux-$(uname -r)/include"])
fi

if test $KERNEL_INCS = "-" ; then
  AC_CHECK_FILE(/usr/src/linux/include/linux/module.h,
      [KERNEL_INCS="-I/usr/src/linux-$(uname -r)/include"])
fi

if test $KERNEL_INCS = "-"; then
	AC_MSG_ERROR([Could not find kernel headers. Try the --with-kernel-headers switch])
fi


#   Figure out SMP flag (needed by the driver builds).

AC_MSG_CHECKING([for smp system (btdriver)])

if (uname -v |grep -q SMP)
then
  SMP_FLAG="-D__SMP__"
  AC_MSG_RESULT([System runs the SMP kernel])
else
  SMP_FLAG=""
  AC_MSG_RESULT([System is not running an SMP kernel])
fi

AC_SUBST(KERNEL_INCS)
AC_SUBST(SMP_FLAG)


AC_OUTPUT(Makefile \
          sbsbit3/Makefile \
             sbsbit3/dd/Makefile sbsbit3/dd/mkbtp \
             sbsbit3/lib/Makefile \
             sbsbit3/include/Makefile)
