'\"
'\" Copyright (c) 2005 Michigan State University All Rights Reserved
'\"  Licensed under the GPL.  See http://www.gnu.org/licenses/gpl.txt
'\"  terms and conditions.
'\"
'\" The definitions below are for supplemental macros used in Tcl/Tk
'\" manual entries.
'\"
'\" .AP type name in/out ?indent?
'\"	Start paragraph describing an argument to a library procedure.
'\"	type is type of argument (int, etc.), in/out is either "in", "out",
'\"	or "in/out" to describe whether procedure reads or modifies arg,
'\"	and indent is equivalent to second arg of .IP (shouldn't ever be
'\"	needed;  use .AS below instead)
'\"
'\" .AS ?type? ?name?
'\"	Give maximum sizes of arguments for setting tab stops.  Type and
'\"	name are examples of largest possible arguments that will be passed
'\"	to .AP later.  If args are omitted, default tab stops are used.
'\"
'\" .BS
'\"	Start box enclosure.  From here until next .BE, everything will be
'\"	enclosed in one large box.
'\"
'\" .BE
'\"	End of box enclosure.
'\"
'\" .CS
'\"	Begin code excerpt.
'\"
'\" .CE
'\"	End code excerpt.
'\"
'\" .VS ?version? ?br?
'\"	Begin vertical sidebar, for use in marking newly-changed parts
'\"	of man pages.  The first argument is ignored and used for recording
'\"	the version when the .VS was added, so that the sidebars can be
'\"	found and removed when they reach a certain age.  If another argument
'\"	is present, then a line break is forced before starting the sidebar.
'\"
'\" .VE
'\"	End of vertical sidebar.
'\"
'\" .DS
'\"	Begin an indented unfilled display.
'\"
'\" .DE
'\"	End of indented unfilled display.
'\"
'\" .SO
'\"	Start of list of standard options for a Tk widget.  The
'\"	options follow on successive lines, in four columns separated
'\"	by tabs.
'\"
'\" .SE
'\"	End of list of standard options for a Tk widget.
'\"
'\" .OP cmdName dbName dbClass
'\"	Start of description of a specific option.  cmdName gives the
'\"	option's name as specified in the class command, dbName gives
'\"	the option's name in the option database, and dbClass gives
'\"	the option's class in the option database.
'\"
'\" .UL arg1 arg2
'\"	Print arg1 underlined, then print arg2 normally.
'\"
'\" RCS: @(#) $Id$
'\"
'\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp
..
'\"	# SO - start of list of standard options
.de SO
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
'\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\fBoptions\\fR manual entry for details on the standard options.
..
'\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
'\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
'\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.de UL
\\$1\l'|0\(ul'\\$2
..
.TH n568Panel 3 "" Tcl "NSCL DAQ Tcl support."
.BS
'\" Note:  do not modify the .SH NAME line immediately below!
.SH NAME
n568Panel \- Megawidget to control an N568b shaper.
.SH SYNOPSIS
.DS
\fBpackage require n568Panel\fR
\fBn568Panel\fI pathName ?options?\fR
.DE
.BE

.SH DESCRIPTION
.PP
This package provides a megawidget that is a control panel for a single
CAEN N568 module.  The control panel can be used in user applications
and is also used by the \fBn568Control\fR script.
.SH "WIDGET SPECIFIC OPTIONS"
.OP -node "" ""
Specifies the CAENnet node of the shaper module to control.
.OP -controllercrate "" ""
Specifies the VME crate number in which the CAENnet controller
connected to the shaper module resides.  If not supplied, the
VME crate number defaults to 0.
.OP -controllerbase "" ""
Specifies the base address of the CAENnet controller connected to
the shaper module.
.OP -name "" ""
Provides a documentation name for the shaper.  This name appears in
the control panel to help the user identify the shaper and how it is
being used in the experiment.
.OP -command "" ""
Allows the user to provide a script that will be called whenever a
shaper control parameter is modified. A three element list will
be appended to the user's script, so it is usual for the script ot
be a proc name. The list contents are \fIaction\fR, \fIwhich\fR \fIvalue\fR.
The \fIaction\fR specifies what was changed, and can be any of:
.DS
coarse    - Coarse gain changed.
fine      - Fine gain changed.
pole0     - Pole 0 correction changed.
invert    - Output configuration changed.
polarity  - Channel input polarity changed.
shapetime - The shaping time constant changed.
offset    - The common offset changed.
.DE
The \fIwhich\fR parameter is an empty string for \fIaction\fR = offset and the
number of the channel that was changed for any other action.  The \fIvalue\fR is
the new value of the parameter defined by \fIaction\fR and \fIwhich\fR.
.OP -alarmscript "" ""
Specifies a script to be executed if the controller detects an alarm
condition.  Note that at present, no alarmconditions are defined
for the N568, however this is provided for compatibility with other
megawidgets that do device control.
.SH "WIDGET COMMANDS"
.PP
The widget supports commands which are related to the management of the module's
property list.  A property list is a Tcl list containing elements that are name, value
pairs.  An element of a propertylist (property) defines a piece of the state of the module.
See PROPERTIES below for more information about the properties supported by the n568b.
.TP
\fIpath\fB getProperties\fR
Returns the property list for \fIpath\fR.
.TP
\fIpath\fB setProperties\fI propertyList\fR
Loads the \fIpropertyList\fR into the module.  The module is restored to the state
defined by the property list.  If any properties are omitted, that section of the
module state is not modified.
.SH "PROPERTIES"
.PP
The properties supported by the megawidget are:
.TP
offset
The module common offset.
.TP
coarse\fIn\fR
The coarse gain of channel \fIn\fR.
.TP
fine\fIn\fR
The fine gain of channel \fIn\fR.
.TP
polezero\fIn\fR
The pole zero adjust for channel \fIn\fR.
.TP
invert\fIn\fR
The output configuration state for channel \fIn\fR.
.TP
polarity\fIn\fR
The input polarity for channel \fIn\fR.
.TP
shapetime\fIn\fR
The shaping time for cahnnel \fIn\fR.

.SH "SEE ALSO"
loadshaper(1) n568b(3) n568configfile(5) n568control(1)

.SH KEYWORDS
CAENnet N568b
