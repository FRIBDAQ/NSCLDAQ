
# Process this file with autoconf to produce a configure script.
AC_INIT(CopyrightTools/CopyrightNotice.cpp)
AC_CONFIG_AUX_DIR(config)
AM_CONFIG_HEADER(config.h)

#    Separate device libraries.

AM_INIT_AUTOMAKE(nscldaq, 9.0-pre1)  

#
#   The variable below should track the
#   version number above to ensure that
#   all the .so's get appropriately versioned:
#
SOVERSION="8:1"


#  Checks for parameters:

#  Compute the system type:
#  We can only build on linux-gnu  
#  We also have restrictions  on the versions for the drivers.
#


AC_MSG_CHECKING([operating system ])

AC_CANONICAL_HOST

if test "$host_os" == "linux-gnu"
then
   kernel_full_version="$(uname -r)"
   kernel_version="$(echo $kernel_full_version | cut -f1,2 -d.)"
   AC_MSG_RESULT([Building on $host_os kernel $kernel_version])   
else
   AC_MSG_ERROR([This software can only be built on linux-gnu not $host_os])
fi


# Since we are making/installing drivers; you must be root to run this
# -- there's a back door for fox development.. you can be me too:

id=`id -u`
if test "$id" != "0" 
then
   user=`id  -nu`
   AC_MSG_RESULT([User is $user])
   if test "$user" == "fox"
   then
      AC_MSG_RESULT([Fox is building so we'll allow non root build])
   else
      AC_MSG_ERROR([Since this installs device drivers you must run this as root])
   fi
fi


# Checks for programs.
AC_PROG_AWK
AC_PROG_CXX
AC_PROG_CC
AC_PROG_CPP
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_LIBTOOL
AC_PATH_PROG(DOXYGEN, doxygen, echo)

# Documentation tools:

AC_PROG_LN_S
AC_PATH_PROG(HCDOCBOOK,   docbook2dvi,  echo)
AC_PATH_PROG(HTMLDOCBOOK, docbook2html, echo)
AC_PATH_PROG(DVIPDF,      dvipdf,       echo)
AC_PATH_PROG(MANDOCBOOK,  xmlto,        echo)



#  Needed components for hyperlatex


AC_PATH_PROG(MANDB, mandb, echo)
AC_PATH_PROG(HYPERLATEX, hyperlatex, echo)	
AC_CHECK_PROG(HAVELATEX,  latex, yes, no)		
AC_CHECK_PROG(HAVEDVIPS,  dvips, yes, no)		
AC_CHECK_PROG(HAVEKPATHSEA, kpsewhich, yes, no)	


#

AC_PROG_GCC_TRADITIONAL

# Checks for libraries.


# Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(string.h)
AC_CHECK_HEADERS(malloc.h)
AC_CHECK_HEADERS(netdb.h)
AC_CHECK_HEADERS(netinet/in.h)
AC_CHECK_HEADERS(fcntl.h)
AC_CHECK_HEADERS(sys/ioctl.h)
AC_CHECK_HEADERS(sys/time.h)
AC_CHECK_HEADERS(arpa/inet.h)
AC_CHECK_HEADERS(sys/socket.h)
AC_CHECK_HEADERS(gdbm.h, AC_DEFINE([HAVE_GDBM_H], 1, [<gdbm.h> exists]), AC_MSG_ERROR("Can't find gdbm.h needed to build nscldaq"))
AC_CHECK_HEADERS(limits.h)
AC_CHECK_HEADERS(stddef.h)


AC_HEADER_MAJOR
AC_HEADER_SYS_WAIT
AC_HEADER_TIME
AC_HEADER_STAT
AC_PATH_XTRA

# Checks for typedefs, structures, and compiler characteristics.

AC_STRUCT_TM
AC_TYPE_SIZE_T
AC_TYPE_PID_T
AC_TYPE_OFF_T
AC_C_CONST
AC_C_INLINE



# Checks for library functions.

AC_CHECK_LIB(gdbm, gdbm_open, [], [AC_MSG_ERROR("Can't fine libgdm needed tobuild nscldaq")])
AC_FUNC_MMAP
AC_CHECK_FUNCS(stat)
AC_CHECK_FUNCS(malloc)
AC_CHECK_FUNCS(munmap)
AC_CHECK_FUNCS(getpagesize)
AC_CHECK_FUNCS(memset)
AC_CHECK_FUNCS(strerror)
AC_CHECK_FUNCS(gethostbyname)
AC_CHECK_FUNCS(gethostbyaddr)
AC_CHECK_FUNCS(inet_ntoa)
AC_CHECK_FUNCS(gettimeofday)
AC_CHECK_FUNCS(select)
AC_CHECK_FUNCS(strchr)
AC_CHECK_FUNCS(gethostname)
AC_CHECK_FUNCS(getpass)
AC_CHECK_FUNCS(socket)
AC_CHECK_FUNCS(strdup)
AC_CHECK_FUNCS(strstr)
AC_CHECK_FUNCS(fork)
AC_CHECK_FUNCS(clock_gettime)
AC_CHECK_FUNCS(strtol)
AC_CHECK_FUNCS(strtoul)


#  See if the C runtime libs have .h's on them or
#  if h-less versions can be used for what we need:
#

AC_LANG_PUSH(C++)
AC_CHECK_HEADER(iostream, [AC_DEFINE([HAVE_HLESS_IOSTREAM],1,[<iostream> exists])],[])
AC_CHECK_HEADER(istream,  [AC_DEFINE([HAVE_HLESS_ISTREAM],1,[<istream> exists])],[])
AC_CHECK_HEADER(ostream,  [AC_DEFINE([HAVE_HLESS_OSTREAM],1,[<ostream> exists])],[])
AC_CHECK_HEADER(streambuf,[AC_DEFINE([HAVE_HLESS_STREAMBUF],1,[<streambuf> exists])],[])
AC_CHECK_HEADER(fstream,  [AC_DEFINE([HAVE_HLESS_FSTREAM],1,[<fstream> exists])],[])
AC_CHECK_HEADER(iomanip,  [AC_DEFINE([HAVE_HLESS_IOMANIP],1,[<iomanip> exists])],[])
AC_CHECK_HEADER(sstream,  [AC_DEFINE([HAVE_HLESS_SSTREAM],1,[<sstream> exists])],[])
AC_CHECK_HEADER(typeinfo, [AC_DEFINE([HAVE_HLESS_TYPEINFO],1,[<typeinfo> exists])],[])



#   Is there an std namespace to import from?

AC_COMPILE_IFELSE([using namespace std;], [AC_DEFINE([HAVE_STD_NAMESPACE],[1],[1 if std namespace defined])])
AH_VERBATIM([VHAVE_STD_NAMESPACE],[
/* Define STD macro according to HAVE_STD_NAMESPACE value */
#ifdef HAVE_STD_NAMESPACE
#define STD(name)  std::name
#else
#define STD(name) name
#endif])



AC_LANG_POP(C++)

# NSCL DAQ specific checks:

# we need to hunt down spectrodaq-lite.
# we'll hunt for spdaqline-conf
# in the bin directory of:
#
#  /usr/opt/spectrodaq-lite
#  /usr/local
#  /usr/local/spectrodaq-lite
#
#  We'll also look for it in the bin subdirectory
#  of the directory given by 
#  --with-spdaq-lite-home
#

spdaqlite_homes="/usr/opt/spectrodaq-lite /usr/local /usr/local/spectrodaq-lite"spdaqlite_conf_dir=""

AC_MSG_CHECKING([ for spectrodaq-lite ])

AC_ARG_WITH(spectrodaq-lite-home,
	[ --with-spectrodaq-lite-home=spectrodaq-lite top level install dir],
	[spdaqlite_conf_dir="$withval/bin"
	spdaqlite_found="yes"], 
	[spdaqlite_found="no"])

for dir in $spdaqlite_homes
do
  if test $spdaqlite_found == "no"
  then
      AC_CHECK_FILE($dir/bin/spdaqlite-conf,
	  [spdaqlite_conf_dir="$dir/bin"
	   spdaqlite_found="yes"])
  fi
done

if test $spdaqlite_found == "no"
then
    AC_MSG_ERROR([Cannot locate spdaqlite-conf help  mey by using --with-spectrodaq-lite-home])
else
    SPECTRODAQ_FLAGS=$(${spdaqlite_conf_dir}/spdaqlite-conf --cflags)
    SPECTRODAQ_LDFLAGS=$(${spdaqlite_conf_dir}/spdaqlite-conf --libs)

    AC_MSG_RESULT([found in ${spdaqlite_conf_dir}])
fi


# Locate Tcl/Tk and setup compile/link switches for them too:
# The list below is the set of versions we will look for.  At this
# time, 8.4 is pretty standard and 8.5 is impending which means that
# soon some redhat systems will have it I suppose.
# This list must be updated as time goes by.
#
tcl_versions="8.5 8.4 8.3 8.2 8.1 8.0"     # First match;  so order new -> old.

#  The TCL Shell - used to run tests... must be in path.
#  First check for a version qualified command:
#

AC_MSG_CHECKING([for tcl shell command...])
for version in $tcl_versions
do
	name=tclsh${version}
	AC_CHECK_PROG(TCLSH_CMD, $name, $name)
done
#
#   Could be unqualified by version:
#
AC_CHECK_PROG(TCLSH_CMD, tclsh, tclsh)

if test "$TCLSH_CMD" == ""
then
	AC_MSG_ERROR([Can't find a tcl shell])
else
	AC_MSG_RESULT([found: $TCLSH_CMD])
fi

#  TCL headers:
#    We know of a few places the headers can live:
#       /usr/include              redhat linux.
#       /usr/include/tcl          debian dude that made  link to default tcl.
#       /usr/include/tcl<version> debian linux
#       /usr/local/include        default for source based install.
#       Whatever the user specifies. 
#        For now, the versions we look for are determined by the
#        variable tcl_versions  that variable is a list of version 
#        number specifiers.
#


tcl_header_dir=""
AC_MSG_CHECKING([for tcl headers])

AC_ARG_WITH(tcl-header-dir,
	[  --with-tcl-header-dir=path Path to tcl headers],
	[tcl_header_dir="$withval"
	tcl_headers_found="yes"],[tcl_headers_found="no"])


	# /usr/include

if test $tcl_headers_found == "no"; then
   AC_CHECK_FILE([/usr/include/tcl.h],
	[tcl_header_dir="/usr/include"
	tcl_headers_found="yes"])
fi

	# /usr/include/tcl

if test $tcl_headers_found == "no"; then
   AC_CHECK_FILE([/usr/include/tcl/tcl.h],
	[tcl_header_dir="/usr/include/tcl"
	tcl_headers_found="yes"])
fi

	# /usr/include/tcl<version>

if test $tcl_headers_found == "no" ; then
 for version in $tcl_versions;  do
   if test $tcl_headers_found == "no" ; then   # stop at first match
      testdir=/usr/include/tcl$version
      AC_CHECK_FILE([${testdir}/tcl.h],
	[tcl_header_dir=${testdir}
	 tcl_headers_found="yes"])
   fi
 done
fi

      # /usr/local/include
if test $tcl_headers_found == "no"; then
   AC_CHECK_FILE([/usr/local/include/tcl.h],
	[tcl_header_dir="/usr/local/include/tcl"
	tcl_headers_found="yes"])
fi


if test $tcl_headers_found == "yes"; then
   TCL_FLAGS="-I${tcl_header_dir}"
   AC_MSG_RESULT([found in $tcl_header_dir])
else
   AC_MSG_ERROR([can't find tcl.h try using --with-tcl-header-dir to help me])
fi

#  Tcl libraries:
#     We look for the following:
#      /usr/lib/libtcl.a           - Usually a link to a default lib.
#      /usr/lib/libtcl<version>.a  - version of tcl from tcl_versions
#      /usr/local/lib/libtcl.a     - As above but installed from source.
#      /usr/local/lib<version>.a   - As Above but installed from source.
#      If --with-tcl-libdir=dir      is supplied, that directory is 
#                                    searched first.
# ASSUMPTIONS:  libtcl and libtk will have the same naming conventions.
#

tcl_libsearchpath=""
tcl_libfound="no"
AC_MSG_CHECKING([Tcl/Tk library to use])

	# Does the user want us to look somewhere in particular:

AC_ARG_WITH(tcl-libdir,
	[  --with-tcl-libdir=dir Specify where the tcl libraries live.],
	[tcl_libsearchpath=$withval])

tcl_libsearchpath="$tcl_libsearchpath /usr/lib /usr/local/lib"

tcl_libfiles=libtcl.a

for v in ${tcl_versions}
do
   tcl_libfiles="$tcl_libfiles libtcl${v}.a"
   tcl_libfiles="$tcl_libfiles libtcl${v}.so"
done


for dir in ${tcl_libsearchpath} 
do
  for file in ${tcl_libfiles}
  do
    fname=$dir/$file
    if test $tcl_libfound == "no" 
    then
      AC_CHECK_FILE($fname,
	[tcl_libdir=$dir
         tcl_libname=$file
	 tcl_libfound="yes"
	])
    fi
  done
done

if test $tcl_libfound == "yes"
then
  # Find the lib basename:

  tcl_libname=$(echo $tcl_libname|cut -c 4- )  # trim off lib 
  #
  #  Use basename to trim of the .a or .so:
  #

  tcl_libname=$(basename $(basename $tcl_libname .a) .so)
  echo tcl libname $tcl_libname



  tk_libname=tk$(echo $tcl_libname|cut -c 4-)   # trim off tc...and use tk

  TCL_LDFLAGS="-L${tcl_libdir} -l${tk_libname}  -l${tcl_libname}"

else
  AC_MSG_ERROR([Unable to find the tcl library, help me out with --with-tcl-libdir])
fi

#   Figure out SMP flag (needed by the btdriver build).

AC_MSG_CHECKING([for smp system (btdriver)])

if (uname -v |grep -q SMP)
then
  SMP_FLAG="-D__SMP__"
  AC_MSG_RESULT([System runs the SMP kernel])
else
  SMP_FLAG=""
  AC_MSG_RESULT([System is not running an SMP kernel])
fi

AC_MSG_CHECKING([ for VME device ])
#   VMEDEVICE  - The name of the selected api.
#

#  Default to SBSBit3 but allow
#    --with-vme-interface={sbs|wiener|none}
#

# Default interface is sbs.

vmeinterface="sbs"

#  Process -with-vme-interface if there.

AC_ARG_WITH(vme-interface,
	[--with-vme-interface=sbs|wiener|wienerusb|none - Choose VME interface],
	vmeinterface="$withval")


#  Figure out where the linux kernel headers are.
#  We'll look for  $(HEADERS)/linux/module.h  in the following spots:
#  - /usr/src/kernel-headers-$(uname -r)/include  [debian]
#  - /usr/src/linux-$(uname-r)/include            [redhat]
#  - /usr/src/linux/include                       [old? redhat]
#  -  Where the user tells us with --with-kernel-headers=value.


if test  "$kernel_version" == "2.4"
then

# 2.4 kernels need kernel headers installed:

AC_MSG_CHECKING([for kernel headers (.../linux/module.h)])

AC_ARG_WITH(kernel-headers,
	[--with-kernel-headers=location of linux kernel headers],
	[KERNEL_INCS="-I$withval"],[KERNEL_INCS="-"])

if test $KERNEL_INCS = "-" ; then
  AC_CHECK_FILE(/usr/src/kernel-headers-$(uname -r)/include/linux/module.h,
    [KERNEL_INCS="-I/usr/src/kernel-headers-$(uname -r)/include"])
fi

if test $KERNEL_INCS = "-" ; then
  AC_CHECK_FILE(/usr/src/linux-$(uname -r)/include/linux/module.h,
      [KERNEL_INCS="-I/usr/src/linux-$(uname -r)/include"])
fi

if test $KERNEL_INCS = "-" ; then
  AC_CHECK_FILE(/usr/src/linux/include/linux/module.h,
      [KERNEL_INCS="-I/usr/src/linux-$(uname -r)/include"])
fi

if test $KERNEL_INCS = "-"; then
	AC_MSG_ERROR([Could not find kernel headers. Try the --with-kernel-headers switch])
fi

else
	# More recently we actually need the kernel sources installed.


	AC_MSG_CHECKING([for kernel sources ])
	AC_ARG_WITH(kernel-sources,
	[--with-kernel-sources=location of configured kernel sources],
	[KERNEL_SRC="$withval"],[KERNEL_SRC=""])

	for dir in /usr/src/kernel-source-${kernel_full_version} /usr/src/linux-${kernel_full_version}
	do
		if test -d $dir -a "$KERNEL_SRC" == ""
		then
			KERNEL_SRC="$dir"
			AC_MSG_RESULT([Found in $KERNEL_SRC])
		fi
	done
	if test "$KERNEL_SRC" == ""
	then
		AC_MSG_ERROR([Could not find kernel source dir. help me out using --with-kernel-sources])
	fi
fi


# VMEDEVICE         - Which device it is.
# VMELIBRARYHEADERS - Where the headers will live for vme lib.
# VMELIBRARY        - ld switches neede to use VME.
# DEPENDSON_VME     - Space separated list of directories that
#                     require that specific type of VME interface
#                     to build (try to keep this number small!!).
# SEPARABLELOCK     - Locking if the 'default' locking is good enough
#                     for this interface.

case "$vmeinterface" in
     sbs)
	VMEDEVICE="SBSBIT3"

	    # Definitions require to build us:
	   
	#  We can support 2.4 and 2.6 kernel builds but they're done
	#  differently:
	#


	VMELIBRARYHEADERS="-I\$(prefix)/include"
	VMELIBRARY="-L\$(prefix)/lib -lbtp -lpthread"
	AC_DEFINE(HAVE_SBSVME_INTERFACE,"1",[VME interface is sbs/bit3])
	AC_DEFINE(HAVE_VME_MAPPING, "1",[VME interface capable of mmap(2)])
	DEPENDSON_VME="PowerCheck"
	SEPERABLELOCK="Locking"

	case  $kernel_version in 
	 2.4)
 
	    # Definitions require to build us:

	    VME_DRIVERDIR="btdriver"
	    VMEBUILDHEADERS="-I$(pwd)/btdriver/include"
	    VMEBUILDLIBS="-L$(pwd)/btdriver/lib -lbtp -lpthread"
						
            # Build/install the 2.4 driver (you must be root).

	    (cd btdriver; \
	    ./configure --prefix=$prefix;\
	    make clean;                  \
	    make KERNEL_INCS=${KERNEL_INCS} SMP=${SMP_FLAG}; \
	    make install SMP=${SMP_FLAG} KERNEL_INCS=${KERNEL_INCS})
	   
	    ;;
	 2.6)
	    VME_DRIVERDIR="btdriver2.6"
	    VMEBUILDHEADERS=-I$(pwd)/btdriver2.6/include
	    VMEBUILDLIBS="-L$(pwd)/btdriver2.6/lib -lbtp -lpthread"

	    # build/install the 2.6 driver (you must be root)

	    (cd btdriver2.6;./configure --prefix=$prefix;make clean;make; make -k install)
	    ;;
	*)
	    AC_MSG_ERROR([SBS bit3 driver can only be built on 2.4 or 2.6 kernel this is $kernel_version])
	    ;;
        esac
     ;;
     wiener) 
	#  Can only build on 2.4 kernel at this time:

	if test "$kernel_version" != "2.4"
        then
	   AC_MSG_ERROR([Wiener support can only be built on the 2.4 kernel this is $kernel_version])
        fi

	VMEDEVICE="WIENER"
	    # Definitions for the build: Static link and driver has no mmap support.

	VME_DRIVERDIR="wienerdriver"
	VMEBUILDHEADERS="-I$(pwd)/wienerdriver/lib"
	VMEBUILDLIBS="-L$(pwd)/wienerdriver/lib -lpcivme"

	# Definitions written into the user skeleton makefiles:

	VMELIBRARYHEADERS="-I\$(prefix)/include"
	VMELIBRARY="-L\$(prefix)/lib -lpcivme"
	DEPENDSON_VME=""
	SEPERABLELOCK="Locking"	
	AC_DEFINE(HAVE_WIENERVME_INTERFACE,"1",[VME Interface is Wiener])

     ;;
     wienerusb)
        # lib usb is kernel independent as far as I know.

	VMEDEVICE="WIENERUSB"
	VME_DRIVERDIR=""
	VMEBUILDHEADERS=""
	VMEBUILDLIBS="-lusb"

	# Definitions written to the build skeletons

	VMELIBRARYHEADERS=""
	VMELIBRARY="-lusb"
	DEPENDSON_VME=""
	SEPERABLELOCK="NullLock"
	AC_DEFINE(HAVE_WIENERUSBVME_INTERFACE,"1",[VME interfaces is WienerUSB])

     ;;
     none)
	VMEDEVICE="NULL"
	VME_DRIVERDIR=""
	VMEBUILDHEADERS=""
	VMEBUILDLIBS=""

	#  Definitions written into the user skeleton makefiles:

	VMELIBRARYHEADERS=""
	VMELIBRARY=""
	DEPENDSON_VME=""
	SEPERABLELOCK="NullLock"

	AC_DEFINE(HAVE_NOVME_INTERFACE, "1",[No VME interface selected])

     ;;
     *)
     AC_MSG_ERROR([Invalid vme interface type $vmeinterface valid values are sbs, wiener or none])
     ;;
esac


AC_MSG_RESULT([$VMEDEVICE])

#   CAMAC defaults to CESCAMAC but can be overidden via --with-camac=VC32CAMAC

CAMAC="-DCESCAMAC"
AC_ARG_WITH(camac,
       [ --with-camac=interface - specify the camac interfce (e.g. VC32CAMAC)],
	CAMAC="-D$withval",[])

#  X11 libraries 

X11INCS="${X_CFLAGS}"
X11LIBS="${X_LIBS} ${X_EXTRA_LIBS} -lXm -lXt -lX11"

#  To run latex on hyperlatex documentation, we need all of the  following:
#  Latex, dvips, kpathsea and the existence of hyperlatex.sty findable by
#  kpathsea:
#
if test $HAVELATEX = "yes" -a $HAVEDVIPS = "yes" -a \
	$HAVEKPATHSEA = "yes" -a $HYPERLATEX != "echo"
then
	stylefile=$(kpsewhich hyperlatex.sty)
	if test "$stylefile" != ""
	then
	   AC_PATH_PROG(LATEX, latex)
	   AC_PATH_PROG(DVIPS, dvips)
	else
	   LATEX="echo"
	   DVIPS="echo"
	fi
fi





#
#   Look for epics in:
#    /usr/local/epics
#    /opt/epics
#    /soft/intel/epics   [nscl].
#    --with-epics-rootdir=
# Underneath that we have (we require intel linux remember):
#    include                  - the include directory
#    include/os/linux-x86     - os specific includes.
#    lib/linux-x86            - libs
#    bin/linux-x86/caRepeater - The caRepeater program.
#

epicstestdirs="/usr/local/epics /opt/epics /soft/intel/epics"
haveepics="no"

AC_MSG_CHECKING([ for epics includes, libs and binaries])

#  Check for --with-epics-rootdir....

AC_ARG_WITH(epics-rootdir,
	[  --with-epics-rootdir=top level directory of EPICS install],
	[haveepics="yes"
	 epicsroot="$withval"],
	[haveepics="no"])



if test $haveepics == "no"
then
   for dir in $epicstestdirs
   do
      if test $haveepics == "no"
      then
        AC_CHECK_FILE([${dir}/include/cadef.h],
	              [haveepics="yes"
                       epicsroot=$dir])
      fi
   done
fi

#  If we found epics we can build the software that needs it.
#  otherwise it's optional.

if test $haveepics == "yes"
then
	# Have epics:

   EPICSSOFTWARE="controlpush epicsdisplay chanlog" # Add these directories to build.
   EPICS_INCLUDES="-I$epicsroot/include -I$epicsroot/include/os/Linux"
   EPICS_LDFLAGS="-L$epicsroot/lib/linux-x86 -lca -Wl,\"-rpath=$epicsroot/lib/linux-x86\""
   EPICS_BIN="-DEPICS_BIN=\"\\\"$epicsroot/bin/linux-x86\\\"\""
else
	# No epics.. provide blank variables:

   EPICSSOFTWARE=""	# no directories to add to make.
   EPICS_LDFLAGS=""	# No ldflags.	
   EPICS_INCLUDES=""	# No includes.
   EPICS_BIN=""
fi


#  We now look for cppunit.  This is needed to build c++ tests
#  If it is available, we'll define the following:
#  CPPUNIT   - Indicating to the Makefiles to enable building the tests.
#  CPPUNIT_INCLUDES - Any switches needed at compile time for cppunit.
#  CPPUNIT_LDFLAGS  - Any switches needed at link time for cppunit.
#
#

AC_ARG_ENABLE(cppunit,
		AS_HELP_STRING([--enable-cppunit],[build cppunit based tests]),
		[havecppunit="check"], [havecppunit="no"])

if test "$havecppunit" != "no" 
then
	AC_LANG_PUSH(C++)
	AC_MSG_CHECKING([for cppunit unit testing framework])

	AC_CHECK_HEADERS([cppunit/Test.h], [havecppunit="yes"], [havecppunit="no"])
	AC_MSG_RESULT([$havecppunit])
	if test "$havecppunit" == "yes"
	then
		CPPUNIT_INCLUDES=""
		CPPUNIT_LDFLAGS="-lcppunit"
		AC_SUBST(CPPUNIT_INCLUDES)
		AC_SUBST(CPPUNIT_LDFLAGS)
         fi
AC_LANG_POP(C++)
fi

AM_CONDITIONAL(CPPUNIT, test $havecppunit == "yes")

# define substitutions:

#  Go for a strict linguistic interpretation:

#       CXXFLAGS="-std=c++98 -pedantic"

#   someday:   AC_SUBST(CXXFLAGS)

	# EPICS if it exists.

AC_SUBST(EPICSSOFTWARE)
AC_SUBST(EPICS_LDFLAGS)
AC_SUBST(EPICS_INCLUDES)
AC_SUBST(EPICS_BIN)

	# Spectrodaq:

AC_SUBST(spdaqlite_conf_dir)
AC_SUBST(SPECTRODAQ_FLAGS)
AC_SUBST(SPECTRODAQ_LDFLAGS)

	# tcl/tk

AC_SUBST(TCL_FLAGS)
AC_SUBST(TCL_LDFLAGS)
AC_SUBST(TCLSH_CMD)


	# VME device:


AC_SUBST(VMEDEVICE)
AC_SUBST(VME_DRIVERDIR)
AC_SUBST(VMELIBRARY)
AC_SUBST(VMELIBRARYHEADERS)
AC_SUBST(VMEBUILDHEADERS)
AC_SUBST(VMEBUILDLIBS)
AC_SUBST(DEPENDSON_VME)
AC_SUBST(SEPERABLELOCK)

	# CAMAC device:

AC_SUBST(CAMAC)

	# X11: 

AC_SUBST(X11LIBS)
AC_SUBST(X11INCS)

	# DOXYGEN

AC_SUBST(DOXYGEN)

	# Hyperlatex:

AC_SUBST(HYPERLATEX)
AC_SUBST(LATEX)
AC_SUBST(DVIPS)

#   Linux kernel headers:

AC_SUBST(KERNEL_INCS)

#   Kernel type (SMP or not)

AC_SUBST(SMP_FLAG)


#   The base part of the .so version:

AC_SUBST(SOVERSION)

# Documentation tools

AC_SUBST(HCDOCBOOK)
AC_SUBST(DVIPDF)
AC_SUBST(MANDOCBOOK)
AC_SUBST(HTMLDOCBOOK)

#  Create output files:

AC_OUTPUT( Makefile SpectrodaqLite/Makefile tcllib/Makefile \
	   Headers/Makefile CopyrightTools/Makefile \
	Exception/Makefile PortManager/Makefile \
	TCL/Makefile Security/Makefile Ftp/Makefile \
	VMEApi/Makefile cvt/Makefile \
	SpecTclOnline/Makefile DeviceSupport/Makefile \
	HPReadout/Makefile \
	Readout/Makefile diskrun/Makefile \
	EventLog/Makefile  Scaler/Makefile contrib/Makefile \
	contrib/lecroy/Makefile contrib/whedco/Makefile \
	contrib/caenv812/Makefile contrib/scriptedReadout/Makefile \
	contrib/hpscriptedReadout/Makefile \
	contrib/scalerdisplay/Makefile contrib/N568Panel/Makefile \
	contrib/vhqpanel/Makefile \
	vmetcl/Makefile \
	vmetcl/camactcl/Makefile vmetcl/vhq202m/Makefile bufdump/Makefile \
	TclServer/Makefile bcnaf/Makefile TcpHoister/Makefile \
	Stager/InstallRoot.tcl Stager/Makefile \
	Scripts/Makefile framework/Makefile AlarmDisplay/Makefile \
	LogDisplay/Makefile ProductionReadout/Makefile \
	ProductionReadout/hyperlatex/Makefile \
	ProductionReadout/direct/Makefile    \
	ProductionReadout/HP/Makefile \
	btdriver/Makefile btdriver/dd/Makefile btdriver/lib/Makefile \
	btdriver/include/Makefile  \
	controlpush/Makefile  dvdburn/Makefile epicsdisplay/Makefile \
	epicsdisplay/epicsdisplay chanlog/Makefile \
	daqstart/Makefile ScalerDisplay/Makefile ScalerDisplay/ScalerDisplay \
	wienerdriver/Makefile wienerdriver/driver/Makefile \
	wienerdriver/lib/Makefile PowerCheck/Makefile \
	wienerusbd/Makefile \
	slowControls/Makefile slowControls/caenv812/Makefile \
	slowControls/n568b/Makefile slowControls/vhq/Makefile \
	slowControls/widgets/Makefile sequencer/Makefile)
