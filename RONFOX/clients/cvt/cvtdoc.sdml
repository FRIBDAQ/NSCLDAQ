<Comment>  DEC/CMS REPLACEMENT HISTORY, Element CVTDOC.SDML <Endcomment>
<Comment>  *1    21-FEB-1992 16:16:33 FOX "Documentation for integer conversion routines." <Endcomment>
<Comment>  DEC/CMS REPLACEMENT HISTORY, Element CVTDOC.SDML <Endcomment>

<FRONT_MATTER>

<TITLE_PAGE>
<title>(Integer conversion library (LIBCVT)\Ron Fox\February 20, 1992)
<ABSTRACT>(Abstract)
Support functions which convert integer data representations between the formats
of various computers.
<ENDABSTRACT>
<ENDTITLE_PAGE>
<ENDFRONT_MATTER>
<CHAPTER>(Introduction)
<P>
     As nuclear physicists are increasingly confronted with a multi
vendor computing environment, one of the problems which must be
solved is that of the difference between binary representation from
system to system.  LIBCVT is a set of very low level routines which
allow the programmer to:
<LIST>(UNNUMBERED)
<LE>Given a set of signature bytes in a foreign computer's
          internal order, derive some tables which describe how to
          compensate for byte order differences between the foreign
          computer and the host.
<LE>Given conversion tables, determine if a foreign system's
          byte order is the same as the host that the program is
          running on.
<LE>Given a set of conversion tables, convert words and
          longwords from host to foreign byte order or from foreign
          to host byte order.
<ENDLIST>
<HEAD1>(Notation and definitions)
<P>
     The following terminology is used in this document:
<GLOSSARY>(Glossary\terms)
<GTERM>(Foreign) <GDEF>(The system providing data which requires conversion.)
<GTERM>(Host) <GDEF>(The system on which the program using LIBCVT is
          executing.)
<GTERM>(LIBCVT) <GDEF>(Refers to the set of functions that are documented in
          this guide.)
<ENDGLOSSARY>
<P>
In a few places, we list examples of computer/programmer dialogue. 
In these cases, the text in <EMPHASIS>(this\ITALIC) font is produced by the computer,
while the text which looks like <Emphasis>(this\bold)
is produced by the programmer.
<chapter>(Using LIBCVT)
<P>
This chapter describes how to prepare programs which use the
LIBCVT.  In this section we describe:
<LIST>(UNNUMBERED)
<LE>How to compile programs in FORTRAN or C which make use
          of LIBCVT and run on VAX/VMS
<LE>How to link programs in FORTRAN or C which make use of
          LIBCVT and run on ULTRIX.
<ENDLIST>
<HEAD1>(Compiling for VAX/VMS)
<P>
     This section describes what you need to do to compile program
units which make calls to LIBCVT and run on VAX/VMS.  We will
describe how to compile both C and Fortran clients of LIBCVT.
<P>
     C clients program units should include the daqcvt.h header
file in their program source.  This is done by inserting a line of
the form:
<CODE_EXAMPLE>

#include <daqcvt.h>

<ENDCODE_EXAMPLE>
<P>
near the top of your program units.  When compiling modules that
make use of this include file it is necessary to extend the set of
directories that are searched for library include files.  This is
done using the /INCLUDE command qualifier on the CC command.  The
daqcvt.h header file is located in DAQ_INCLUDE:.  The line is a
sample compilation line for the file PROGRAM.C:
<CODE_EXAMPLE>

<emphasis>(Vax>\italic) <emphasis>(CC/INCLUDE=DAQ_INCLUDE:  PROGRAM\bold)

<ENDCODE_Example>
<P>
     The file DAQ_INCLUDE:DAQCVT.FOR defines some data structures
and constants which may be needed by program units that call
LIBCVT.  In addition, DAQCVT.FOR declares the return value types
of all the functions that make up LIBCVT.  Therefore, it is a good
idea to include this file in Main programs, subroutines or
functions which call LIBCVT.
<P>   
  DAQCVT.FOR can be included into a FORTRAN program unit using
the FORTRAN INCLUDE statement. For example:
<code_example>

      INCLUDE 'DAQ_INCLUDE:DAQCVT.FOR'

<endcode_example>
<P>
     It should be noted that this file is located in a different
place on UNIX systems.  It may be easier, therefore, to transport
your programs from VMS to UNIX and back if you create a local
include file which in turn includes DAQCVT.FOR.  Then to move from
system to system you only need to change the value of this
intermediate include file.

<head1>(Compiling for UNIX)
<P>
     This section describes how to compile programs which make use
of LIBCVT functions and will run on UNIX.  We will describe how to
compile both FORTRAN and C program units.
<P>
     C program file which call LIBCVT should always include the
header file daqcvt.h . This file contains type definitions and
function prototypes for all the exported functions in the library.
<P>
The line:
<code_example>

#include <daqcvt.h>

<endcode_example>
<P>
should be placed in the C source file close to top of the file.
<P>
     When compiling C program files, it is necessary to tell the
compiler to extend it's search of directories containing library
header files to include the directory (/daq/include) containing
daqcvt.h.  This is done using the -I option on the cc command line. 
<P>
For example:
<code_example>

<emphasis>(Ultrix>\italic) <emphasis>(cc -O -I/daq/include -c cvttest.c\bold)

<endcode_example>
<P>
Compiles the file cvttest.c searching the directory /daq/include
for the daqcvt.h header file.  Optimization is enabled (-O), and
the compiler does not attempt to link the file (-c) after
compilation.
<P>
     The include file /daq/include/daqcvt.for contains constant and
type declarations for LIBCVT.  In addition, the return types for
all of the functions are defined here.  It is therefore recommended
that programmers which are using LIBCVT from FORTRAN include this
file in all main programs, subroutines and functions which contain
calls to LIBCVT.  This is done as follows:
<code_example>

       INCLUDE '/daq/include/daqcvt.for'

<endcode_example>
<P>
  Note that the format of this INCLUDE directive is different than
the one used for VAX/VMS.  Therefore, we suggest that you create
a local include file DAQCVT.FOR which in turn includes daqcvt.for
from the appropriate location.  If you then include this local
include file, you will only have to change the contents of the
local include file when transporting your software between VMS and
UNIX.
<P>  
     You can compile you program using the f77 command. No special
options are required.  E.g:

<code_example>

<emphasis>(Ultrix>\italic) <emphasis>(f77 -c demo.for\bold)

<endcode_example>
<P>
Compiles demo.for producing the object (not yet linked) file demo.o
<head1>(Linking for VMS)
<P>
     How you link software for VMS depends on whether or not the
main program is in C or FORTRAN.  If you have a C main program,
then you should use a link command line of the form:
<code_example>

<Emphasis>(Vax>\italic) <emphasis>(LINK MYPROGRAM, -
          DAQ_LIB:LIBCVT/LIB,SYS$LIBRARY:CRTLIB/OPT\bold)

<endcode_example>
<P>
If your main program unit is in FORTRAN, you also must link in the
C run time library initializer:

<code_example>

<emphasis>(Vax>\italic) <emphasis>(LINK MYPROGRAM, DAQ_LIB:LIBCVT/LIB,-
           DAQ_LIB:CINIT, SYS$LIBRARY:CRTLIB/OPT\bold)

<endcode_example>


<head1>(Linking for UNIX)
<P>
     Linking programs which use LIBCVT under UNIX is the same
whether your program was in FORTRAN or C:

<code_example>

<emphasis>(Ultrix>\italic) <emphasis>(ld -L/daq/lib -o mypgm  mypgm.o -lcvt\bold)

<endcode_example>
<P>
The line above links mypgm.o with LIBCVT and produces an executable
file called mypgm.


<chapter>(LIBCVT function reference)
<P>
     This section describes the functions and subroutines which
make up the LIBCVT conversion package.  The description of the
FORTRAN and C callable routines are given together.

<ROUTINE_SECTION>(\\newpage)
<ROUTINE>(f77ftohl, ftohl\Convert longwords from foreign to host format)

<OVERVIEW>
Converts a longword from the format of a foreign system
          to the format of the local host.
<ENDOVERVIEW>

<FORMAT>

Call:     longword = f77ftohl(Conversion, datum)
          longword =    ftohl(Conversion, datum)
<FFUNC>(longword = \f77ftohl\(Conversion, datum))
<FFUNC>(longword = \   ftohl\(Conversion, datum))
<ENDFORMAT>

<RETURNS>(HEADONLY) <RETTEXT>
		    The <ARGUMENT>(datum) longword in host format.
		    <ENDRETTEXT>

<ARGDEFLIST>
<ARGITEM>(Conversion\DaqConversion (C) or RECORD/DAQCONVERSION/ (F77)\
		     structure\
		     readonly\
		     reference)  <ARGDEF>For C is a DaqConversion passed by
				    reference.  For Fortran, is a
				    RECORD/DaqConversion/ passed by
				    reference. This argument is a
				    Conversion Data block which describes
				    how to convert data between host and
				    foreign byte orderings.
<ARGITEM>(datum\input longword\
		longword\
		readonly\
		value(C) reference(f77))  <ARGDEF>This is a longword value in
		foreign format which will be converted to host format.
<ENDARGDEFLIST>

<DESCRIPTION>
These routines take a conversion description block and use it
     to translate a longword from the internal format of a foreign
     host to the internal format of the local host.  The conversion
     description block must be produced by calling makecvtblock.
<ENDDESCRIPTION>
<ROUTINE>(f77ftohw, ftohw\Convert words from foreign format to host format)

<OVERVIEW>
Convert words to host format
<ENDOVERVIEW>

<FORMAT>
<FFUNC>(longword = \f77ftohw\(Conversion, datum))
<FFUNC>(longword =\    ftohw\(Conversion, datum))
<ENDFORMAT>

<RETURNS>(HEADONLY) <RETTEXT>
		    The <ARGUMENT>(datum) argument converted from foreign to
		    local host representation
		    <ENDRETTEXT>

<ARGDEFLIST>
<ARGITEM>(Conversion\DaqConversion(C) RECORD/DAQCONVERSION/(f77)\
		     Structure\
		     readonly
		     reference)  <ARGDEF>Conversion control block whic describes
		     how to convert data from foreign to host representation.
<ARGITEM>(datum\input data item\
		longword\
		readonly\
		value (C) reference(f77))  <ARGDEF>This data in foreign longword
		format is converted to host longword format.
<ENDARGDEFLIST>

<DESCRIPTION>
     This function uses the Conversion argument to describe how to
     convert the word data from a foreign byte ordering to the
     host's byte ordering.   Conversion is returned by a call to
     the routine makecvtblock.
<ENDDESCRIPTION>
<ROUTINE>(f77hostsameasforeign, hostsameasforeign\Check for identity transform)

<OVERVIEW>
Determines if the host to foreign and foreign to host byte order transformations
are identity.
<ENDOVERVIEW>

<FORMAT>
<FFUNC>(issame = \f77hostsameasforeign\(Conversion))
<FFUNC>(issame =\    hostsameasforeign\(Conversion))
<ENDFORMAT>

<RETURNS>(HEADONLY) <RETTEXT>
		    Returns .TRUE.(f77) or nonzero (C) if the
		    <ARGUMENT>(Conversion) argument specifies that there is no
		    need to re-order bytes between the foreign and host
		    machines.
		    <ENDRETTEXT>

<ARGDEFLIST>
<ARGITEM>(Conversion\Conversion block\
		     structure\
		     readonly\
		     reference)  <ARGDEF>A conversion block which describes the
		     differences in byte ordering between the host and the
		     foreign system.
<ENDARGDEFLIST>

<DESCRIPTION>
     This function analyzes the Conversion argument.  If Conversion
     describes the identity transformation for conversions between
     host and foreign byte orders for longwords and words, then the
     function returns true.  If the transformation is not unity,
     then the return value is false. Conversion is a conversion
     description block which is returned by calls to
     <emphasis>(makecvtblock\bold).
<ENDDESCRIPTION>
<ROUTINE>(f77makecvtblock, makecvtblock\Creates a conversion data block)

<OVERVIEW>
Creates a datablock describing the differences in host and foreign byte
orderings.
<ENDOVERVIEW>

<FORMAT>
<FFUNC>(CALL\ f77makecvtblock\(lsig, ssig, conversion))
<FFUNC>(         makecvtblock\(lsig, ssig, conversion))
<ENDFORMAT>

<ARGDEFLIST>
<ARGITEM>(lsig\Signature\
	       longword\
	       readonly\
	       value(C) reference(f77))  <ARGDEF>Longword signature of the byte
	       ordering of the foreign machine.  This is the value 0x01020304
	       expressed in the byte ordering of the host system.
<ARGITEM>(ssig\Signature\
	       word\
	       readonly\
	       value(C) reference(f77))  <ARGDEF>Word signature of the byte
	       ordering of the foreign machine.  This is the value 0x0102
	       expressed in the byte ordering of the host system.
<argitem>(conversion\Conversion data block\
	  structure\
	  readonly\
	  reference)	<argdef> Returned containing a table describing the
	  mappings between bytes in the foreign system and bytes in the host
	  system.
<ENDARGDEFLIST>

<DESCRIPTION>
This function takes a pair of signatures of the foreign system byte ordering and
deduces mapping tables which describe how to convert longwords and words
bidirectionally between host and foreign system.  These mapping tables are
intended to be used as inputs to the other routines LIBCVT.
<P>
C programmers should declare the <ARGUMENT>(Conversion) argument to be type
<EMPHASIS>(DaqConversion\bold).  Fortran programmers should declare this
argument to be a <EMPHASIS>(RECORD/DAQCONVERSION/\BOLD).
<P>
The longword signature is the value 0x01020304 expressed in the byte ordering of
the foreign system.  A short signature is the value 0x0102 expressed in the byte
ordering of the foreign system.  The best way to get these signatures is to have
them sent to you by the foreign system.  For example, if you have a networked
application passing binary data around, one of the first things that you can do
as you establish a connection is to exchange signatures.  As a more concrete
example, the NSCL portable
binary file library, includes the signatures of the system which created the
file as part of the file header.
<ENDDESCRIPTION>
<ROUTINE>(f77htofl, htofl\Convert longwords host to foreign)

<OVERVIEW>
Converts longwords between host format and foreign format.
<ENDOVERVIEW>

<FORMAT>
<FFUNC>(longword = \f77htofl\(Conversion, datum))
<FFUNC>(longword = \   htofl\(Conversion, datum))
<ENDFORMAT>

<RETURNS>(HEADONLY) <RETTEXT>
		    The conversion of the <ARGUMENT>(datum) argument in foreign
		    host byte order.
		    <ENDRETTEXT>

<ARGDEFLIST>
<ARGITEM>(Conversion\Conversion block\
		     structure\
		     readonly\
		     reference)  <ARGDEF>Data block describing the byte order
		     mapping between foreign and host machine.
<ARGITEM>(datum\input data\
		longword\
		readonly\
		value(C) reference(f77))  <ARGDEF>Input datum which is expressed
		in host byte ordering and will be converted to foreign byte
		ordering.
<ENDARGDEFLIST>

<DESCRIPTION>
     This function converts a longword from local host byte
     ordering to foreign byte ordering.  The conversion is driven
     by the <argument>(Conversion) argument which describes how to do the conversion.
<ENDDESCRIPTION>
<ROUTINE>(f77htofw, htofw\Convert words from host to foreign)

<OVERVIEW>
Converts words from host byte ordering to foreign byte ordering.
<ENDOVERVIEW>

<FORMAT>
<FFUNC>(word = \f77htofw\(Conversion, datum))
<FFUNC>(word = \   htofw\(Conversion, datum))
<ENDFORMAT>

<RETURNS>(HEADONLY) <RETTEXT>
		    Word expressed in the byte ordering of the foreign system.
		    <ENDRETTEXT>

<ARGDEFLIST>
<ARGITEM>(Conversion\Conversion block\
		     structure\ 
		     readonly\
		     reference)  <ARGDEF>A conversion control block which
		     describes how to convert between host and foreign formats.
<ARGITEM>(datum\input data\
		word\
		readonly\
		value(C) reference(f77))  <ARGDEF>Data word in host format which
		will be converted to foreign format.
<ENDARGDEFLIST>

<DESCRIPTION>
This function converts the <ARGUMENT>(datum) word from host to foreign byte
ordering.  This conversion is driven by the contents of the
<ARGUMENT>(Conversion) argument which describes the mapping between foreign and
host bytes.
<ENDDESCRIPTION>
<ENDROUTINE_SECTION>
