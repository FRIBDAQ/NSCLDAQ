'\"
'\" Copyright (c) 2005 Michigan State University All Rights Reserved
'\"  Licensed under the GPL.  See http://www.gnu.org/licenses/gpl.txt
'\"  terms and conditions.
'\"
'\" The definitions below are for supplemental macros used in Tcl/Tk
'\" manual entries.
'\"
'\" .AP type name in/out ?indent?
'\"	Start paragraph describing an argument to a library procedure.
'\"	type is type of argument (int, etc.), in/out is either "in", "out",
'\"	or "in/out" to describe whether procedure reads or modifies arg,
'\"	and indent is equivalent to second arg of .IP (shouldn't ever be
'\"	needed;  use .AS below instead)
'\"
'\" .AS ?type? ?name?
'\"	Give maximum sizes of arguments for setting tab stops.  Type and
'\"	name are examples of largest possible arguments that will be passed
'\"	to .AP later.  If args are omitted, default tab stops are used.
'\"
'\" .BS
'\"	Start box enclosure.  From here until next .BE, everything will be
'\"	enclosed in one large box.
'\"
'\" .BE
'\"	End of box enclosure.
'\"
'\" .CS
'\"	Begin code excerpt.
'\"
'\" .CE
'\"	End code excerpt.
'\"
'\" .VS ?version? ?br?
'\"	Begin vertical sidebar, for use in marking newly-changed parts
'\"	of man pages.  The first argument is ignored and used for recording
'\"	the version when the .VS was added, so that the sidebars can be
'\"	found and removed when they reach a certain age.  If another argument
'\"	is present, then a line break is forced before starting the sidebar.
'\"
'\" .VE
'\"	End of vertical sidebar.
'\"
'\" .DS
'\"	Begin an indented unfilled display.
'\"
'\" .DE
'\"	End of indented unfilled display.
'\"
'\" .SO
'\"	Start of list of standard options for a Tk widget.  The
'\"	options follow on successive lines, in four columns separated
'\"	by tabs.
'\"
'\" .SE
'\"	End of list of standard options for a Tk widget.
'\"
'\" .OP cmdName dbName dbClass
'\"	Start of description of a specific option.  cmdName gives the
'\"	option's name as specified in the class command, dbName gives
'\"	the option's name in the option database, and dbClass gives
'\"	the option's class in the option database.
'\"
'\" .UL arg1 arg2
'\"	Print arg1 underlined, then print arg2 normally.
'\"
'\" RCS: @(#) $Id$
'\"
'\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp
..
'\"	# SO - start of list of standard options
.de SO
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
'\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\fBoptions\\fR manual entry for details on the standard options.
..
'\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
'\"    # MO -- Model description.
.de MD
.LP
.nf
.ta 4c
Model Name        :   \\fB\\$1\\fR
Max Voltage       :   \\$2 Volts
Max Current       :   \\$3 milli\\-Amps
Current Resolution:   \\$4 mciro\\-Amps
.fi
.IP
..


'\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
'\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.de UL
\\$1\l'|0\(ul'\\$2
..
.TH vhqPanel 3 "" Tcl "NSCLDAQ Tcl Support"
.BS
'\" Note:  do not modify the .SH NAME line immediately below!
.SH NAME
vhqPanel \- vhq 2xx control panel megawidget
.SH SYNOPSIS
\fBvhqPanel\fI \fR?\fIoption option ...\fR?
.BE
.SH "WIDGET-SPECIFIC OPTIONS"
.OP -name "" ""
Provides a name for the module that is meaningful to the user.
The name is displayed on the megawidget.
.OP -crate "" ""
Provides the number of the VME crate in which the VHQ module controlled
by this widget lives. Defaults to 0 if not supplied.
.OP -base "" ""
Provides the module base address within the VME crate.
.OP -command "" ""
Provides a script to be executed when the state of the
module is changed significantly by the user.  See
\fBCOMMAND SCRIPTS\fR below for more information about
this.
.OP -alarmscript "" ""
Provides a script to be executed when an alarm condition
occurs or is cleared.  See \fBALARM SCRIPTS\fR below for more information
about alarm scripts.
.OP -model "" ""
Provides the model  of the device.  See \fBSUPPORTED MODELS\fR below
for more information about the model.  If not supplied, this defaults to
202M.
.OP -rampspeed "" ""
Provides a 2 element list of chanel ramp speeds in Volts/Second.  The first
element will be the ramp speed for channel A, the second the ramp speed for channel B.
If not supplied both speeds default to 10 Volts/second
.OP -ilimit "" ""
Provides a 2 element list of soft current limits for the channels in
micro\-Amps.  The first element of the list is the current limit for channel A,
the second for channel B.
element is the limit for channel B.  When the current sourced by a channel exceeds
either this or the hard limit set on the device's front panel, a current limit alarm
trip is performed and the voltage is set to zero by the hardware.
If not supplied this defaulst to 50 micro\-Amps for both channels.
.SH DESCRIPTION
.PP
The megawidget provides readouts for the actual current and voltage
of each channel.  In addition, two spinboxes allow the user to set
voltage targets for each channel.  Each channel has a \fBRamp\fR button
that initiates a ramp to that channel's target.  Each channel has an \fBOff\fR button
that initiates a top speed ramp to 0 volts.
.PP
In the event a trip occurs, any alarm script provided by the user is called, and the
background color of the tripped channel is changed to red for the duration of the trip.
Once the trip condition is removed, the background color is changed back to the normal
widget background color.  For more information about alarm scripts, see the \fBALARM SCRIPTS\fR
section below.
.PP
In the event of an interesting change in the control panel, any user command script is invoked.
For more information about command scripts, see the \fBCOMMAND SCRIPTS\fR section below.

.SH "COMMAND SCRIPTS"
.PP
Command scripts are invoked whenever an interesting action is performed
by the user on the control panel.  These scripts allow the user to
maintain logs of changes, or perhaps create failsafe settings files for
the module.  Scripts are invoked with three action specific parameters
appended to them: \fIwho\fR, \fIwhat\fR, \fIwhich\fR, and \fIvalue\fR.
.PP
The \fIwho\fR parameter is just the path to the widget that is invoking the
script.  Providing this allows the user to interrogate or control the widget
as needed.  The remaining parameters depend on the value of the \fIwhat\fR
parameter, which describes the action the user just took:
.TP
\fBramp\fR
The user just initiated a ramp on one of the channels.  The \fIwhich\fR
parameter is either \fIa\fR or \fIb\fR indicating which channel
has started the ramp.  The \fIvalue\fR\ parameter gives the ramp target
voltage in volts.
.TP
\fBoff\fR
Indicates the user has clicked the off button on one of the channels.  The
\fIwhich\fR parameter is either \fIa\fR or \fIb\fR indicating which channel
has been turned off.  The value parameter is 0
.TP
\fBilimit\fR
Indicates the current limit for a channel has just been changed (using e.g.
\fIname\fR configure -ilimit).   \fIwhich\fR is either \fIa\fR or \fIb\fR indicating
which channel had the current limit set.  Note that in the case that the current
limit was set using the widget's configure command, you will get a command script call for each
channel.
.TP
\fBspeed\fR
Indicates the ramp speed for a channel has just been changed.  \fIwhich\fR
is either \fIa\fR or \fIb\fR indicating
which channel had the current limit set.  Note that in the case the speed was
changed using the widgets's configure command, the command script is called
twice, once for each channel.
.SH "ALARM SCRIPTS"
.PP
Alarm scripts are invoked whenever the module enters or leaves a tripped state.
Alarm scripts enable the surrounding program to provide application specific
details about the alarm to the user or log or perform any other application
specific operation desired.  For example \fBvhqControl(1)\fR maintains a log
window showing trip and recovery details and timestamps.
.PP
The alarm script has four parameters appended to it.  \fIwho\fR is the object
that is producing the alarm.  This allows the alarm script to interrogate and
control the widget. \fIwhat\fR describes the alarm condition.  \fIwhich\fR
indicates the affected channel and is either \fIa\fR or \fIb\fR. \fIvalue\fR is
either \fI1\fR or \fI0\fR indicating if the condition described by \fIwhat\fR
has been set (1)  or cleared (0).
.PP
The values for \fIwhat\fR are:
.TP
\fBmanual\fR
The channel's DAC/Manual switch has been changed.  \fIvalue\fR 1 indicates
the channel is now in manual mode and cannot be controlled by the megawidget.
.TP
\fBerror\fR
The channel has raised or cleared an error bit.  This is usually followed
by another alarm script call indicating the error condition that was raised or cleared.
.TP
\fBVoverset\fR
The channel is reporting a voltage that is over the voltage hard maximum
set on the front panel fo the module.
.TP
\fBOverVorI\fR
The channel has hit either the voltage hard limit, or the current hard or soft limit.
.TP
\fBilimit\fR
The channel has hit the current hard or soft limit.
.TP
\fBBadQuality\fR
The output voltage is not well regulated.
.SH "SUPPORTED MODELS"
.PP
The following modules are supported by the \fB-model\fR cofiguration option.
.MD 202L-s 2000 0.1 0.5
.MD 202M   2000 3   1.5
This is the default model.
.MD 202M-h 2000 6   2.0
.MD 203M   3000 2   0.66
.MD 203M-h 3000 4   1.33
.MD 204L   4000 1   0.33
.MD 204M-h 4000 3   1.5
.MD 205L   5000 1   0.33
.MD 205L-h 5000 2   0.66
.PP
Note that the software is unable to determine the actual model number
of the device.  If your model is not in the supported list,
file an enhancment request at http://daqbugs.nscl.msu.edu and
in the meantime, use a model with capabilities closest to the one
you have.

.SH "SEE ALSO"
vhqControl(1)

.SH KEYWORDS
vhq slow-controls
