<?xml version="1.0" encoding="UTF-8"?>


<chapter id="chap6">
    <title>Extending bufdump</title>
    <para>
        This document describes how to extend bufdump.
        When you have completed this chapter you will know how to:
        <itemizedlist>
            <listitem><para>
                        Write a packet definition file
                      </para></listitem>
            <listitem><para>
                        Write a packet body formatting plugin
                      </para></listitem>
        </itemizedlist>
    </para>
    <sect1>
        <title>Preparing packet definition files
        </title>
        <para>
            Packet definition files extend the set of packet ids that
            are recognized by the bufdump program.  When bufdump encounters
            a recognized packet id, it can do some elementary formatting
            that identifies the packet contents.
        </para>
        <para>
            You need to supply a packet definition file if your program
            uses packet ids that are not in the registered packet id set,
            and you either have not used the production readout skeleton, or
            you have, but have not used the
            <emphasis>CDocumentedPacket</emphasis>
            class to manage your packets.
        </para>
        <para>
            A packet definition file is just a text file.
            By convention, packet definition files have the .def
            extension.
            Each line of the
            text file defines a packet id, and consists of the following fields
            separated by whitespace:
            <itemizedlist>
                <listitem><para>
                    Packet short name. This should be a short one word
                    description of the data in the packet.
                          </para></listitem>
                <listitem><para>
                            Packet id.  This is a number that can be
                            expressed in any form normally recognized
                            by C/C++ or Tcl.
                          </para></listitem>
                <listitem><para>
                    Packet long name.  This is a phrase that more fully
                    describes the packet.   This phrase is not currently usedb
                    by bufdump, but may be in the future.  The phrase
                    should be quoted in any way acceptable to tcl
                    (e.g. curly braces or double quotes).
                    </para></listitem>
                <listitem><para>
                    Packet version.  This is a string that represents the
                    version of the packet.  This is not currently used
                    by the bufdump program.
                    </para></listitem>
            </itemizedlist>
        </para>
        <para>
            The text below shows an annotated line, from a
            packet definition file.
        </para>
        <programlisting>
            s800 <co id="pkt-short" /> 0x5800 <co id="pkt-id" /> {S800 Spectrograph} <co id="pkt-long" /> 1.0 <co id="pkt-version" />
        </programlisting>
        <calloutlist>
            <callout arearefs="pkt-short">
                <para>
                <userinput>s800</userinput> is the packet short name,
                    This line is the actual definition of the S800
                    packet from the bufdump default packet definition file
                </para>
            </callout>
            <callout arearefs="pkt-id">
                <para>
                <userinput>0x5800</userinput>
                is the id of the packet. The leading 0x indicates that this
                id is expressed as a hexadecimal value.
                </para>
            </callout>
            <callout arearefs="pkt-long">
                <para>
                The text quoted by curly brackets to the left of this
                callout is the packet long name.
                </para>
            </callout>
            <callout arearefs="pkt-version">
                <para>
                <userinput>1.0</userinput>
                Is the packet version.  When a packet maintainer changes the
                internal structure of a packet, they are expected to change
                the version number as well.
                </para>
            </callout>
        </calloutlist>
    </sect1>
    <sect1>
        <title>
            Writing formatting plugins for the bufdump program.
        </title>
        <para>
            The internal structure of a packet is not known to bufdump.
            By default, therefore, bufdump dumps the body of a packet
            as a sequence of hexadecimal 16 bit words.  Plugins are a
            mechanism that bufdump provides to teach it how to format
            the internals of a packet.
        </para>
        <para>
            A plugin is a Tcl procedure that is associated with a
            particular packet type.  When bufdump encounters a packet
            whose type is known, either through a packet definition
            file (standard or user provided), or through analysis of
            a documentation buffer, it checks to see if a plugin has
            been registered for that packet type.  If so, bufdump
            hands the body of the packet off to that plugin and receives
            the formatted body in return.
        </para>
        <para>
            Let's look at a very simple plugin:
            <programlisting>
    # Plugin to format 0x8000 packets:
    #
    proc format8000 body {   <co id="plugin-proc" />
        set result "Hex   Decimal   Octal\n"
        foreach item $body { <co id="plugin-body" />
        append result [format "0x%04x %05d %06o\n" $item $item $item]
    }
    return $result           <co id="plugin-return" />
    }
    registerPacketFormatter 0x8000 format8000 <co id="plugin-register" />
            </programlisting>
            <calloutlist>
                <callout arearefs="plugin-proc"><para>
                    The procedure
                    <function>format8000</function>
                    is the plugin procedure.  We have adopted the convention
                    that the procedure name will be of the form
                    format<replaceable>id</replaceable>
                    where <replaceable>id</replaceable> is the hexadecimal
                    id of the packet type this plugin serves.  The parameter
                    <parameter>body</parameter>
                    will contain the body of the packet when the plugin is called
                    by bufdump.
                    <parameter>body</parameter>
                    is a properly formatted Tcl list of numbers.
                    The size of the body can be determined by applying the
                    Tcl
                    <command>llength</command> command to that list.
                    </para>
                </callout>
                <callout arearefs="plugin-body"><para>
                    After initializing the variable
                    <varname>result</varname>
                    with a header, this
                    <command>foreach</command>
                    loop iterates over each element of the body list
                    appending the hexadecimal, decimal and octal
                    rendition of each body word to the
                    <varname>result</varname>
                    followed by a newline.  Note that all formatting
                    must be explicitly provided by the plugin.
                    At this point in time, there is no support for
                    font selection or other forms of highlighting
                    </para>
                </callout>
                <callout arearefs="plugin-return"><para>
                    The return value from the plugin procedure is the
                    string that will be placed verbatim, without interpretation
                    in bufdump's formatted output.
                    </para>
                </callout>
                <callout arearefs="plugin-register"><para>
                    The
                    <command>registerPacketFormatter</command>
                    command registers the plugin to process packets with
                    an id of 0x8000.  The parameters of the
                    <command>registerPacketFormatter</command>
                    are in order:
                    <variablelist>
                        <varlistentry>
                            <term><parameter>id</parameter></term>
                            <listitem><para>
                                The id of the packet that will
                                be processed by the plugin.  This can
                                be any numerical representation of the
                                id that is acceptable to Tcl.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><parameter>plugin</parameter></term>
                            <listitem><para>
                                The procedure to invoke when the
                                <parameter>id</parameter>
                                packet is encountered.
                                </para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                    </para>
                </callout>
            </calloutlist>
        </para>
        <para>
            We can see from this example that the incorporation of a plugin is
            a three step process:
            <orderedlist numeration="arabic">
                <listitem><para>
                    Write a plugin procedure that accepts the body of
                    the packet as a parameter and produces as a result the
                    desired formatted representation of the body.
                    </para>
                </listitem>
                <listitem><para>
                    In the same file as the plugin, register the
                    plugin procedure by invoking
                    <command>registerPacketFormatter</command>.
                    The call to
                    <command>registerPacketFormatter</command>
                    must supply the packet id as well as the
                    name of the procedure you wrote in the previous step.
                    </para>
                </listitem>
                <listitem>
                    <para>
                    Users of bufdump invoke the:
                    <menuchoice>
                        <guimenu>File</guimenu>
                        <guimenuitem>Add Plugin...</guimenuitem>
                    </menuchoice>
                    menu command and select the file that provides the plugin.
                    </para>
                </listitem>
            </orderedlist>
        </para>
        <para>
            A cautionary word about plugin distribution.  A plugin, like any
            other program may have defects that you will repair over the life-cycle
            of the plugin.  We recommend against the distribution of copies of plugins
            within a single institution.  Plugins should be installed in some
            centralized repository and users should be encouraged to
            add them from the repository so that at any given time, they will
            receive the most up-to-date versions.
        </para>
        <para>Finally, this plugin interface is primitive.  If you have suggestions
            for enhancing this interface, please feel free to maek them
            via <ulink url="http://daqbugs.nscl.msu.edu" > the NSCL
            bugzilla web pages</ulink>.
        </para>
    </sect1>
</chapter>
