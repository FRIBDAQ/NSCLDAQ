<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<title>Event Loops</title>
</head>

<body>

<h1>Event Loops</h1>
<p><map name="FPMap0">
<area href="#CEventLoop" shape="rect" coords="285, 150, 393, 237">
<area href="#CXtEventLoop" shape="rect" coords="35, 301, 217, 394">
<area href="#CInterpreterStartup" shape="rect" coords="584, 470, 727, 553">
<area href="#CDAQTCLProcessor" shape="rect" coords="205, 473, 336, 552">
<area href="#CTCLSynchronizeCommand" shape="rect" coords="155, 711, 306, 789">
<area href="#CTKInterpeterStartup" shape="rect" coords="457, 723, 621, 795">
<area href="#CTKInterpeterStartup" shape="rect" coords="670, 721, 815, 800"></map><img border="0" src="images/event_5.gif" usemap="#FPMap0" width="831" height="849"></p>

<H1><A NAME = "CEventLoop">CEventLoop</A></H1>

<P> SuperClasses: DAQThread </P>
<P> One to One associations: 
</P>
<P> One to Many associations:  
</P>
<P> Aggregate classes (1:1)  : 
</P>
<P> Aggregate classes (1:*)  : 

</P>

<H2>Class Attributes</H2>

<H3>m_pTheInstance</H3>
<P>Visibility: private</P>
<P>Type: CEventLoop*</p>
<P>
Contains  a pointer to the single
event loop instance allowed.  If
there are no instances of the singleton,
this pointer is null.  Note that GetInstance
will not attempt to create a new instance
since it does not know which element of the
class hierarchy to create. 
</P>

<H2>Operations on  CEventLoop</H2>

<H3> static  getInstance</H3>
<P>Visibility: public</p>
<P>Parameters: </P>
<P>Return Type: CEventLoop*</p>
<P>Classification: Selector.</p>
<P>Retrieves the instance pointer.</P>
<H3>virtual   operator()</H3>
<P>Visibility: private</p>
<P>Parameters: int argc, char** argv</P>
<P>Return Type: void</p>
<P>Classification: Interface</p>
<P>Provdes an interface for starting an event
loop.  operator() is called when the thread
is started.</P>

<HR>

<H1><A NAME = "CXtEventLoop">CXtEventLoop</A></H1>

<P> SuperClasses: CEventLoop </P>
<P> One to One associations: 
</P>
<P> One to Many associations:  
</P>
<P> Aggregate classes (1:1)  : 
</P>
<P> Aggregate classes (1:*)  : 

</P>

<H2>Class Attributes</H2>

<H3>m_TopLevel</H3>
<P>Visibility: private</P>
<P>Type: Widget</p>
<P>
Top level shell widget created
by the InitializeApplication member.

</P>

<H2>Operations on  CXtEventLoop</H2>

<H3>virtual   InitializeApplication</H3>
<P>Visibility: public</p>
<P>Parameters: int argc, char** argv</P>
<P>Return Type: Widget</p>
<P>Classification: Iniitialization</p>
<P>Called to initialize the X toolkit.  Default
behavior is to call XtAppinit(), and return
its result.</P>
<H3>virtual   SetupApplicationResources</H3>
<P>Visibility: public</p>
<P>Parameters: Widget TopLevel</P>
<P>Return Type: void</p>
<P>Classification: Initialization</p>
<P>Called from operator() to process the
resource database.  Since the resource
database requires definitions which are
application specific but is not actually 
required, the default behavior is to do
nothing.  Normal applications will set 
up resource definition structures and
invoke XtGetApplicationResrouces()</P>
<H3>virtual   SetupWidgetTree</H3>
<P>Visibility: public</p>
<P>Parameters: Widget TopLevel</P>
<P>Return Type: void</p>
<P>Classification: Initialization.</p>
<P>operator() calls this function to set up the
initial widget tree.</P>
<H3>virtual   operator()</H3>
<P>Visibility: private</p>
<P>Parameters: int argc, char** argv</P>
<P>Return Type: int</p>
<P>Classification: Entry point</p>
<P>entry point for the Xt event loop thread.
The initialization functions are called to
allow the application to set up the application
widget set.  After this is done, the event loop
is entered. Each call of XtDispatchEvent is
bracketed by calls to lock/unlock the application
serializatio mutex.</P>

<HR>

<H1><A NAME = "CInterpreterStartup">CInterpreterStartup</A></H1>

<P> SuperClasses: CEventLoop </P>
<P> One to One associations: 
</P>
<P> One to Many associations:  
</P>
<P> Aggregate classes (1:1)  : 
</P>
<P> Aggregate classes (1:*)  : 

</P>

<H2>Class Attributes</H2>

<H2>Operations on  CInterpreterStartup</H2>

<H3>virtual   OnIniitialize</H3>
<P>Visibility: protected</p>
<P>Parameters: int argc, char** Argv</P>
<P>Return Type: void</p>
<P>Classification: Default behavior</p>
<P>On initialize is called very early in 
the execution of the operator() member.
It is intended that subclassed interpreters
perform early initialization here.  At this
point an interpreter has not yet been 
instantiated.  Therefore,  you may not
perform Tcl/Tk library calls at this 
stage.
  Default implementation is a no-op.</P>
<H3>virtual   RegisterExtensions</H3>
<P>Visibility: protected</p>
<P>Parameters: </P>
<P>Return Type: void</p>
<P>Classification: Interface</p>
<P>Concrete subclasses of this class must
implement this function.  It is expected that
all tcl interpreters run in this envrionment will
have extensions (if not, just implement an
empty function), therefore this member is
pure virtual.  At this point, an interpreter has
been created.  If this is a Tk derived 
interpreter, it's not certain that the tk Main
window has been created yet however.
</P>
<H3>  operator()</H3>
<P>Visibility: private</p>
<P>Parameters: int argc, char** argv</P>
<P>Return Type: int</p>
<P>Classification: Interface</p>
<P>This pure virtual member function is expected
to start the interpreter and call the other member
functions; it is the entry point of the thread.</P>

<HR>

<H1><A NAME = "CTCLInterpreterStartup">CTCLInterpreterStartup</A></H1>

<P> SuperClasses: CInterpreterStartup </P>
<P> One to One associations: 
</P>
<P> One to Many associations:  
</P>
<P> Aggregate classes (1:1)  : 
</P>
<P> Aggregate classes (1:*)  : 

</P>

<H2>Class Attributes</H2>

<H2>Operations on  CTCLInterpreterStartup</H2>

<H3>virtual   operator()</H3>
<P>Visibility: private</p>
<P>Parameters: </P>
<P>Return Type: void</p>
<P>Classification: Override.</p>
<P>1. Calls OnInitialize.
2. Sets up the Tcl interpreter.
3. Within the Tcl initialization function
    (CTCLInterpreterStartup::Tcl_Init) call
   RegisterExtensions.

Note that the instance of the interpreter is gotten
via a call to CEventLoop::getInstance() since this is
a singleton class.
</P>
<H3> static  Tcl_Init</H3>
<P>Visibility: public</p>
<P>Parameters: Tcl_Interp* pInterp</P>
<P>Return Type: int</p>
<P>Classification: Initialization.</p>
<P>Called from the Tcl_Main() function.
This static member:
1. Obtains the object by calling
    CEventLoop::getInstanc()
2. Initializes the interpreter.
3. Invokes the Object's RegisterExtensions function
    to load packages, register modules and add
    application specific commands.
4. Returns to allow Tcl to start it's main loop.
</P>

<HR>

<H1><A NAME = "CTKInterpeterStartup">CTKInterpeterStartup</A></H1>

<P> SuperClasses: CInterpreterStartup </P>
<P> One to One associations: 
</P>
<P> One to Many associations:  
</P>
<P> Aggregate classes (1:1)  : 
</P>
<P> Aggregate classes (1:*)  : 

</P>

<H2>Class Attributes</H2>

<H2>Operations on  CTKInterpeterStartup</H2>

<H3>virtual   operator()</H3>
<P>Visibility: public</p>
<P>Parameters: </P>
<P>Return Type: void</p>
<P>Classification: </p>
<P>1. Calls OnInitialize to allow users to do early initialization.
2..Starts the Tk interpreter by callling Tk_Main.
The static member Tk_Init iis passed as 
the application initialization function.
</P>
<H3> static  Tk_Init</H3>
<P>Visibility: public</p>
<P>Parameters: </P>
<P>Return Type: int</p>
<P>Classification: </p>
<P>Called by Tk_Main to do application 
specific initialization.

Establishes object context by invoking CEventLoop::getInstance(), 
invokes RegisterExtensions so that
applicaiton packages and commands can be
registered on the interpreter.

Finally returns to the Tk event loop.</P>

<HR>

<H1><A NAME = "CTCLSynchronizeCommand">CTCLSynchronizeCommand</A></H1>

<P> SuperClasses: *CDAQTCLProcessor </P>
<P> One to One associations: 
</P>
<P> One to Many associations:  
</P>
<P> Aggregate classes (1:1)  : 
</P>
<P> Aggregate classes (1:*)  : 

</P>

<H2>Class Attributes</H2>

<H2>Operations on  CTCLSynchronizeCommand</H2>

<H3>virtual   operator()</H3>
<P>Visibility: public</p>
<P>Parameters: CTCLInterpreter& rInterp, CTCLResult &rResult, int nArguments, char pArguments[]</P>
<P>Return Type: void</p>
<P>Classification: Command processor.</p>
<P>Executes the script passed as argv[1]  synchronized
to the appliication's global mutex.</P>

<HR>

<H1><A NAME = "CDAQTCLProcessor">CDAQTCLProcessor</A></H1>

<P> SuperClasses: CTCLProcessor, 
  CTCLProcessor </P>
<P> One to One associations: 
</P>
<P> One to Many associations:  
</P>
<P> Aggregate classes (1:1)  : 
</P>
<P> Aggregate classes (1:*)  : 

</P>

<H2>Class Attributes</H2>

<H2>Operations on  CDAQTCLProcessor</H2>

<H3>virtual   Register</H3>
<P>Visibility: public</p>
<P>Parameters: </P>
<P>Return Type: void</p>
<P>Classification: Tcl Interface.</p>
<P>Registers the processor on the current interpreter.</P>
<H3> static  EvalRelay</H3>
<P>Visibility: public</p>
<P>Parameters: ClientData pData, Tcl_Interp* pInterp, int Argc, char** Argv</P>
<P>Return Type: int</p>
<P>Classification: </p>
<P>Locks the application mutex, calls
operator() and the unlocks the resource.</P>
<H3> static  DeleteRelay</H3>
<P>Visibility: public</p>
<P>Parameters: ClientData pData</P>
<P>Return Type: void</p>
<P>Classification: </p>
<P>Locks the application mutex, call's
the object's OnDelete member function
(the object is pointed to by the client data
parameter), and unlocks the mutex.</P>

<HR>

<p>Last Modified: <!--webbot bot="Timestamp" startspan S-Type="EDITED"
S-Format="%A, %B %d, %Y" -->Tuesday, August 07, 2001<!--webbot bot="Timestamp"
I-CheckSum="50518" endspan -->
 <a href="mailto:fox@nscl.msu.edu">Ron Fox</a></p>

</body>

</html>
