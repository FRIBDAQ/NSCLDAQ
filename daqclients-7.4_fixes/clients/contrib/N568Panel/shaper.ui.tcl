# interface generated by SpecTcl version 1.1 from C:/Documents and Settings/fox/Desktop/shaper.ui
#   root     is the parent window for this user interface

proc shaper_ui {root args} {

	# this treats "." as a special case

	if {$root == "."} {
	    set base ""
	} else {
	    set base $root
	}
    
	label $base.label#1 \
		-text {Caennet addr}

	label $base.controller

	label $base.node

	label $base.moduleid

	checkbutton $base.muxon \
		-text {Enable mux} \
		-variable example_checkbutton

	label $base.label#19 \
		-text {Common Offset}

	scale $base.offset \
		-label {-75 mv} \
		-orient horizontal \
		-showvalue 0 \
		-to 255.0 \
		-variable example_scale

	label $base.lockstate

	label $base.label#5 \
		-text Channel

	label $base.label#14 \
		-text {Out. Conf.}

	label $base.label#15 \
		-text Polarity

	label $base.label#16 \
		-text {Shaping time}

	label $base.label#17 \
		-text {Coarse Gain}

	label $base.label#18 \
		-text {Fine Gain}

	label $base.label#20 \
		-text {Pole 0 adj.}

	radiobutton $base.ch0sel \
		-text 0 \
		-value 0 \
		-variable example_radiobutton

	checkbutton $base.ch0inv \
		-text inv. \
		-variable example_checkbutton

	checkbutton $base.ch0pol \
		-text - \
		-variable example_checkbutton

	radiobutton $base.ch0s200ns \
		-text {0.2 us} \
		-value 0 \
		-variable example_radiobutton

	radiobutton $base.ch0s1us \
		-text {1 us} \
		-value 1 \
		-variable example_radiobutton

	radiobutton $base.ch0s3us \
		-text {3 us} \
		-value 2 \
		-variable example_radiobutton

	radiobutton $base.ch0s6us \
		-text {6 us} \
		-value 3 \
		-variable example_radiobutton

	scale $base.ch0coarse \
		-label 1 \
		-orient h \
		-showvalue 0 \
		-to 7.0 \
		-variable example_scale

	scale $base.ch0fine \
		-label 0 \
		-orient h \
		-showvalue 0 \
		-to 255.0 \
		-variable example_scale

	scale $base.ch0pole0 \
		-orient horizontal \
		-to 255.0 \
		-variable example_scale

	radiobutton $base.ch1sel \
		-text 1 \
		-value 1 \
		-variable example_radiobutton

	checkbutton $base.ch1inv \
		-text inv \
		-variable example_checkbutton

	checkbutton $base.ch1pol \
		-text - \
		-variable example_checkbutton

	radiobutton $base.ch1s200ns \
		-text {0.2 us} \
		-value 0 \
		-variable example_radiobutton

	radiobutton $base.ch1s1us \
		-text {1 us} \
		-value 1 \
		-variable example_radiobutton

	radiobutton $base.ch1s3us \
		-text {3 us} \
		-value 2 \
		-variable example_radiobutton

	radiobutton $base.ch1s6us \
		-text {6 us} \
		-value 3 \
		-variable example_radiobutton

	scale $base.ch1coarse \
		-label 1 \
		-orient h \
		-showvalue 0 \
		-to 7.0 \
		-variable example_scale

	scale $base.ch1fine \
		-label 0 \
		-orient h \
		-showvalue 0 \
		-to 255.0 \
		-variable example_scale

	scale $base.ch1pole0 \
		-orient horizontal \
		-to 255.0 \
		-variable example_scale

	radiobutton $base.ch2sel \
		-text 2 \
		-value 2 \
		-variable example_radiobutton

	checkbutton $base.ch2inv \
		-text inv \
		-variable example_checkbutton

	checkbutton $base.ch2pol \
		-text - \
		-variable example_checkbutton

	radiobutton $base.ch2s200ns \
		-text {0.2 us} \
		-value 0 \
		-variable example_radiobutton

	radiobutton $base.ch2s1us \
		-text {1 us} \
		-value 1 \
		-variable example_radiobutton

	radiobutton $base.ch2s3us \
		-text {3 us} \
		-value 2 \
		-variable example_radiobutton

	radiobutton $base.ch2s6us \
		-text {6 us} \
		-value 3 \
		-variable example_radiobutton

	scale $base.ch2coarse \
		-label 1 \
		-orient h \
		-showvalue 0 \
		-to 7.0 \
		-variable example_scale

	scale $base.ch2fine \
		-label 0 \
		-orient h \
		-showvalue 0 \
		-to 255.0 \
		-variable example_scale

	scale $base.ch2pole0 \
		-orient h \
		-to 255.0 \
		-variable example_scale

	radiobutton $base.ch3sel \
		-text 3 \
		-value 3 \
		-variable example_radiobutton

	checkbutton $base.ch3inv \
		-text inv \
		-variable example_checkbutton

	checkbutton $base.ch3pol \
		-text - \
		-variable example_checkbutton

	radiobutton $base.ch3s200ns \
		-text {0.2 us} \
		-value 0 \
		-variable example_radiobutton

	radiobutton $base.ch3s1us \
		-text {1 us} \
		-value 1 \
		-variable example_radiobutton

	radiobutton $base.ch3s3us \
		-text {3 us} \
		-value 2 \
		-variable example_radiobutton

	radiobutton $base.ch3s6us \
		-text {6 us} \
		-value 3 \
		-variable example_radiobutton

	scale $base.ch3coarse \
		-label 1 \
		-orient h \
		-showvalue 0 \
		-to 7.0 \
		-variable example_scale

	scale $base.ch3fine \
		-label 0 \
		-orient h \
		-showvalue 0 \
		-to 255.0 \
		-variable example_scale

	scale $base.ch3pole0 \
		-orient h \
		-to 255.0 \
		-variable example_scale

	radiobutton $base.ch4sel \
		-text 4 \
		-value 4 \
		-variable example_radiobutton

	checkbutton $base.ch4inv \
		-text inv \
		-variable example_checkbutton

	checkbutton $base.ch4pol \
		-text - \
		-variable example_checkbutton

	radiobutton $base.ch4s200ns \
		-text {0.2 us} \
		-value 0 \
		-variable example_radiobutton

	radiobutton $base.ch4s1us \
		-text {1 us} \
		-value 1 \
		-variable example_radiobutton

	radiobutton $base.ch4s3us \
		-text {3 us} \
		-value 2 \
		-variable example_radiobutton

	radiobutton $base.ch4s6us \
		-text {6 us} \
		-value 3 \
		-variable example_radiobutton

	scale $base.ch4coarse \
		-label 1 \
		-orient h \
		-showvalue 0 \
		-to 7.0 \
		-variable example_scale

	scale $base.ch4fine \
		-label 0 \
		-orient h \
		-showvalue 0 \
		-to 255.0 \
		-variable example_scale

	scale $base.ch4pole0 \
		-orient h \
		-to 255.0 \
		-variable example_scale

	radiobutton $base.ch5sel \
		-text 5 \
		-value 5 \
		-variable example_radiobutton

	checkbutton $base.ch5inv \
		-text inv \
		-variable example_checkbutton

	checkbutton $base.ch5pol \
		-text - \
		-variable example_checkbutton

	radiobutton $base.ch5s200ns \
		-text {0.2 us} \
		-value 0 \
		-variable example_radiobutton

	radiobutton $base.ch5s1us \
		-text {1 us} \
		-value 1 \
		-variable example_radiobutton

	radiobutton $base.ch5s3us \
		-text {3 us} \
		-value 2 \
		-variable example_radiobutton

	radiobutton $base.ch5s6us \
		-text {6 us} \
		-value 3 \
		-variable example_radiobutton

	scale $base.ch5coarse \
		-label 1 \
		-orient h \
		-showvalue 0 \
		-to 7.0 \
		-variable example_scale

	scale $base.ch5fine \
		-label 0 \
		-orient h \
		-showvalue 0 \
		-to 255.0 \
		-variable example_scale

	scale $base.ch5pole0 \
		-orient h \
		-to 255.0 \
		-variable example_scale

	radiobutton $base.ch6sel \
		-text 6 \
		-value 6 \
		-variable example_radiobutton

	checkbutton $base.ch6inv \
		-text inv \
		-variable example_checkbutton

	checkbutton $base.ch6pol \
		-text - \
		-variable example_checkbutton

	radiobutton $base.ch6s200ns \
		-text {0.2 us} \
		-value 0 \
		-variable example_radiobutton

	radiobutton $base.ch6s1us \
		-text {1 us} \
		-value 1 \
		-variable example_radiobutton

	radiobutton $base.ch6s3us \
		-text {3 us} \
		-value 2 \
		-variable example_radiobutton

	radiobutton $base.ch6s6us \
		-text {6 us} \
		-value 3 \
		-variable example_radiobutton

	scale $base.ch6coarse \
		-label 1 \
		-orient h \
		-showvalue 0 \
		-to 7.0 \
		-variable example_scale

	scale $base.ch6fine \
		-label 0 \
		-orient h \
		-showvalue 0 \
		-to 255.0 \
		-variable example_scale

	scale $base.ch6pole0 \
		-orient h \
		-to 255.0 \
		-variable example_scale

	radiobutton $base.ch7sel \
		-text 7 \
		-value 7 \
		-variable example_radiobutton

	checkbutton $base.ch7inv \
		-text inv \
		-variable example_checkbutton

	checkbutton $base.ch7pol \
		-text - \
		-variable example_checkbutton

	radiobutton $base.ch7s200ns \
		-text {0.2 us} \
		-value 0 \
		-variable example_radiobutton

	radiobutton $base.ch7s1us \
		-text {1 us} \
		-value 1 \
		-variable example_radiobutton

	radiobutton $base.ch7s3us \
		-text {3 us} \
		-value 2 \
		-variable example_radiobutton

	radiobutton $base.ch7s6us \
		-text {6 us} \
		-value 3 \
		-variable example_radiobutton

	scale $base.ch7coarse \
		-label 1 \
		-orient h \
		-showvalue 0 \
		-to 7.0 \
		-variable example_scale

	scale $base.ch7fine \
		-label 0 \
		-orient h \
		-showvalue 0 \
		-to 255.0 \
		-variable example_scale

	scale $base.ch7pole0 \
		-orient h \
		-to 255.0 \
		-variable example_scale

	button $base.button#1 \
		-command "SaveConfiguration $base.button#1" \
		-text Save...

	button $base.button#4 \
		-command "RestoreSettings $base.button#4" \
		-text Restore...

	button $base.button#2 \
		-command Exit \
		-text Exit

	button $base.lock \
		-command "ToggleLock $base.lock" \
		-text Lock


	# Geometry management

	grid $base.label#1 -in $root	-row 1 -column 1  \
		-columnspan 2
	grid $base.controller -in $root	-row 1 -column 5 
	grid $base.node -in $root	-row 1 -column 6 
	grid $base.moduleid -in $root	-row 1 -column 8  \
		-columnspan 6
	grid $base.muxon -in $root	-row 2 -column 1  \
		-columnspan 2
	grid $base.label#19 -in $root	-row 2 -column 5  \
		-columnspan 2 \
		-sticky s
	grid $base.offset -in $root	-row 2 -column 7  \
		-columnspan 3 \
		-sticky ew
	grid $base.lockstate -in $root	-row 2 -column 12 
	grid $base.label#5 -in $root	-row 3 -column 1 
	grid $base.label#14 -in $root	-row 3 -column 2 
	grid $base.label#15 -in $root	-row 3 -column 3 
	grid $base.label#16 -in $root	-row 3 -column 5  \
		-columnspan 4
	grid $base.label#17 -in $root	-row 3 -column 10 
	grid $base.label#18 -in $root	-row 3 -column 12  \
		-columnspan 2
	grid $base.label#20 -in $root	-row 3 -column 15 
	grid $base.ch0sel -in $root	-row 4 -column 1 
	grid $base.ch0inv -in $root	-row 4 -column 2 
	grid $base.ch0pol -in $root	-row 4 -column 3 
	grid $base.ch0s200ns -in $root	-row 4 -column 5 
	grid $base.ch0s1us -in $root	-row 4 -column 6 
	grid $base.ch0s3us -in $root	-row 4 -column 7 
	grid $base.ch0s6us -in $root	-row 4 -column 8 
	grid $base.ch0coarse -in $root	-row 4 -column 10  \
		-sticky ew
	grid $base.ch0fine -in $root	-row 4 -column 12  \
		-columnspan 2 \
		-sticky ew
	grid $base.ch0pole0 -in $root	-row 4 -column 15  \
		-sticky ew
	grid $base.ch1sel -in $root	-row 5 -column 1 
	grid $base.ch1inv -in $root	-row 5 -column 2 
	grid $base.ch1pol -in $root	-row 5 -column 3 
	grid $base.ch1s200ns -in $root	-row 5 -column 5 
	grid $base.ch1s1us -in $root	-row 5 -column 6 
	grid $base.ch1s3us -in $root	-row 5 -column 7 
	grid $base.ch1s6us -in $root	-row 5 -column 8 
	grid $base.ch1coarse -in $root	-row 5 -column 10  \
		-sticky ew
	grid $base.ch1fine -in $root	-row 5 -column 12  \
		-columnspan 2 \
		-sticky ew
	grid $base.ch1pole0 -in $root	-row 5 -column 15  \
		-sticky ew
	grid $base.ch2sel -in $root	-row 6 -column 1 
	grid $base.ch2inv -in $root	-row 6 -column 2 
	grid $base.ch2pol -in $root	-row 6 -column 3 
	grid $base.ch2s200ns -in $root	-row 6 -column 5 
	grid $base.ch2s1us -in $root	-row 6 -column 6 
	grid $base.ch2s3us -in $root	-row 6 -column 7 
	grid $base.ch2s6us -in $root	-row 6 -column 8 
	grid $base.ch2coarse -in $root	-row 6 -column 10  \
		-sticky ew
	grid $base.ch2fine -in $root	-row 6 -column 12  \
		-columnspan 2 \
		-sticky ew
	grid $base.ch2pole0 -in $root	-row 6 -column 15  \
		-sticky ew
	grid $base.ch3sel -in $root	-row 7 -column 1 
	grid $base.ch3inv -in $root	-row 7 -column 2 
	grid $base.ch3pol -in $root	-row 7 -column 3 
	grid $base.ch3s200ns -in $root	-row 7 -column 5 
	grid $base.ch3s1us -in $root	-row 7 -column 6 
	grid $base.ch3s3us -in $root	-row 7 -column 7 
	grid $base.ch3s6us -in $root	-row 7 -column 8 
	grid $base.ch3coarse -in $root	-row 7 -column 10  \
		-sticky ew
	grid $base.ch3fine -in $root	-row 7 -column 12  \
		-columnspan 2 \
		-sticky ew
	grid $base.ch3pole0 -in $root	-row 7 -column 15  \
		-sticky ew
	grid $base.ch4sel -in $root	-row 8 -column 1 
	grid $base.ch4inv -in $root	-row 8 -column 2 
	grid $base.ch4pol -in $root	-row 8 -column 3 
	grid $base.ch4s200ns -in $root	-row 8 -column 5 
	grid $base.ch4s1us -in $root	-row 8 -column 6 
	grid $base.ch4s3us -in $root	-row 8 -column 7 
	grid $base.ch4s6us -in $root	-row 8 -column 8 
	grid $base.ch4coarse -in $root	-row 8 -column 10  \
		-sticky ew
	grid $base.ch4fine -in $root	-row 8 -column 12  \
		-columnspan 2 \
		-sticky ew
	grid $base.ch4pole0 -in $root	-row 8 -column 15  \
		-sticky ew
	grid $base.ch5sel -in $root	-row 9 -column 1 
	grid $base.ch5inv -in $root	-row 9 -column 2 
	grid $base.ch5pol -in $root	-row 9 -column 3 
	grid $base.ch5s200ns -in $root	-row 9 -column 5 
	grid $base.ch5s1us -in $root	-row 9 -column 6 
	grid $base.ch5s3us -in $root	-row 9 -column 7 
	grid $base.ch5s6us -in $root	-row 9 -column 8 
	grid $base.ch5coarse -in $root	-row 9 -column 10  \
		-sticky ew
	grid $base.ch5fine -in $root	-row 9 -column 12  \
		-columnspan 2 \
		-sticky ew
	grid $base.ch5pole0 -in $root	-row 9 -column 15  \
		-sticky ew
	grid $base.ch6sel -in $root	-row 10 -column 1 
	grid $base.ch6inv -in $root	-row 10 -column 2 
	grid $base.ch6pol -in $root	-row 10 -column 3 
	grid $base.ch6s200ns -in $root	-row 10 -column 5 
	grid $base.ch6s1us -in $root	-row 10 -column 6 
	grid $base.ch6s3us -in $root	-row 10 -column 7 
	grid $base.ch6s6us -in $root	-row 10 -column 8 
	grid $base.ch6coarse -in $root	-row 10 -column 10  \
		-sticky ew
	grid $base.ch6fine -in $root	-row 10 -column 12  \
		-columnspan 2 \
		-sticky ew
	grid $base.ch6pole0 -in $root	-row 10 -column 15  \
		-sticky ew
	grid $base.ch7sel -in $root	-row 11 -column 1 
	grid $base.ch7inv -in $root	-row 11 -column 2 
	grid $base.ch7pol -in $root	-row 11 -column 3 
	grid $base.ch7s200ns -in $root	-row 11 -column 5 
	grid $base.ch7s1us -in $root	-row 11 -column 6 
	grid $base.ch7s3us -in $root	-row 11 -column 7 
	grid $base.ch7s6us -in $root	-row 11 -column 8 
	grid $base.ch7coarse -in $root	-row 11 -column 10  \
		-sticky ew
	grid $base.ch7fine -in $root	-row 11 -column 12  \
		-columnspan 2 \
		-sticky ew
	grid $base.ch7pole0 -in $root	-row 11 -column 15  \
		-sticky ew
	grid $base.button#1 -in $root	-row 13 -column 6 
	grid $base.button#4 -in $root	-row 13 -column 8 
	grid $base.button#2 -in $root	-row 13 -column 13 
	grid $base.lock -in $root	-row 13 -column 14 

	# Resize behavior management

	grid rowconfigure $root 1 -weight 0 -minsize 30
	grid rowconfigure $root 2 -weight 0 -minsize 30
	grid rowconfigure $root 3 -weight 1 -minsize 30
	grid rowconfigure $root 4 -weight 0 -minsize 30
	grid rowconfigure $root 5 -weight 1 -minsize 30
	grid rowconfigure $root 6 -weight 0 -minsize 30
	grid rowconfigure $root 7 -weight 0 -minsize 30
	grid rowconfigure $root 8 -weight 0 -minsize 30
	grid rowconfigure $root 9 -weight 0 -minsize 25
	grid rowconfigure $root 10 -weight 0 -minsize 30
	grid rowconfigure $root 11 -weight 0 -minsize 30
	grid rowconfigure $root 12 -weight 0 -minsize 30
	grid rowconfigure $root 13 -weight 0 -minsize 30
	grid columnconfigure $root 1 -weight 0 -minsize 30
	grid columnconfigure $root 2 -weight 0 -minsize 30
	grid columnconfigure $root 3 -weight 0 -minsize 30
	grid columnconfigure $root 4 -weight 0 -minsize 30
	grid columnconfigure $root 5 -weight 0 -minsize 30
	grid columnconfigure $root 6 -weight 0 -minsize 30
	grid columnconfigure $root 7 -weight 1 -minsize 30
	grid columnconfigure $root 8 -weight 0 -minsize 30
	grid columnconfigure $root 9 -weight 0 -minsize 30
	grid columnconfigure $root 10 -weight 1 -minsize 30
	grid columnconfigure $root 11 -weight 0 -minsize 30
	grid columnconfigure $root 12 -weight 1 -minsize 30
	grid columnconfigure $root 13 -weight 0 -minsize 30
	grid columnconfigure $root 14 -weight 1 -minsize 30
	grid columnconfigure $root 15 -weight 1 -minsize 30
# additional interface code
proc KillMe {} {
   set psout [exec ps axuww | grep shaperapp.tcl  | grep -v grep ]
   set processes [split $psout "\n"]
   foreach process $processes {
      set pid [lindex $process 1]
      catch "exec kill -9 $pid"
   }
}

#
#
#  Exit with confirmation prompt:
#
proc Exit {}  {
   global Config
   set confirm [tk_dialog  .confirm "Exit Confirmation" \
				   "Are you sure you want to exit"  \
				   questhead 1 Yes No ]
   if {$confirm == 0} {
     # Close the controllers:
     
     set ControllerIndices [array names Config *.controller]
     foreach index $ControllerIndices {
        set controller $Config($index)
	#  Need to catch since there might be more than one
	# name on the same controller.
	puts "Killing controller: $controller"
	
	catch "caennet::delete $controller"
     }
     #  Not sure why but exit hangs so we kill ourself.

      KillMe
   }
   
}
#
#  Enable/Disable the mux depending on the
# value of Config($name.muxenable)
#
proc SetMuxOnOff {name} {
   global Config
   set state $Config($name.muxenable)
   if {$state} {
      n568b::EnableMuxOut $Config($name.controller) \
                                    $Config($name.node) 
   } else {
      n568b::DisableMuxOut $Config($name.controller) \
                                    $Config($name.node) 
   }
 }
#
#   Select a channel for the mux.  This is done by just
#   requesting the value of the parameters for the channel.
#
proc SelectChannel {name} {
   global Config
   set controller $Config($name.controller)
   set node       $Config($name.node)
   set channel   $Config($name.muxsel)
   
   SetMuxOnOff $name
   n568b::SetOutputConfiguration $controller $node $channel \
	   $Config($name.outcfg.$channel)
   
}
#
#   Procedure to configure an output channel to be either
#   normal or inverting.
#
proc ConfigureOutput {name chan} {
   global Config
   
   set controller $Config($name.controller)
   set node       $Config($name.node)
   set onoff       $Config($name.outcfg.$chan)
   
   n568b::SetOutputConfiguration $controller $node $chan $onoff
   
   SelectChannel $name

}
#
#  Procedure to set the output polarity of the module.
#
proc SetPolarity {name channel} {
   global Config
   set controller $Config($name.controller)
   set node       $Config($name.node)
   set value      $Config($name.outpol.$channel)
   
   
   n568b::SetPolarity $controller $node $channel $value
   
   SelectChannel $name
   
}
#
#   Set the shaping time for the specified channel:
#
proc SetShapingTime {name channel} {
    global Config
    
    set controller $Config($name.controller)
    set node       $Config($name.node)
    set value      $Config($name.shapetime.$channel)
    
    n568b::SetShapingTime $controller $node $channel $value
    
    SelectChannel $name
}
#
#  Set the coarse gain on a channel.
#  In addition to setting the hardware, the label in the associated
#  widget has to be set to the appropriate gain factor.
#
proc SetCoarseGain {name channel widget value} {  
   global Config
   
   set controller $Config($name.controller)
   set node       $Config($name.node)
   set value       [expr $value]
   
   set actual [expr 1 << $value]
   
   #  Update the value of the widget's label to reflect the
   #  actual gain.
   
   $widget configure -label $actual
   
   # Set the device.
  
   n568b::SetCoarseGain $controller $node $channel $value
   
   SelectChannel $name
}
#
#   Set the fine gain on a channel.  The label of the associated scale
#   is just the raw register value.
#
proc SetFineGain {name channel widget value} {
   global Config
   set     controller $Config($name.controller)
   set     node       $Config($name.node)
   set     value       [expr int($value)]
   set     displayvalue $value
   
   #  Update the widget's label:
   
   $widget configure -label $displayvalue
   
   # Set the device
   
   n568b::SetFineGain $controller $node $channel $value
   
   SelectChannel $name
}
#
#   Set the module offset.  The offset
#  is represented as 0 - 255 in the slider, but we adjust the
#  label so that it shows -75 - +210mv
#
proc SetOffset {name widget value} {
	global Config
	
	set controller $Config($name.controller)
        set node       $Config($name.node)
	set value      [expr int($value)]
	
	set mv [expr $value*285.0/255.0 -75.0]
	set mv [expr int($mv*100.0)/100.0]
	
	$widget configure -label "$mv mv"
	
	n568b::SetOffset $controller $node $value
	
	SelectChannel $name   ;# Not really needed.
}
#
#  Set a channel pole 0 adjust value.
#
proc SetPole0 {name channel value} {
   global Config
   set controller $Config($name.controller)
   set node       $Config($name.node)
   
   n568b::SetPole0 $controller $node $channel $value
   
   SelectChannel $name
   
}
#
#   Set the gui lock state
#
proc SetLockState {name state label} {
    .$name.lock configure -text $label
    
     # Set the state of the common offset widget
     
    .$name.offset configure -state $state
    
    # set the widgets with the exception of the mux channel select
    # for each channel:
    
    for {set ch 0}  {$ch < 8 } {incr ch} {
        foreach item {inv pol s200ns s1us s3us s6us coarse fine pole0} {
	   set widget .$name.ch$ch
	   append widget $item
	   $widget configure -state $state
        }
    }
    
}
#
#  Toggle the lock
#
proc ToggleLock {widget} {
	set name [lindex [split $widget .] 1]
	
	set state [.$name.lock cget -text]
	if {$state == "Lock"} {
	   SetLockState $name disabled Unlock
	   .$name.lockstate configure -text "Locked !" -fg red
	} else {
	   .$name.lockstate configure -text ""
           SetLockState $name normal Lock
        }	   
}
#
#  The specified gui is configured to map to variables
#   specified by the module name.
#
proc ConfigureGui {name} {
   global Config
   
   
   .$name.controller configure -text $Config($name.controller)
   .$name.node       configure -text $Config($name.node)
   
   .$name.moduleid  configure -text  \
          [n568b::Id $Config($name.controller) $Config($name.node)]
	  
   .$name.muxon configure -variable Config($name.muxenable) \
                                    -command "SetMuxOnOff $name"

   
   .$name.offset configure -variable Config($name.offset) \
		                     -command "SetOffset $name .$name.offset"
    SetOffset $name .$name.offset $Config($name.offset)
   
   set selection $Config($name.muxsel)
   
   for {set ch 0} {$ch < 8} {incr ch} {
   
        # Mux select
   
      set widget .$name.ch$ch
      append widget sel
      $widget configure -variable Config($name.muxsel) \
                               -command "SelectChannel $name"
	#output config checkboxes
	
      set widget .$name.ch$ch
      append widget inv
      set       now $Config($name.outcfg.$ch)
      $widget configure -variable Config($name.outcfg.$ch)   \
			       -command "ConfigureOutput $name $ch"
      set Config($name.outcfg.$ch) $now
      ConfigureOutput $name $ch
      
	# Polarity checkboxes.
	
       set widget .$name.ch$ch
       append widget pol
       set now $Config($name.outpol.$ch)
       $widget configure -variable Config($name.outpol.$ch) \
                                -command "SetPolarity $name $ch"
	set Config($name.outpol.$ch) $now
	SetPolarity $name $ch
   
       # Shaping time radio buttons 4 per channel.

       set now $Config($name.shapetime.$ch)
       foreach time {200ns 1us 3us 6us}  {
          set widget .$name.ch$ch
	  append widget s$time
	  $widget configure -variable Config($name.shapetime.$ch) \
	                           -command "SetShapingTime $name $ch"
       }
	set Config($name.shapetime.$ch)  $now
	
	# Coarse gain - a slider that goes from 0.0 - 7.0.
	
	set now $Config($name.coarsegain.$ch)
	set widget .$name.ch$ch
	append widget coarse
	$widget configure -variable Config($name.coarsegain.$ch) \
	                        -command "SetCoarseGain $name $ch $widget"
	set Config($name.coarsegain.$ch) $now
	SetCoarseGain $name $ch $widget $now
	
	# Fine gain - a slider that goes from 0.0 - 255.0 in steps of
	# 1.0
	set now $Config($name.finegain.$ch)
	set       widget .$name.ch$ch
	append widget fine
	$widget configure -variable Config($name.finegain.$ch) \
	                        -command "SetFineGain $name $ch $widget"
	set Config($name.finegain.$ch) $now
	SetFineGain $name $ch $widget $now
	
	# Pole 0 a slider going from 0 - 255
	
	set widget .$name.ch$ch
	append widget pole0
	$widget configure -variable Config($name.pole0.$ch) \
	                         -command "SetPole0 $name $ch"
	 SetPole0 $name $ch $Config($name.pole0.$ch)
   }     
   set Config($name.muxsel) $selection
   SelectChannel $name
}

#
#  Create a new GUI given:
#      name        - A name for the device (no spaces).
#      controller - A CAENnet controller handle.
#      node          - A CAENnet node id (thumbwheel values).
#
proc CreateModule {name controller node} {
   global Config                               ;# Has configuration information.
   global muxenable 
   global muxsel
   global outconfig
   global outpolarity
   global shapetime
   global coarsegain
   global finegain
   global offset
   global pole0
   
   # Set up the configuration array:
   
   set Config($name.controller) $controller
   set Config($name.node)       $node
   set Config($name.muxenable) $muxenable
   set Config($name.muxsel)       $muxsel
   set Config($name.offset)      $offset

   for {set i 0} {$i < 8} {incr i} {
      set Config($name.outcfg.$i) $outconfig($i)
      set Config($name.outpol.$i) $outpolarity($i)
      set Config($name.shapetime.$i) $shapetime($i)
      set Config($name.coarsegain.$i) $coarsegain($i)
      set Config($name.finegain.$i)     $finegain($i)
      set Config($name.pole0.$i)         $pole0($i)
   }
   

   
   # Configure the GUI.
   ConfigureGui $name
   MaintainFailsafe $name

}
#
#  Save the current configuration to a file
#
proc SaveFile {name filename} {
   global Config
   
   if {[catch "open $filename w" fd] != 0} {
      tk_dialog .opfail " Open failed" \
                              "Open for file $name failed: $fd" \
			       error 0 "Dismiss"
      return
   }
   puts $fd "# Shaper configuration file saved [exec date] \n#"
   puts $fd "#   Name                 :  $name"
   puts $fd "#   Caennet Controller:  $Config($name.controller)"
   puts $fd "#   Caennet node id   :  $Config($name.node)\n"
   
   puts $fd "set muxenable $Config($name.muxenable)"
   puts $fd "set  muxsel     $Config($name.muxsel)"
   puts $fd "set offset       $Config($name.offset)\n"
   
   for {set i 0} {$i < 8} {incr i} {
     puts $fd "set outconfig($i)    $Config($name.outcfg.$i)"
   }
   puts $fd ""
   for {set i 0} {$i < 8} {incr i} {
      puts $fd "set outpolarity($i) $Config($name.outpol.$i)"
   }
   puts $fd ""
   for {set i 0} {$i < 8} {incr i} {
      puts $fd "set shapetime($i) $Config($name.shapetime.$i)"
   }
   puts $fd ""
   for {set i 0} {$i < 8} {incr i} {
      puts $fd "set coarsegain($i)  $Config($name.coarsegain.$i)"
   }
   puts $fd ""
   for {set i 0} {$i < 8} {incr i} {
      puts $fd "set finegain($i)  $Config($name.finegain.$i)"
   }
   puts $fd ""
   for {set i 0} {$i < 8} {incr i}  {
      puts $fd "set pole0($i)  $Config($name.pole0.$i)"
   }
   close $fd
}
#
#   Select a save file and save configuration to that file.
#
proc SaveConfiguration widget {

   # Extract the name of the shaper to save:
   
   set path [split $widget .]
   set name [lindex $path 1]              ;# leading . >then< name.
   
   set filename [tk_getSaveFile -defaultextension .shaper               \
                                            -title "Save $name configuration"  \
                                            -filetypes {                              \
					       {{Shaper Values}   {.shaper} }   \
					       {{All files}            {*} }}     ]
   if {$filename != "" }  {
      SaveFile $name $filename
   }
}
#
#   Maintain the failsafe file $name_failsafe.shaper
#
proc MaintainFailsafe name {
	append filename $name _failsafe.shaper
	SaveFile $name $filename
	
	after 10000 "MaintainFailsafe $name"
}
#
#   Restore for $name given a $filename:
#
proc RestoreFile {name filename} {
	global Config

	# Set the defaults from the current settings.
	
	set muxenable $Config($name.muxenable)
	set muxsel      $Config($name.muxsel)
	set offset  $Config($name.offset)

	for {set i 0} {$i < 8} {incr i } {
		set outconfig($i)     $Config($name.outcfg.$i)
		set outpolarity($i)   $Config($name.outpol.$i)
		set shapetime($i)    $Config($name.shapetime.$i)
		set coarsegain($i)   $Config($name.coarsegain.$i)
		set finegain($i)       $Config($name.finegain.$i)
		set pole0($i)          $Config($name.pole0.$i)
        }
	# Source in the settings file.
	
	set status [catch "source $filename" err]
	if {$status == 1}  {
	     tk_dialog .sourcefail "Failed to source" \
		     "Failed to source $filename : $err" \
		     error 0 Dismiss
	     return
        }
	puts "Sourced $filename for $name"
	
	# Set up the shaper from the settings.
	
	set Config($name.muxenable)  $muxenable
	set Config($name.muxsel)       $muxsel
	set Config($name.offset)        $offset
	
	for {set i 0} {$i < 8} {incr i} {
	   set Config($name.outcfg.$i)        $outconfig($i)
	   set Config($name.outpol.$i)        $outpolarity($i)
	   set Config($name.shapetime.$i)   $shapetime($i)
	   set Config($name.coarsegain.$i)  $coarsegain($i)
	   set Config($name.finegain.$i)      $finegain($i)
	   set Config($name.pole0.$i)         $pole0($i)
        }
	ConfigureGui $name
}
#
#   Restore settings (prompting for a file).
#
proc RestoreSettings widget {
	set path [split $widget .]
	set name [lindex $path 1]
	
	set filename [tk_getOpenFile -defaultextension .shaper \
                                            -title "Restore $name configuration"  \
                                            -filetypes {                              \
					       {{Shaper Values}   {.shaper} }   \

					       {{All files}            {*} }}     ]
        if {$filename != ""} {
	    RestoreFile $name $filename
       } 
}

# end additional interface code

}


# Allow interface to be run "stand-alone" for testing

catch {
    if [info exists embed_args] {
	# we are running in the plugin
	shaper_ui .
    } else {
	# we are running in stand-alone mode
	if {$argv0 == [info script]} {
	    wm title . "Testing shaper_ui"
	    shaper_ui .
	}
    }
}
