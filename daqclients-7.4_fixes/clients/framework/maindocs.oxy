// This is a documentation only file.  It supplies the main page for Doxygen
// including a link to the user documentation for the software.
//

/*!
  \mainpage spectrodaq client application framework


  \author Ron Fox
  \author Eric Kasten (Spectrodaq)
  \author Jason Venema

  \section Intro Introduction
 
  This documentation describes an application framework which simplifies
  the process of writing clients to spectrodaq, the NSCL data acquisition
  and distribution system.  This set of web pages provides general documenation
  as well as reference information for this class library.
 
  \section Starting Getting Started

   To write programs under the client application framework you will need to
   know:
   -# How to
      \ref Writing "subclass the DAQROCNode class."
   -# How to 
      \ref Makefile "Write a Makefile"
      to build your program.

  \subsection Writing Writing a subclass of DAQROCNode

	DAQROCNode (DAQ Readout Controller Node) is the base class from
   which all spectrodaq clients are derived.  
  \include minimal.cpp
   is a minimal sample Spectrodaq client which uses the framework.

	This example includes the following headers:
	- <spectrodaq.h> - header which defines the spectrodaq client interface
	  classes.
        - <SpectroFramework.h> - header which defines the classes in the
	  application framwork.
        - <iostream.h>  - Which defines classes in the C++ I/O subsystem.

   The bulk of the program is the definition of a class: MyClass which extends
   DAQROCNode, definining and implementing the operator() member function.
   This member function is called when Spectrodaq has initialized and is
   ready to run application code.  The implementation of that function
   simply puts the message "Hello World" to stdout.

   The final line of the example declares an instance of MyClass.  This
   instance is the application object which will actually be run by
   spectrodaq.

	This example shows the general pattern which you must follow to write
  Spectrodaq clients:
	- Include the necessary headers (<spectrodaq.h> <SpectroFramework.h>
          at a minimum.
        - Write a subclass to DAQROCNode which defines the behavior of your
          application.  The entry point to the program will be the operator()
	  member function which has the same signature as the main function.
	  be sure not to provide an implementation of main() as that's provided
          by the spectrodaq client libraries.
        - Declare an instance of this class to provide spectrodaq with
	  an application object to run.

  \subsection Makefile Writing a Makefile for framework programs.

	Writing a Makefile to build your application requires:
	- Obtaining the compilation and link flags needed by spectrodaq.
	- Listing the dependencies between modules, and build rules needed
	  to get from indenendent to dependent half of these dependencies.

   For the example in 
   \ref Writing "the previous section", the resulting Makefile might look like
   \include docexamples/minimal.mak  The first four macro definitions group
   together the compilation and load flags needed by spectrodaq and the 
   framework into two macros CXXFLAGS (compile flags), and LDFLAGS (loader 
   flags).

	Two dependencies describe how to build the object from the source,
   and the executable from the object.  Note that it may also be wise to 
   include the -ggdb flag in LDFLAGS so that you can use the gdb debugger.

  \section Concepts  General concepts.

  The following is a list of general concepts which are used by the event
  framework and should be understood.

  - \link Subclassing
    Subclassing  a base class to extend or provide functionality.
    \endlink
  - \link Registration
    Object registries
    \endlink and object naming.
  - \link EventDriven
    Event driven programming.
    \endlink
  - \link TCPIP 
       TCP/IP client/server programming
    \endlink 
    with sockets.
  - The events which are understood by the application framework:
    -# \link LocationMonitors
        Location monitors:
       \endlink
        Low latency monitoring of a volatile memory location.
    -# \link FileEvents
        File descriptor events:
        \endlink
        Events which occur when a file descriptor is readable or writable
	or has some other special condition (exception) pending.
    -# \link BufferEvent
       Spectrodaq Buffer Events
       \endlink
       Events which occur when a spectrodaq makes a buffer available to the
       application along a link.
    -# \link ServerEvent
       Server accept events:
       \endlink
       Events which occur when a TCP/IP server receives a connection request
       from a client.
    -# \link SocketEvents
       Server Instance events:
       \endlink
       Events which occur when an instance of a TCP/IP server connected
       to an active client receives a request from the client.
   - Guest event loops including:
     -# \link Synchronization
	Synchronization of guest event loops
	\endlink
	 with other framework code.
     -# \link TCLGuests
	Tcl/Tk guest event loops
        \endlink
     -# \link XtGuests
        X11/Xt guest event loops
        \endlink
   - \link configsys The Configuration subsystem. \endlink

 */
