

package require tcltest

package require MockCCUSB

tcltest::test pkgRequire-0 {Test that we can require the package
} {package require phillips71xx } 11.0

# we don't want to deal with swig vector<uint16_t> so fool the system
# by redefining our conversion function
namespace eval CCUSBDriverSupport {
  proc shortsListToTclList {stackvar {grouping 2}} {
    upvar $stackvar stack
    return $stack
  }
}

proc setup {} {
  MockCCUSB::Controller ::ctlr
  APhillips71xx ::dev ::ctlr 10

  MockCCUSB::ReadoutList ::stack

  rename cccusbreadoutlist::CCCUSBReadoutList _old
  rename MockCCUSB::ReadoutList cccusbreadoutlist::CCCUSBReadoutList

}


proc tearDown {} {
  ::ctlr destroy
  ::stack destroy
  itcl::delete object ::dev

  rename cccusbreadoutlist::CCCUSBReadoutList MockCCUSB::ReadoutList 
  rename _old cccusbreadoutlist::CCCUSBReadoutList
}


tcltest::test setctlr-0 {Test that we set and get properly
} -setup { 
  setup 
} -cleanup { 
  tearDown
} -body {
  ::dev SetController name
  ::dev GetController 
} -result "name"


tcltest::test clear-0 {clear adds proper NA(3)F(11) 
} -setup { 
  setup 
} -cleanup { 
  tearDown
} -body {
  ::dev Clear
  ::ctlr getHistory
} -result "{control 10 3 11}"




tcltest::test enableLAM-0 {Test that NA(0)F(26) is set
} -setup { 
  setup 
} -cleanup { 
  tearDown
} -body {
  ::dev EnableLAM
  ::ctlr getHistory
} -result "{control 10 0 26}"


tcltest::test testLAM-0 {Test that NA(0)F(8) is set
} -setup { 
  setup 
} -cleanup { 
  tearDown
} -body {
  ::dev TestLAM
  ::ctlr getHistory
} -result "{control 10 0 8}"




tcltest::test disableLAM-0 {Test that NA(0)F(24) is set
} -setup { 
  setup 
} -cleanup { 
  tearDown
} -body {
  ::dev DisableLAM
  ::ctlr getHistory
} -result "{control 10 0 24}"





tcltest::test setControlRegister-0 {Test that NA(0)F(19) is set
} -setup { 
  setup 
} -cleanup { 
  tearDown
} -body {
  ::dev SetControlRegister 0xffff
  ::ctlr getHistory
} -result "{write24 10 0 19 0xffff}"



tcltest::test resetControlRegister-0 {Test that NA(0)F(23) is called 
} -setup { 
  setup 
} -cleanup { 
  tearDown
} -body {
  ::dev ResetControlRegister 0xffff
  ::ctlr getHistory
} -result "{write24 10 0 23 0xffff}"





tcltest::test ReadControlRegister-0 {Test that NA(0)F(6) is called 
} -setup { 
  setup 
} -cleanup { 
  tearDown
} -body {
  ::dev ReadControlRegister
  ::ctlr getHistory
} -result "{read24 10 0 6 0}"





tcltest::test ReadHitRegister-0 {Test that NA(1)F(6) is called 
} -setup { 
  setup 
} -cleanup { 
  tearDown
} -body {
  ::dev ReadHitRegister
  ::ctlr getHistory
} -result "{read24 10 1 6 0}"




tcltest::test ReadChannel-0 {Test that NA(x)F(0) is called 
} -setup { 
  setup 
} -cleanup { 
  tearDown
} -body {
  for {set ch 0} {$ch < 16} {incr ch} { 
    ::dev ReadChannel $ch
  }
  ::ctlr getHistory
} -result [list {read24 10 0 0 0} \
                {read24 10 1 0 0} \
                {read24 10 2 0 0} \
                {read24 10 3 0 0} \
                {read24 10 4 0 0} \
                {read24 10 5 0 0} \
                {read24 10 6 0 0} \
                {read24 10 7 0 0} \
                {read24 10 8 0 0} \
                {read24 10 9 0 0} \
                {read24 10 10 0 0} \
                {read24 10 11 0 0} \
                {read24 10 12 0 0} \
                {read24 10 13 0 0} \
                {read24 10 14 0 0} \
                {read24 10 15 0 0}]



tcltest::test ReadChannel-0 {Test that NA(x)F(0) is called 
} -setup { 
  setup 
} -cleanup { 
  tearDown
} -body {
  for {set ch 0} {$ch < 16} {incr ch} { 
    ::dev ReadChannelLAM $ch
  }
  ::ctlr getHistory
} -result [list {read24 10 0 0 1} \
                {read24 10 1 0 1} \
                {read24 10 2 0 1} \
                {read24 10 3 0 1} \
                {read24 10 4 0 1} \
                {read24 10 5 0 1} \
                {read24 10 6 0 1} \
                {read24 10 7 0 1} \
                {read24 10 8 0 1} \
                {read24 10 9 0 1} \
                {read24 10 10 0 1} \
                {read24 10 11 0 1} \
                {read24 10 12 0 1} \
                {read24 10 13 0 1} \
                {read24 10 14 0 1} \
                {read24 10 15 0 1}]




#tcltest::test ReadSparse-0 {Test that sparse readout is properly formatted
#} -setup { 
#  setup 
#} -cleanup { 
#  tearDown
#} -body {
#  ::dev ReadSparse
#  ::ctlr getHistory
#} -result "{addressPatternRead16 10 1 6 0} {read24 10 0 0 0}"





tcltest::test WritePedestals-0 {This fails because the MockCCUSB is not up to the task..
However, it will not read back the data it wrote, so check that it behaves properly.
} -setup { 
  setup 
} -cleanup { 
  tearDown
} -body {
  set peds [list 10 11 12 13 14 15 16 17 \
                 18 19 20 21 22 23 24 25]
  ::dev WritePedestals $peds
   
  ::ctlr getHistory
} -result "APhillips71xx::WritePedestals Failed to set the pedestal values. Read back different values than were written." -returnCodes 1



tcltest::test SetProgrammingMode-0 {Test that we can set the programming mode
} -setup { 
  setup
} -cleanup {
  tearDown
} -body {
  ::dev SetProgrammingMode 0
  ::dev SetProgrammingMode 1
  ::dev SetProgrammingMode 2
  ::dev SetProgrammingMode 4 
  ::ctlr getHistory
} -result [list {write24 10 0 17 0} {write24 10 1 17 0} {write24 10 2 17 0} \
                {write24 10 4 17 0}]



tcltest::test SetPedestals-0 {Test that we can set the pedestals 
} -setup { 
  setup
} -cleanup {
  tearDown
} -body {
  set peds [list 10 11 12 13 14 15 16 17 \
                 18 19 20 21 22 23 24 25]
  ::dev SetPedestals $peds
  ::ctlr getHistory
} -result [list {write24 10 0 17 0} \
                {write24 10 0 20 10} \
                {write24 10 1 20 11} \
                {write24 10 2 20 12} \
                {write24 10 3 20 13} \
                {write24 10 4 20 14} \
                {write24 10 5 20 15} \
                {write24 10 6 20 16} \
                {write24 10 7 20 17} \
                {write24 10 8 20 18} \
                {write24 10 9 20 19} \
                {write24 10 10 20 20} \
                {write24 10 11 20 21} \
                {write24 10 12 20 22} \
                {write24 10 13 20 23} \
                {write24 10 14 20 24} \
                {write24 10 15 20 25}] 

tcltest::test SetPedestals-1 {Test that it fails when ped value is too large 
} -setup { 
  setup
} -cleanup {
  tearDown
} -body {
  set peds [list 4096 ]
  ::dev SetPedestals $peds
} -result {APhillips71xx::sSetPedestals at least one pedestal value is out of range. Must be in range [-4095,4095].} -returnCodes 1

tcltest::test SetPedestals-2 {Test that it fails when ped value is too small
} -setup { 
  setup
} -cleanup {
  tearDown
} -body {
  set peds [list -4096]
  ::dev SetPedestals $peds
} -result {APhillips71xx::sSetPedestals at least one pedestal value is out of range. Must be in range [-4095,4095].} -returnCodes 1

tcltest::test SetPedestals-3 {Test that only the first 16 pedestal values are
set 
} -setup { 
  setup
} -cleanup {
  tearDown
} -body {
  set peds [list 10 11 12 13 14 15 16 17 \
                 18 19 20 21 22 23 24 25 \
                 26 27]
  ::dev SetPedestals $peds
  ::ctlr getHistory
} -result [list {write24 10 0 17 0} \
                {write24 10 0 20 10} \
                {write24 10 1 20 11} \
                {write24 10 2 20 12} \
                {write24 10 3 20 13} \
                {write24 10 4 20 14} \
                {write24 10 5 20 15} \
                {write24 10 6 20 16} \
                {write24 10 7 20 17} \
                {write24 10 8 20 18} \
                {write24 10 9 20 19} \
                {write24 10 10 20 20} \
                {write24 10 11 20 21} \
                {write24 10 12 20 22} \
                {write24 10 13 20 23} \
                {write24 10 14 20 24} \
                {write24 10 15 20 25}] 





tcltest::test SetLowerThresholds-0 {Test that we can set the lower thresholds
} -setup { 
  setup
} -cleanup {
  tearDown
} -body {
  set lowerThresh [list 10 11 12 13 14 15 16 17 \
                 18 19 20 21 22 23 24 25]
  ::dev SetLowerThresholds $lowerThresh
  ::ctlr getHistory
} -result [list {write24 10 1 17 0} \
                {write24 10 0 20 10} \
                {write24 10 1 20 11} \
                {write24 10 2 20 12} \
                {write24 10 3 20 13} \
                {write24 10 4 20 14} \
                {write24 10 5 20 15} \
                {write24 10 6 20 16} \
                {write24 10 7 20 17} \
                {write24 10 8 20 18} \
                {write24 10 9 20 19} \
                {write24 10 10 20 20} \
                {write24 10 11 20 21} \
                {write24 10 12 20 22} \
                {write24 10 13 20 23} \
                {write24 10 14 20 24} \
                {write24 10 15 20 25}] 

tcltest::test SetLowerThresholds-1 {Test that negative threshold fails 
} -setup { 
  setup
} -cleanup {
  tearDown
} -body {
  set lowerThresh [list -1]
  ::dev SetLowerThresholds $lowerThresh
} -result {APhillips71xx::sSetLowerThresholds at least one threshold value is out of range. Must be in range [0,4095].} -returnCodes 1


tcltest::test SetLowerThresholds-2 {Test that too large of a threshold fails
} -setup { 
  setup
} -cleanup {
  tearDown
} -body {
  set lowerThresh [list 4096]
  ::dev SetLowerThresholds $lowerThresh
} -result {APhillips71xx::sSetLowerThresholds at least one threshold value is out of range. Must be in range [0,4095].} -returnCodes 1



tcltest::test WriteLowerThresholds-0 {This fails because the MockCCUSB is not up to the task..
However, it will not read back the data it wrote, so check that it behaves properly.
} -setup { 
  setup 
} -cleanup { 
  tearDown
} -body {
  set llt [list 10 11 12 13 14 15 16 17 \
                 18 19 20 21 22 23 24 25]
  ::dev WriteLowerThresholds $llt
} -result "APhillips71xx::WriteLowerThresholds Failed to set the lower threshold values. Read back different values than were written." -returnCodes 1


tcltest::test SetLowerThresholds-3 {Test that we can set the lower thresholds
} -setup { 
  setup
} -cleanup {
  tearDown
} -body {
  set lowerThresh [list 10 11 12 13 14 15 16 17 \
                 18 19 20 21 22 23 24 25 \
                 26 27]
  ::dev SetLowerThresholds $lowerThresh
  ::ctlr getHistory
} -result [list {write24 10 1 17 0} \
                {write24 10 0 20 10} \
                {write24 10 1 20 11} \
                {write24 10 2 20 12} \
                {write24 10 3 20 13} \
                {write24 10 4 20 14} \
                {write24 10 5 20 15} \
                {write24 10 6 20 16} \
                {write24 10 7 20 17} \
                {write24 10 8 20 18} \
                {write24 10 9 20 19} \
                {write24 10 10 20 20} \
                {write24 10 11 20 21} \
                {write24 10 12 20 22} \
                {write24 10 13 20 23} \
                {write24 10 14 20 24} \
                {write24 10 15 20 25}] 





tcltest::test SetUpperThresholds-0 {Test that we can set the upper thresholds
} -setup { 
  setup
} -cleanup {
  tearDown
} -body {
  set upperThresh [list 10 11 12 13 14 15 16 17 \
                 18 19 20 21 22 23 24 25]
  ::dev SetUpperThresholds $upperThresh
  ::ctlr getHistory
} -result [list {write24 10 2 17 0} \
                {write24 10 0 20 10} \
                {write24 10 1 20 11} \
                {write24 10 2 20 12} \
                {write24 10 3 20 13} \
                {write24 10 4 20 14} \
                {write24 10 5 20 15} \
                {write24 10 6 20 16} \
                {write24 10 7 20 17} \
                {write24 10 8 20 18} \
                {write24 10 9 20 19} \
                {write24 10 10 20 20} \
                {write24 10 11 20 21} \
                {write24 10 12 20 22} \
                {write24 10 13 20 23} \
                {write24 10 14 20 24} \
                {write24 10 15 20 25}] 

tcltest::test SetUpperThresholds-1 {Test that negative threshold fails 
} -setup { 
  setup
} -cleanup {
  tearDown
} -body {
  set lowerThresh [list -1]
  ::dev SetUpperThresholds $lowerThresh
} -result {APhillips71xx::sSetUpperThresholds at least one threshold value is out of range. Must be in range [0,4095].} -returnCodes 1


tcltest::test SetUpperThresholds-2 {Test that too large of a threshold fails
} -setup { 
  setup
} -cleanup {
  tearDown
} -body {
  set lowerThresh [list 4096]
  ::dev SetUpperThresholds $lowerThresh
} -result {APhillips71xx::sSetUpperThresholds at least one threshold value is out of range. Must be in range [0,4095].} -returnCodes 1



tcltest::test WriteUpperThresholds-0 {This fails because the MockCCUSB is not up to the task..
However, it will not read back the data it wrote, so check that it behaves properly.
} -setup { 
  setup 
} -cleanup { 
  tearDown
} -body {
  set llt [list 10 11 12 13 14 15 16 17 \
                 18 19 20 21 22 23 24 25]
  ::dev WriteUpperThresholds $llt
} -result "APhillips71xx::WriteUpperThresholds Failed to set the upper threshold values. Read back different values than were written." -returnCodes 1

tcltest::test SetUpperThresholds-3 {Test that only the first 16 values are
written 
} -setup { 
  setup
} -cleanup {
  tearDown
} -body {
  set upperThresh [list 10 11 12 13 14 15 16 17 \
                        18 19 20 21 22 23 24 25 \
                        26 27]
  ::dev SetUpperThresholds $upperThresh
  ::ctlr getHistory
} -result [list {write24 10 2 17 0} \
                {write24 10 0 20 10} \
                {write24 10 1 20 11} \
                {write24 10 2 20 12} \
                {write24 10 3 20 13} \
                {write24 10 4 20 14} \
                {write24 10 5 20 15} \
                {write24 10 6 20 16} \
                {write24 10 7 20 17} \
                {write24 10 8 20 18} \
                {write24 10 9 20 19} \
                {write24 10 10 20 20} \
                {write24 10 11 20 21} \
                {write24 10 12 20 22} \
                {write24 10 13 20 23} \
                {write24 10 14 20 24} \
                {write24 10 15 20 25}] 






tcltest::test GetLastProgrammedData-0 {Test that we can read the last set of programmed data
} -setup { 
  setup
} -cleanup {
  tearDown
} -body {
  ::dev GetLastProgrammedData
  ::ctlr getHistory
} -result [list {read24 10 0 1 0} \
                {read24 10 1 1 0} \
                {read24 10 2 1 0} \
                {read24 10 3 1 0} \
                {read24 10 4 1 0} \
                {read24 10 5 1 0} \
                {read24 10 6 1 0} \
                {read24 10 7 1 0} \
                {read24 10 8 1 0} \
                {read24 10 9 1 0} \
                {read24 10 10 1 0} \
                {read24 10 11 1 0} \
                {read24 10 12 1 0} \
                {read24 10 13 1 0} \
                {read24 10 14 1 0} \
                {read24 10 15 1 0}] 



tcltest::test ReadDataIsAsExpected-0 {Test for data that is the same except for QX 
} -setup { 
  setup
} -cleanup {
  tearDown
} -body {

  set expected [list 0 1 2 3 4]
  set readback [list [expr {3<<24}] \
                     [expr {(3<<24)|1}] \
                     [expr {(3<<24)|2}] \
                     [expr {(3<<24)|3}] \
                     [expr {(3<<24)|4}] ]

  ::dev ReadDataIsAsExpected $expected $readback 
} -result 1

tcltest::test ReadDataIsAsExpected-1 {Test that data that differs beyond QX returns 0 
} -setup { 
  setup
} -cleanup {
  tearDown
} -body {

  set expected [list 0 1 3 3 4]
  set readback [list [expr {3<<24}] \
                     [expr {(3<<24)|1}] \
                     [expr {(3<<24)|2}] \
                     [expr {(3<<24)|3}] \
                     [expr {(3<<24)|4}] ]

  ::dev ReadDataIsAsExpected $expected $readback 
} -result 0

tcltest::cleanupTests
