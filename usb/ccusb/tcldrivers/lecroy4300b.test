

package require tcltest
package require MockCCUSB
package require Itcl
package require cccusbreadoutlist

tcltest::test pkgrequire-0 {Ensure that we can require the package
} {package require lecroy4300b} 11.0


# we don't want to deal with swig vector<uint16_t> so fool the system
# by redefining our conversion function
namespace eval CCUSBDriverSupport {
  proc shortsListToTclList {stackvar {grouping 2}} {
    upvar $stackvar stack
    return $stack
  }
}



proc setup {} {
  MockCCUSB::Controller ::ctlr
  MockCCUSB::ReadoutList ::stack

  ALeCroy4300B ::dev ::ctlr 23

  rename cccusbreadoutlist::CCCUSBReadoutList _old
  rename MockCCUSB::ReadoutList cccusbreadoutlist::CCCUSBReadoutList

}

proc tearDown {} {
  ::ctlr destroy
  ::stack destroy

  itcl::delete object ::dev

  rename cccusbreadoutlist::CCCUSBReadoutList MockCCUSB::ReadoutList 
  rename _old cccusbreadoutlist::CCCUSBReadoutList
}




tcltest::test setgetController-0 {Test that we can set and retrieve cltr
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  ::dev SetController aNewController
  ::dev GetController 
} -result "aNewController"


tcltest::test setPedestals-0 {Test that setting the pedestals does the right thing 
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  set peds [list 10 10 10 10 10 10 10 10 \
                 10 10 10 10 10 10 10 10]
  ::dev SetPedestals $peds
  ::dev getHistory
} -result [list {write24 23 0 17 10} \
                {write24 23 1 17 10} \
                {write24 23 2 17 10} \
                {write24 23 3 17 10} \
                {write24 23 4 17 10} \
                {write24 23 5 17 10} \
                {write24 23 6 17 10} \
                {write24 23 7 17 10} \
                {write24 23 8 17 10} \
                {write24 23 9 17 10} \
                {write24 23 10 17 10} \
                {write24 23 11 17 10} \
                {write24 23 12 17 10} \
                {write24 23 13 17 10} \
                {write24 23 14 17 10} \
                {write24 23 15 17 10} ]
  
