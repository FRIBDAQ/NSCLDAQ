

package require tcltest
package require ccusbcamac
package require snit


## Create a namespace cccusb if it doesn't exist
if {![namespace exists cccusb]} {
  namespace eval cccusb { 
  }
}

proc ::cccusb::CCCUSBRemote {name modname host port} {
  return [CMockCCUSB %AUTO%] 
}

snit::type CMockCCUSB {
  option -record  -default [list]
  option -q       -default 1 
  option -x       -default 1
  option -data    -default 1234
  
  constructor {args} {
    $self configurelist $args
  }

  method simpleWrite16 {n a f d} {
    lappend options(-record) "simpleWrite16 $n $a $f $d"
    return [$self encodeQX 0]
  }

  method simpleWrite24 {n a f d} {
    lappend options(-record) "simpleWrite24 $n $a $f $d"
    return [$self encodeQX 0]
  }

  method simpleRead16 {n a f} {
    lappend options(-record) "simpleRead16 $n $a $f"
    return [expr {[$self encodeQX 24]|$options(-data)}]
  }

  method simpleRead24 {n a f} {
    lappend options(-record) "simpleRead24 $n $a $f"
    return [expr {[$self encodeQX 24]|$options(-data)}]
  }
  
  method simpleControl {n a f} {
    lappend options(-record) "simpleControl $n $a $f"
    return [$self encodeQX 0]
  }

  method executeList {n a f maxn} {
  
  }

  method c {} {
    lappend options(-record) "c"
  }

  method z {} {
    lappend options(-record) "z"
  }

  method inhibit {} {
    lappend options(-record) "inhibit"
  }

  method uninhibit {} {
    lappend options(-record) "uninhibit"
  }

  method encodeQX {shift} {
    set qx [expr {($options(-q)<<1)|$options(-x)}]
    return [expr {$qx<<$shift}]
  }
}



tcltest::test iswrite-0 {Test that valid write f values return true 
} -body {
  ccusbcamac::_isWrite 16
} -result 1


tcltest::test iswrite-1 {Test that valid write f values return true
} -body {
  ccusbcamac::_isWrite 23 
} -result 1

tcltest::test iswrite-2 {Test that bad write f values return false
} -body {
  ccusbcamac::_isWrite 0 
} -result 0

tcltest::test iswrite-3 {Test that bad write f values return false
} -body {
  ccusbcamac::_isWrite 24 
} -result 0

tcltest::test iswrite-4 {Test that bad write f values return false
} -body {
  ccusbcamac::_isWrite 15 
} -result 0



tcltest::test isread-0 {Test that valid read f values return true
} -body {
  ccusbcamac::_isRead 0 
} -result 1

tcltest::test isread-1 {Test that valid read f values return true
} -body {
  ccusbcamac::_isRead 7 
} -result 1

tcltest::test isread-2 {Test that bad read f values return false
} -body {
  ccusbcamac::_isRead 8 
} -result 0

tcltest::test isread-3 {Test that bad read f values return false
} -body {
  ccusbcamac::_isRead 28 
} -result 0





tcltest::test cdconn-0 {Test that the value are properly stored
} -body {
  ccusbcamac::cdconn 0 1 localhost 27000 ccusb

  # This should produce an id of 1
  set conn [dict get $ccusbcamac::connectionInfo 1 ]

  set val0Good [expr {[lindex $conn 0] eq "localhost"}]
  set val1Good [expr {[lindex $conn 1] == 27000}]
  set val2Good [expr {[lindex $conn 2] eq "ccusb"}]
  
  expr {$val0Good && $val1Good && $val2Good}
} -result 1


tcltest::test cdconn-1 {Test that multiple values are properly stored
} -body {
  ccusbcamac::cdconn 0 1 localhost 27000 ccusb0
  ccusbcamac::cdconn 3 3 spdaq12 27123 ccusb1

  set ::ccusbcamac::connectionInfo
} -result {1 {localhost 27000 ccusb0} 24 {spdaq12 27123 ccusb1}} 


set badBranchMsg {ccusbcamac::_checkValidBAndC : branch index out of range [0,7]}
set badCrateMsg {ccusbcamac::_checkValidBAndC : crate index out of range [1,7]}
set badBAndCMsg {ccusbcamac::_checkValidBAndC : branch and crate indices out of range. Branch should be in range [0,7] and crate in range [1,7]}

set CCdconnMissingMsg "::ccusbcamac::C connection info not provided. "
append CCdconnMissingMsg "cdconn needs to be called prior to calling this." 

set ZCdconnMissingMsg "::ccusbcamac::Z connection info not provided. "
append ZCdconnMissingMsg "cdconn needs to be called prior to calling this." 

tcltest::test computeID-0 {Test that b c produces correct index
} -body {
  ccusbcamac::_computeIndex 0 1 
} -result 1 

tcltest::test computeID-1 {Test that b c produces correct index
} -body {
  ccusbcamac::_computeIndex 3 7 
} -result 28 

tcltest::test computeID-2 {Test that b>7 produces error
} -body {
  ccusbcamac::_computeIndex 8 1
} -result $badBranchMsg -returnCodes 1


tcltest::test computeID-3 {Test that b<0 produces error
} -body {
  ccusbcamac::_computeIndex -1 1
} -result $badBranchMsg -returnCodes 1


tcltest::test computeID-4 {Test that c<1 produces error
} -body {
  ccusbcamac::_computeIndex 3 0 
} -result $badCrateMsg -returnCodes 1

tcltest::test computeID-5 {Test that c>7 produces error
} -body {
  ccusbcamac::_computeIndex 3 8 
} -result $badCrateMsg -returnCodes 1




tcltest::test _isValidBranchIndex-0 {test that branch index <0 produces 0
} -body {
  ccusbcamac::_isValidBranchIndex -1 
} -result 0

tcltest::test _isValidBranchIndex-1 {test that branch index >7 produces 0 
} -body {
  ccusbcamac::_isValidBranchIndex 8 
} -result 0 

tcltest::test _isValidBranchIndex-2 {test that branch index 7 produces 1
} -body {
  ccusbcamac::_isValidBranchIndex 7 
} -result 1

tcltest::test _isValidBranchIndex-3 {test that branch index 1 produces 1
} -body {
  ccusbcamac::_isValidBranchIndex 1 
} -result 1



tcltest::test _isValidCrateIndex-0 {test that crate index <1 produces 0
} -body {
  ccusbcamac::_isValidCrateIndex 0
} -result 0

tcltest::test _isValidCrateIndex-1 {test that crate index >7 produces 0 
} -body {
  ccusbcamac::_isValidCrateIndex 8 
} -result 0 

tcltest::test _isValidCrateIndex-2 {test that crate index 7 produces 1
} -body {
  ccusbcamac::_isValidCrateIndex 7 
} -result 1

tcltest::test _isValidCrateIndex-3 {test that crate index 1 produces 1
} -body {
  ccusbcamac::_isValidCrateIndex 1 
} -result 1


tcltest::test _checkValidBAndC-0 {test that good crate and branch produce nothing 
} -body {
  ccusbcamac::_checkValidBAndC 0 1 
} -result ""

tcltest::test _checkValidBAndC-1 {test that good crate and bad branch produce bad branch exception
} -body {
  ccusbcamac::_checkValidBAndC -1 1 
} -result $badBranchMsg -returnCodes 1 

tcltest::test _checkValidBAndC-2 {test that bad crate and good branch produce bad crate exception
} -body {
  ccusbcamac::_checkValidBAndC 0 -1 
} -result $badCrateMsg -returnCodes 1 

tcltest::test _checkValidBAndC-3 {test that bad crate and bad branch produce bad branch & crate exception
} -body {
  ccusbcamac::_checkValidBAndC -1 -1 
} -result $badBAndCMsg -returnCodes 1 



tcltest::test cfsa-0 {test that an f=0 produces a simpleRead24
} -body {
  ccusbcamac::cdconn 0 1 a b c
  set reg [ccusbcamac::cdreg 0 1 23]
  ccusbcamac::cfsa $reg 0 0
  [lindex $reg 0] cget -record
} -result [list "simpleRead24 23 0 0"]

tcltest::test cfsa-1 {test that an f=8 produces a simpleControl
} -body {
  ccusbcamac::cdconn 0 1 a b c
  set reg [ccusbcamac::cdreg 0 1 23]
  ccusbcamac::cfsa $reg 8 0
  [lindex $reg 0] cget -record
} -result [list "simpleControl 23 0 8"]

tcltest::test cfsa-2 {test that an f=16 produces a simpleWrite24
} -body {
  ccusbcamac::cdconn 0 1 a b c
  set reg [ccusbcamac::cdreg 0 1 23]
  ccusbcamac::cfsa $reg 16 0 200
  [lindex $reg 0] cget -record
} -result [list "simpleWrite24 23 0 16 200"]

tcltest::test cfsa-3 {test that an f=16 without data produces error
} -body {
  ccusbcamac::cdconn 0 1 a b c
  set reg [ccusbcamac::cdreg 0 1 23]
  ccusbcamac::cfsa $reg 16 0
  [lindex $reg 0] cget -record
} -result "ccusbcamac::cfsa not provided data to write"  -returnCodes 1

tcltest::test cfsa-4 {test that an f=24 without data produces error
} -body {
  ccusbcamac::cdconn 0 1 a b c
  set reg [ccusbcamac::cdreg 0 1 23]
  ccusbcamac::cfsa $reg 24 0
  [lindex $reg 0] cget -record
} -result [list "simpleControl 23 0 24"]


tcltest::test cssa-0 {test that an f=0 produces a simpleRead16
} -body {
  ccusbcamac::cdconn 0 1 a b c
  set reg [ccusbcamac::cdreg 0 1 23]
  ccusbcamac::cssa $reg 0 0
  [lindex $reg 0] cget -record
} -result [list "simpleRead16 23 0 0"]

tcltest::test cfsa-1 {test that an f=8 produces a simpleControl
} -body {
  ccusbcamac::cdconn 0 1 a b c
  set reg [ccusbcamac::cdreg 0 1 23]
  ccusbcamac::cssa $reg 8 0
  [lindex $reg 0] cget -record
} -result [list "simpleControl 23 0 8"]

tcltest::test cfsa-2 {test that an f=16 produces a simpleWrite16
} -body {
  ccusbcamac::cdconn 0 1 a b c
  set reg [ccusbcamac::cdreg 0 1 23]
  ccusbcamac::cssa $reg 16 0 200
  [lindex $reg 0] cget -record
} -result [list "simpleWrite16 23 0 16 200"]

tcltest::test cfsa-3 {test that an f=16 without data produces error
} -body {
  ccusbcamac::cdconn 0 1 a b c
  set reg [ccusbcamac::cdreg 0 1 23]
  ccusbcamac::cssa $reg 16 0
  [lindex $reg 0] cget -record
} -result "ccusbcamac::cssa not provided data to write"  -returnCodes 1

tcltest::test cfsa-4 {test that an f=24 produces simpleControl 
} -body {
  ccusbcamac::cdconn 0 1 a b c
  set reg [ccusbcamac::cdreg 0 1 23]
  ccusbcamac::cssa $reg 24 0
  [lindex $reg 0] cget -record
} -result [list "simpleControl 23 0 24"]


tcltest::test c-0 {test that valid b and c produce a c
} -body {
  ccusbcamac::cdconn 0 1 a b c
  ccusbcamac::C 0 1
  set ctlr [lindex $::ccusbcamac::lastReg 0]
  $ctlr cget -record 
} -result [list "c"]

tcltest::test c-1 {test that not calling cdconn produces error 
} -setup {
  set ::ccusbcamac::connectionInfo ""
} -body {
  ccusbcamac::C 0 1
} -result $CCdconnMissingMsg -returnCodes 1

tcltest::test z-0 {test that valid b and c produce a z
} -body {
  ccusbcamac::cdconn 0 1 a b c
  ccusbcamac::Z 0 1
  set ctlr [lindex $::ccusbcamac::lastReg 0]
  $ctlr cget -record 
} -result [list "z"]

tcltest::test z-1 {test that not calling cdconn produces error 
} -setup {
  set ::ccusbcamac::connectionInfo ""
} -body {
  ccusbcamac::Z 0 1
} -result $ZCdconnMissingMsg -returnCodes 1



tcltest::cleanupTests
