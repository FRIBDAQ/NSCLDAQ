<!-- chapter libraries -->

<chapter id='intro.ccusbcamac'>
  <title>The ccusbcamac Tcl package </title>
  <para>
    This chapter describes the <literal>ccusbcamac</literal> Tcl
    loadable package.  <literal>ccusbcamac</literal> allows Tcl scripts
    to perform CAMAC operations on CAMAC crates that are controlled by a
    Wiener CC-USB crate controller and CCUSBReadout software. All commands 
    are processed through the CCUSBReadout slow-controls server. Despite
    the presence of branch and crate indices in the API, there are no CAMAC
    branches. However, the idea of being able to control multiple CAMAC crates
    through this package is valid and the CAMAC crates are uniquely identified
    by a pair of branch and crate indices. The use of branch and crate indices simply provides
    a simple means for maintaining compatibility with scripts written to work with the
    wienercamac package and also targeting different CCUSB devices.
  </para>
  <para>
    The remainder of this chapter describes:
    <itemizedlist>
      <listitem>
        <para>
          How to incorporate this package in your scripts.
        </para>
      </listitem>
      <listitem>
        <para>
          How to use the package itself and configure the CCUSBReadout 
          slow-controls server.
        </para>
      </listitem>
    </itemizedlist>
  </para>
  <para>
    Reference material is available at
    <link linkend="manpage.ccusbcamac">ccusbcamac(3tcl)</link>.
  </para>
  <section>
    <title>Incorporating ccusbcamac in your scripts.</title>
    <para>
      Incorporating <literal>ccusbcamac</literal> in your scripts is a
      three step process:
      <orderedlist>
        <listitem>
          <para>
            The NSCLDAQ Tcl package repository must be added to the
            Tcl interpreter's package search path.
          </para>
        </listitem>
        <listitem>
          <para>
            The NSCLDAQ lib directory must be added to the
            Tcl interpreter's package search path.
          </para>
        </listitem>
        <listitem>
          <para>
            The ccusbcamac package must be loaded into the interpreter
            via an explicit <command>package require</command> command.
          </para>
        </listitem>
      </orderedlist>
    </para>
    <para>
      There are two ways to manipulate the Tcl interpreter package load
      search path.  The environment variable <varname>TCLLIBPATH</varname>
      is a space separated set of additional directories to search for packages.
      The Tcl global variable <varname>auto_path</varname> is one of the
      several Tcl variables that control the package search path.
    </para>
    <para>
      From now on we will assume that the environment variable
      <varname>DAQROOT</varname> has been defined to point to the
      top level of the NSCLDAQ installation directory tree.
      A bash shell script fragment that shows how to append the
      NSCLDAQ Tcl package repository and lib path to the <varname>TCLLIBPATH</varname>
      environment variable is shown below:
    </para>
    <informalexample>
      <programlisting>
        export TCLLIBPATH="$TCLLIBPATH $DAQROOT/TclLibs $DAQROOT/lib"
      </programlisting>
    </informalexample>
    <para>
      Similarly the code to add the NSCLDAQ Tcl package repository and 
      lib directory to the <varname>auto_path</varname> interpreter global is shown
      below:
    </para>
    <informalexample>
      <programlisting>
        global env
        global auto_path
        lappend auto_path [file join $env(DAQROOT) TclLibs]
        lappend auto_path [file join $env(DAQROOT) lib]

      </programlisting>
    </informalexample>
    <para>
      Once these directories have been added to the
      repository search path, an explicit <command>package require</command>
      as shown below must be issued prior to using the package commands:
    </para>
    <informalexample>
      <programlisting>
        package require ccusbcamac
      </programlisting>
    </informalexample>
    <para>
      The commands defined by <literal>ccusbcamac</literal> are
      defined in the <literal>ccusbcamac::</literal> namespace.
      The examples in the next section will use fully qualified command
      names (e.g. <command>::ccusbcamac::cdreg 1 1</command>).  It is
      also possible to import the commands from that namespace
      using the <command>namespace import</command> command.
      If you are also using the <literal>wienercamac</literal> or <literal>camac</literal> 
      package, this is not advisable as both packages share many of the same command names.
    </para>
  </section>
  <section>
    <title>Using ccusbcamac</title>
    <para>
       The ccusbcamac package is the client code to the slow-controls
       server in the CCUSBReadout program. All communication with the 
       server is via the TCP/IP protocol and must proceed after a connection
       has been established. The server-side handler is the CCCUSBControl
       class, which must be registered to the slow controls server by adding
       a line to the controlconfig.tcl script such as:
     </para>
     <informalexample>
       <programlisting>
         Module create ccusb ctlr
        </programlisting>
     </informalexample>
     <para>
       The example creates a new control module named "ctlr" and is of type
       ccusb. In order to establish a functional connection, the name of
       the module, the name of the host running the server, and the port
       on which it listens must be provided to the ccusbcamac package. 
       These three pieces of connection information are associated and stored with a 
       branch and crate index by the <command>cdconn</command>
       command. This leads us to the major difference between the <literal>ccusbcamac</literal>
       package and the <literal>wienercamac</literal>
       packages that affects the user. The difference is that the 
       <command>cdconn</command> command MUST be
       called prior to any other methods for a given branch and crate index combination. 
       If for some reason the
       user forgets to call <command>cdconn</command> prior to calling <command>cdreg</command>, they
       will be presented with an error. It is not essential, but it is not
       a bad idea to check whether or not the server is accepting connections
       before calling <command>cdreg</command> using the <command>isOnline</command>
       procedure.
     </para>
    <para>
      The commands in the package are loosely based on a subset of the
      ESONE CAMAC function standard (IEEE 785).  In that standard, the unit
      of address is a single CAMAC module.  The <command>cdreg</command>
      produces a handle to a module which is then used in subsequent
      commands that operate on that module. Extensions to the standard
      include commands that allow you to get the graded lam register values,
      sense and control the inhibit and determine if the crate is online.
    </para>
    <para>
      While the ESONE block transfer functions are supported, connecting
      a LAM to a script is not.  The example below enables the LAM on a module
      in Slot 15 of the first controler in VME crate 0.
    </para>
    <example>
      <title>Enabling a module Lam with <literal>ccusbcamac</literal></title>
      <programlisting>

        # Load the package.

        lappend auto_path [file join $env(DAQROOT) TclLibs]
        lappend auto_path [file join $env(DAQROOT) lib]
        package require ccusbcamac

        # Provide the connection information for b=0, c=1
        set host   localhost
        set port   27000      ;# The standard slow-controls server port
        set module ctlr
        ccusbcamac::cdconn 0 1 $host $port $module

        #  Initialize the crate and uninhibit it

        ccusbcamac::C 0 1
        ccusbcamac::Z 0 1
        ccusbcamac::Inhibit 0 1 false

        # Make the module handle:

        set module [ccusbcamac::cdreg 0 1 15]

        # F26 at any subaddress normally enables LAM:

        ccusbcamac::cssa $module 26 0
      </programlisting>
    </example>

  </section>
</chapter>


<!-- /chapter -->


<!-- manpage 3ccusb -->

<refentry id="manpage.ccusbcamac">
  <refmeta>
    <refentrytitle>ccusbcamac</refentrytitle>
    <manvolnum>3ccusb</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ccusbcamac</refname>
    <refpurpose>Tcl Script CAMAC access CCUSBReadout slow-controls server</refpurpose>
  </refnamediv>

  <refsynopsisdiv>
    <cmdsynopsis>
      <command>
        package require ccusbcamac
      </command>
    </cmdsynopsis>

    <cmdsynopsis>
      <command>
        ccusbcamac::cdreg  b c n 
      </command>
    </cmdsynopsis>
    <cmdsynopsis>
      <command>
        ccusbcamac::cfsa   reg f a ?d?       
      </command>
    </cmdsynopsis>
    <cmdsynopsis>
      <command>
        ccusbcamac::cssa   reg f a ?d?       
      </command>
    </cmdsynopsis>
    <cmdsynopsis>
      <command>
        ccusbcamac::qstop  reg f a ?maxn?    
      </command>
    </cmdsynopsis>
    <cmdsynopsis>
      <command>
        ccusbcamac::qscan  reg f a ?maxn?    
      </command>
    </cmdsynopsis>
    <cmdsynopsis>
      <command>
        ccusbcamac::cblock reg f a num      
      </command>
    </cmdsynopsis>
    <cmdsynopsis>
      <command>
        ccusbcamac::isOnline b c
      </command>
    </cmdsynopsis>
    <cmdsynopsis>
      <command>
        ccusbcamac::getGl    b 
      </command>
    </cmdsynopsis>
    <cmdsynopsis>
      <command>
        ccusbcamac::C        b c 
      </command>
    </cmdsynopsis>
    <cmdsynopsis>
      <command>
        ccusbcamac::Z        b c
      </command>
    </cmdsynopsis>
    <cmdsynopsis>
      <command>
        ccusbcamac::isInhibited b c 
      </command>
    </cmdsynopsis>
    <cmdsynopsis>
      <command>
        ccusbcamac::Inhibit  b c  bool
      </command>
    </cmdsynopsis>
    <cmdsynopsis>
      <command>
        ccusbcamac::ReadLams b c 
      </command>
    </cmdsynopsis>
  </refsynopsisdiv>
  <refsect1>
    <title>DESCRIPTION</title>
    <para>
      Summary of the command
    </para>
  </refsect1>
  <refsect1>
    <title>
      PACKAGE COMMANDS
    </title>
    <para>
      The commands below share many of the same parameters:
      <variablelist>
        <varlistentry>
          <term><replaceable>b</replaceable></term>
          <listitem>
            <para>
              The branch index to use when computing the CC-USB's
              unique index.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><replaceable>c</replaceable></term>
          <listitem>
            <para>
              A CAMAC crate number to be used when computing the 
              CC-USB's unique index.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><replaceable>n</replaceable></term>
          <listitem>
            <para>
              The slot number of a module in a CAMAC crate.  Slots in
              a CAMAC crate are numbered from 1 starting at the left.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><replaceable>a</replaceable></term>
          <listitem>
            <para>
              The subaddress within a module.   A CAMAC modules is
              defined to have 16 subaddresses numbered 0-15.
              Each module uses this set of subaddresses differently.\
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><replaceable>reg</replaceable></term>
          <listitem>
            <para>
              A CAMAC module handle.  These are produced using the
              <command>ccusbcamac::cdreg</command> command below.  This is
              used to select the CAMAC module operated on by several
              of the commands.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </para>
    <cmdsynopsis>
      <command>
        package require ccusbcamac
      </command>
    </cmdsynopsis>
    <para>
      Loads the commands in the <literal>ccusbcamac</literal> package
      into the interpreter provided that the NSCLDAQ Tcl package repository
      and lib directory are in the interpreter search path.  See
      <link linkend='intro.ccusbcamac'>The ccusbcamac Tcl Package</link> chapter
      for information about how to add the NSCLDAQ Tcl package repository to
      the interpreter search path.
    </para>
    <cmdsynopsis>
      <command>
        ccusbcamac::cdconn  b c host port module 
      </command>
    </cmdsynopsis>
    <para>
        Registers the name of the host running the CCUSBReadout program, the
        port it listens for connections on, and the name of the module loaded
        into the slow-controls server into a connection information database.
        The <parameter>b</parameter> and <parameter>c</parameter> parameters are
        used to compute a unique index to associate the connection information
        to. For any given <parameter>b</parameter> and <parameter>c</parameter>
        combination, this MUST be called before any other procs sharing the same
        comabination of <parameter>b</parameter> and <parameter>c</parameter>.
    </para>
    <cmdsynopsis>
      <command>
        ccusbcamac::cdreg  b c n
      </command>
    </cmdsynopsis>
    <para>
      Creates a handle to a module in the CAMAC system.  
      The command returns a handle which is the <parameter>reg</parameter>
      parameter in subsequent commands that operate on a module. A connection
      is established with the slow-controls server using the information passed
      in the <command>cdconn</command> proc.
    </para>
    <cmdsynopsis>
      <command>
        ccusbcamac::cfsa   reg f a ?d?       
      </command>
    </cmdsynopsis>
    <para>
      Performs a CAMAC operation on the module <parameter>reg</parameter>.
      <parameter>reg</parameter> is a module handle created by a call to
      <command>cdreg</command>.  If the function transfers data the least
      significant 24 bits of data are transferred.  If the function is a write
      operation, the <parameter>d</parameter> parameter is required and is the
      data to write.
    </para>
    <para>
      The return value is a 3 element Tcl list.  The second element of the list
      is the Q response.  The third element of the list is the X response. The
      meaning of the first element of the list depends on the <parameter>f</parameter>
      parameter.  If <parameter>f</parameter> is the read operation, this
      will be the value read from the module.  If <parameter>f</parameter> is
      a write operation, this will be the <parameter>d</parameter> parameter.
      If <parameter>f</parameter> is a control operation (non data transfer),
      this will be zero.
    </para>
    <cmdsynopsis>
      <command>
        ccusbcamac::cssa   reg f a ?d?       - perform a 16 bit camac operation
      </command>
    </cmdsynopsis>
    <para>
      Identical to <command>ccusbcamac::cfsa</command> however all data transfers
      only transfer the least significant 16 bits.  Since the data path to the
      controller is only 16 bits, this is significantly faster than 24 bit transfers
      when the top bits are not required.
    </para>
    <cmdsynopsis>
      <command>
        ccusbcamac::qstop  reg f a ?maxn?    
      </command>
    </cmdsynopsis>
    <para>
      Performs the same read operation until the operation no longer returns
      a Q.  If the optional <parameter>maxn</parameter> parameter is present
      this also sets an upper limit in the number of transferrs.  The return
      value from this is a list of the data read from the module.  Only read functions
      are suportedby this and all block functions. At the moment, these only
      support 16-bit dataway operations.
    </para>
    <cmdsynopsis>
      <command>
        ccusbcamac::qscan  reg f a ?maxn?    
      </command>
    </cmdsynopsis>
    <para>
      Performs a Qscan block transfer.  After each read operation,
      the subaddress is incremented.  Once a module no longer responds
      with a Q, the subaddress is reset to zero and the slot is incremented.
      This continues until no X response is returned.  If the optional
      parameter <parameter>maxn</parameter> is provided, it limits the
      maximum transfer count to <parameter>maxn</parameter>. At the moment,
      these only support 16-bit dataway operations.
    </para>
    <para>
      The return value is a list of data that was returned from the module.
      These are textual ascii values, not a binary block.
    </para>
    <cmdsynopsis>
      <command>
        ccusbcamac::cblock reg f a num       
      </command>
    </cmdsynopsis>
    <para>
      Peforms <parameter>num</parameter> read operations on the module
      specified by <parameter>reg</parameter>.  Data read are returned as the
      module's result in a Tcl list.
    </para>
    <cmdsynopsis>
      <command>
        ccusbcamac::isOnline b c     
      </command>
    </cmdsynopsis>
    <para>
      Returns true if the specified VME create is online (attached to the
      controller and powered up).
    </para>  
    <cmdsynopsis>
      <command>
        ccusbcamac::getGl    b        
      </command>
    </cmdsynopsis>
    <para>
        NOT IMPLEMENTED in the ccusbcamac package because there is not meaningful
        translation of it to a CC-USB.
    </para>
    <cmdsynopsis>
      <command>
        ccusbcamac::C        b c       
      </command>
    </cmdsynopsis>
    <para>
      Peforms a C cycle on the selected crate
    </para>
    <cmdsynopsis>
      <command>
        ccusbcamac::Z        b c       
      </command>
    </cmdsynopsis>
    <para>
      Performs a Z cycle on the selected crate.
    </para>
    <cmdsynopsis>
      <command>
        ccusbcamac::isInhibited b c
      </command>
    </cmdsynopsis>
    <para>
      Returns non zero if te specified crate is inhibited
    </para>
    <cmdsynopsis>
      <command>
        ccusbcamac::Inhibit  b c  bool
      </command>
    </cmdsynopsis>
    <para>
      Sets or clears the inhibits for the selected crate.
      If <parameter>bool</parameter> is on zero the crate is
      inhibited otherwise it's uninhibited.
    </para>
    <cmdsynopsis>
      <command>
        ccusbcamac::ReadLams b c  
      </command>
    </cmdsynopsis>
    <para>
      Reads the crate LAM register.
    </para>
  </refsect1>

</refentry>


<!-- /manpage -->

