package require tcltest
package require snit
package require mcfd16usb


tcltest::test pkgrequire-0 {Ensure that we can require the package
} {package require mcfd16gui} 1.0

snit::method MCFD16IndividualView BuildGUI {} {}

snit::method MCFD16USB GetPolarity {ch} {return neg}
snit::method MCFD16USB GetGain {ch} { return 1}
snit::method MCFD16USB GetBandwidthLimit {} {return 1 }
snit::method MCFD16USB GetDiscriminatorMode {} {return cfd }
snit::method MCFD16USB GetThreshold {ch} {return 24 }
snit::method MCFD16USB GetWidth {ch} {return 25 }
snit::method MCFD16USB GetDeadtime {ch} {return 27 }
snit::method MCFD16USB GetDelay {ch} {return 2 }
snit::method MCFD16USB GetFraction {ch} {return 20 }
snit::method MCFD16USB GetMode {} {return common }


snit::method MCFD16USB SetPolarity {ch val} {dict set ::mockMemory polarity $ch $val}
snit::method MCFD16USB SetGain {ch val} {dict set ::mockMemory gain $ch $val}
snit::method MCFD16USB SetBandwidthLimit {val} {dict set ::mockMemory bwl $val}
snit::method MCFD16USB SetDiscriminatorMode {val} {dict set ::mockMemory discriminator $val}
snit::method MCFD16USB SetThreshold {ch val} {dict set ::mockMemory threshold $ch $val}
snit::method MCFD16USB SetWidth {ch val} {dict set ::mockMemory width $ch $val}
snit::method MCFD16USB SetDeadtime {ch val} {dict set ::mockMemory deadtime $ch $val}
snit::method MCFD16USB SetDelay {ch val} {dict set ::mockMemory delay $ch $val}
snit::method MCFD16USB SetFraction {ch val} {dict set ::mockMemory fraction $ch $val}
snit::method MCFD16USB SetMode {val} {dict set ::mockMemory mode $val}

proc arrayToList {objname param len} {
  set varname [$objname mcfd]
  set res [list]

  for {set i 0} {$i<$len} {incr i} {
    lappend res [lindex [array get $varname $param$i] 1]
  }

  return $res
}

proc listToArray {objname list param} {
  set varname [$objname mcfd]
  set res [list]

  set i 0
  set params [dict create]
  foreach val $list {
    dict set params $param$i $val
  }

  array set $varname $params
}

proc sequence {start n {inc 1}} {
  set res [list]
  for {set i 0} {$i<$n} {incr i} {
    lappend res [expr $start+$i*$inc]
  }
  return $res
}

proc intSeries {val size} {
  return [sequence $val $size 0]
}

proc wordSeries {word size} {
  set res [list]
  for {set i 0} {$i<$size} {incr i} {
    lappend res $word 
  }
  return $res
}

proc dictKeyToList {dict key} {
  set subdict [dict get [set $dict] $key]

  set values [list]
  foreach key [dict keys $subdict] {
    lappend values [dict get $subdict $key]
  }

  return $values
}

proc setup {} {
  MCFD16IndividualPresenter ::pres -widgetname .mock -handle [MCFD16USB %AUTO% /dev/ttyUSB0]

  set ::mockMemory [dict create]
  dict set ::mockMemory polarity [dict create]
  dict set ::mockMemory gain [dict create]
  dict set ::mockMemory threshold [dict create]
  dict set ::mockMemory width [dict create]
  dict set ::mockMemory deadtime [dict create]
  dict set ::mockMemory delay [dict create]
  dict set ::mockMemory fraction [dict create]

}

proc tearDown {} {
  ::pres destroy
}


tcltest::test updateViewThresholds-0 { Check that we properly set values
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  ::pres UpdateViewThresholds
  
  arrayToList .mock th 16
} -result [intSeries 24 16]

tcltest::test updateViewPolarities-0 {Check that polarities are set in view
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  ::pres UpdateViewPolarities
  
  arrayToList .mock po 8
} -result [wordSeries neg 8]

tcltest::test updateViewGains-0 {Check that gains are set in view
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  ::pres UpdateViewGains
  
  arrayToList .mock ga 8
} -result [intSeries 1 8]

tcltest::test updateViewWidths-0 {Check that widths are set in view
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  ::pres UpdateViewWidths
  
  arrayToList .mock wi 8
} -result [intSeries 25 8]

tcltest::test updateViewDeadtimes-0 {Check that deadtimes are set in view
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  ::pres UpdateViewDeadtimes
  
  arrayToList .mock dt 8
} -result [intSeries 27 8]


tcltest::test updateViewDelays-0 {Check that delays are set in view
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  ::pres UpdateViewDelays
  
  arrayToList .mock dl 8
} -result [intSeries 2 8]

tcltest::test updateViewFractions-0 {Check that fractions are set in view
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  ::pres UpdateViewFractions
  
  arrayToList .mock fr 8
} -result [intSeries 20 8]



tcltest::test commitViewThresholds-0 {Makes sure that view data gets written
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  ::pres CommitViewThresholds

  dictKeyToList ::mockMemory threshold
} -result [intSeries 24 16] 

tcltest::test commitViewPolarity-0 {Ensure that the pol  data ends up in view
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  ::pres CommitViewPolarities 

  dictKeyToList ::mockMemory polarity
} -result [wordSeries neg 8]

tcltest::test commitViewGains-0 {Ensure that the gain data ends up in view
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  ::pres CommitViewGains

  dictKeyToList ::mockMemory gain
} -result [intSeries 1 8]

tcltest::test commitViewWidths-0 {Ensure that the width data ends up in view
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  ::pres CommitViewWidths

  dictKeyToList ::mockMemory width
} -result [intSeries 25 8]


tcltest::test commitViewDeadtimes-0 {Ensure that the deadtime data ends up in view
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  ::pres CommitViewDeadtimes

  dictKeyToList ::mockMemory deadtime
} -result [intSeries 27 8]


tcltest::test commitViewDelays-0 {Ensure that the delay data ends up in view
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  ::pres CommitViewDelays

  dictKeyToList ::mockMemory delay
} -result [intSeries 2 8]

tcltest::test commitViewFractions-0 {Ensure that the fraction data ends up in view
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  ::pres CommitViewFractions

  dictKeyToList ::mockMemory fraction
} -result [intSeries 20 8]

tcltest::cleanupTests


