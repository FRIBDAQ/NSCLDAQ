

package require tcltest

tcltest::test pkgrequire-0 { ensure we can require the package
} { package require mcfd16usb } {1.0}


# set up some fake directories to write
set testdir [tcltest::makeDirectory test]
set serialFile [file join $::testdir fake] 

# create a new driver object
proc setup {} {
  MCFD16USB ::dev $::serialFile
}

# destroy our object
proc tearDown {} {
  ::dev destroy
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
# Polarity tests

tcltest::test polarity-0 {Setting polarity for channel pairs is simple
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  # set channel pairs 0 to positive polarity
  ::dev SetPolarity 0 positive 

  # check to see what we wrote to the file
  tcltest::viewFile $::serialFile
} -result "SP 0 0"


tcltest::test polarity-1 {Make sure that bad argument fails
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  # set channel pairs 0 to bad value
  ::dev SetPolarity 0 this_will_fail 
}  -result {Invalid value provided. Must be "positive" or "negative".} \
-returnCodes 1

tcltest::test polarity-2 {Bad channel pair value will fail
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  # set channel pairs 0 to bad value
  ::dev SetPolarity 9 negative
}  -result {Invalid channel pair provided. Must be in range [0,8].} \
-returnCodes 1

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
# Gain tests

tcltest::test gain-0 {Make sure we can set gain properly
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  # set channel pairs 0 to bad value
  ::dev SetGain 0 1
  tcltest::viewFile $::serialFile
} -result "SG 0 1"

tcltest::test gain-1 {Bad gain value fails
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  # gain can only be 1, 3, or 10
  ::dev SetGain 0 2
} -result "Invalid gain value. Must be either 1, 3, or 10." \
-returnCodes 1


tcltest::test gain-2 {Bad channel pair fails
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  # gain can only be 1, 3, or 10
  ::dev SetGain 123 3
} -result {Invalid channel pair provided. Must be in range [0,8].} \
-returnCodes 1

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
# Bandwidth limit tests 

tcltest::test bandwidthlimit-0 {Check that we can enable bandwidth limit
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  # the argument can be any boolean type
  ::dev EnableBandwidthLimit on

  ::tcltest::viewFile $::serialFile
} -result "BWL 1"


tcltest::test bandwidthLimit-1 { Non-boolean value fails 
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  # arguments that are not boolean will fail
  ::dev EnableBandwidthLimit 123

} -result "Invalid argument provided. Must be a boolean type." \
-returnCodes 1

if {0} {
tcltest::test bandwidthLimit-2 {If not in RC mode, this will fail 
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  # attempt to set into CFD mode
  ::dev EnableBandwidthLimit false
} -result "Bandwidth limit cannot be overridden when in non-RC mode." 
-returnCodes 1
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
# CFD state

tcltest::test cfd-0 {Enabling the CFD writes the correct string
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  # dictate whether to use led mode
  ::dev SetDiscriminatorMode led

  ::tcltest::viewFile $::serialFile
} -result "CFD 0"


tcltest::test cfd-1 {Enabling the CFD writes the correct string
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  # dictate whether to use led mode
  ::dev SetDiscriminatorMode bad_mode
} -result "Invalid argument provided. Must be either \"led\" or \"cfd\"." \
-returnCodes 1

if {0} {
tcltest::test cfd-2 {If not in RC mode, this will fail 
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  # attempt to set into CFD mode
  ::dev SetDiscriminatorMode cfd
} -result "Discriminator mode cannot be overridden when in non-RC mode." 
-returnCodes 1
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
# Threshold value

tcltest::test threshold-0 {Ensure we can set the threshold properly
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  # ensure we can set all thresholds to 0 in common mode
  ::dev SetThreshold 16 0
  # write threshold for channel 0 to be 255
  ::dev SetThreshold 0 255

  ::tcltest::viewFile $::serialFile
} -result {ST 16 0
ST 0 255}

tcltest::test threshold-1 {Bad channel value fails
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  # ensure we can set all thresholds to 0 in common mode
  ::dev SetThreshold 17 0
} -result {Invalid channel argument. Must be in range [0,16].} \
-returnCodes 1


tcltest::test threshold-2 {Bad threshold value fails
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  # ensure we can set all thresholds to 0 in common mode
  ::dev SetThreshold 8 256
} -result {Invalid threshold argument. Must be in range [0,255].} \
-returnCodes 1


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
# Width value

tcltest::test width-0 {Setting the width with valid values writes the correct stuff
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  # there is a translation table to convert input values to actual time in the
  # manual. 
  ::dev SetWidth 3 16 ;# minimum input
  ::dev SetWidth 7 222 ;# maximum input

  # the future I might store the lookup table such that the user could do 
  # ::dev SetWidth 3 [nsToWidth 17] 
  # but this is not supported at the moment

  ::tcltest::viewFile $::serialFile
} -result {SW 3 16
SW 7 222}


tcltest::test width-1 {Bad channel pair fails
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  # there is a translation table to convert input values to actual time in the
  # manual. 
  ::dev SetWidth 9 16 ;# minimum input
} -result {Invalid channel pair provided. Must be in range [0,8].} \
-returnCodes 1


tcltest::test width-2 {Bad element index fails 
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  set returnVals [list]

  set res [catch {::dev SetWidth 7 15} msg] ;# just below valid input range 
  lappend returnVals [list $res $msg]

  set res [catch {::dev SetWidth 7 223} msg] ;# just above valid input range 
  lappend returnVals [list $res $msg]

  set returnVals
} -result [list {1 {Invalid width argument provided. Must be in range [16,222].}} \
                {1 {Invalid width argument provided. Must be in range [16,222].}} ]


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
# Deadtime tests

tcltest::test deadtime-0 {Given good parameter, ensure the correct things are written
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  ::dev SetDeadtime 1 27 ; # minimum dead time
  ::dev SetDeadtime 8 222 ; # maximum dead time

  tcltest::viewFile $::serialFile
} -result {SD 1 27
SD 8 222}


tcltest::test deadtime-1 {Fails on bad channel parameter value
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  ::dev SetDeadtime 9 27 ; # just outside of valid channel param range

} -result {Invalid channel pair provided. Must be in range [0,8].} \
-returnCodes 1

tcltest::test deadtime-2 {Fails on value of out range 
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  set returnVals [list]

  set res [catch {::dev SetDeadtime 7 26} msg] ;# just below valid input range 
  lappend returnVals [list $res $msg]

  set res [catch {::dev SetDeadtime 7 223} msg] ;# just above valid input range 
  lappend returnVals [list $res $msg]

  set returnVals
} -result [list {1 {Invalid deadtime argument provided. Must be in range [27,222].}} \
                {1 {Invalid deadtime argument provided. Must be in range [27,222].}} ]

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
# Delay line tests

tcltest::test delay-0 {Given good parameter, ensure the correct things are written
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  ::dev SetDelay 0 1 ; # minimum dead time and chan pair
  ::dev SetDelay 8 5 ; # maximum dead time and chan pair

  tcltest::viewFile $::serialFile
} -result {SY 0 1
SY 8 5}


tcltest::test delay-1 {Bad channel pair value will fail as always.
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  # channel pairs should be in range of 0 to 8. -1 is bad
  ::dev SetDelay -1 3 ; 
} -result {Invalid channel pair provided. Must be in range [0,8].} \
-returnCodes 1


tcltest::test delay-2 {Fails on value of out range 
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  set returnVals [list]

  set res [catch {::dev SetDelay 0 -1} msg] ;# just below valid input range 
  lappend returnVals [list $res $msg]

  set res [catch {::dev SetDelay 7 6} msg] ;# just above valid input range 
  lappend returnVals [list $res $msg]

  set returnVals
} -result [list {1 {Invalid delay argument provided. Must be in range [1,5].}} \
                {1 {Invalid delay argument provided. Must be in range [1,5].}} ]


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
# Fraction tests

tcltest::test fraction-0 {Given good parameter, ensure the correct things are written
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  # only two values are allowed 20 and 40
  ::dev SetFraction 0 20 ; 
  ::dev SetFraction 8 40 ;

  tcltest::viewFile $::serialFile
} -result {SF 0 20
SF 8 40}

tcltest::test fraction-1 {Bad channel pair value fails
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  # only values in range 0 to 8 are allowd for channel pairs
  ::dev SetFraction -1 20 

} -result {Invalid channel pair provided. Must be in range [0,8].} \
-returnCodes 1

tcltest::test fraction-2 {Failure if param is not 20 or 40
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  set returnVals [list]

  set res [catch {::dev SetFraction 0 0} msg] ;# just below valid input range 
  lappend returnVals [list $res $msg]
  
  set returnVals
} -result [list {1 {Invalid fraction argument provided. Must be either 20 or 40.}}]


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
# Channel mask tests

tcltest::test chanmask-0 {If the parameters are good, make sure the proper string is written
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  dev SetChannelMask 0 255 ; # enable all channels in set bank 0 (channels 0-7)
  dev SetChannelMask 1 255 ; # enable all channels in bank 1 (channel 8-15)

  tcltest::viewFile $::serialFile
} -result {SK 0 255
SK 1 255}

tcltest::test chanmask-1 {Bank parameter other than 0 or 1 causes failure
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  # bank must be 0 or 1, 2 will cause it to fail
  dev SetChannelMask 2 0

  tcltest::viewFile $::serialFile
} -result {Invalid bank parameter provided. Must be either 0 or 1.} \
-returnCodes 1

tcltest::test chanmask-2 {Mask parameter outside of range [0,255] fails
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  # bank must be 0 or 1, 2 will cause it to fail
  set returnVals [list]

  set res [catch {dev SetChannelMask 0 -1} msg]
  lappend returnVals [list $res $msg]

  set res [catch {dev SetChannelMask 0 256} msg]
  lappend returnVals [list $res $msg]

  set returnVals
} -result [list {1 {Invalid mask argument provided. Must be in range [0,255].}} \
                {1 {Invalid mask argument provided. Must be in range [0,255].}} ]


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
# pulser tests

tcltest::test pulser-0 {Proper parameters produce a valid write to set pulser
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  # index must be either 1 or 2
  dev EnablePulser 1
  dev EnablePulser 2

  tcltest::viewFile $::serialFile
} -result {P1
P2}

tcltest::test pulser-1 {A pulser index other than 1 or 2 causes failure
} -setup {
  setup
} -cleanup {
  tearDown
} -body {

  # P0 is actually intended to disable the pulser. Not a valid enable arg
  dev EnablePulser 0

} -result {Invalid pulser index provided. Must be either 1 or 2.} \
-returnCodes 1


tcltest::test pulser-2 {Disabling pulser
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  dev DisablePulser

  # disabling the pulser is accomplished by writing P0 to the device
  tcltest::viewFile $::serialFile
} -result {P0}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
# Retrieve firmware

tcltest::test firmware-0 {Retrieving the firmware accomplished with proper protocol 
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  dev ReadFirmware

  # disabling the pulser is accomplished by writing P0 to the device
  tcltest::viewFile $::serialFile
} -result {V}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
# RC bus control

tcltest::test rc-0 {enable/disable rc done by ON/OFF commands
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  dev EnableRC 0
  dev EnableRC 1 

  # disabling the pulser is accomplished by writing P0 to the device
  tcltest::viewFile $::serialFile
} -result {OFF
ON}

tcltest::test rc-1 {Non-boolean argument causes failure
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  dev EnableRC not_a_boolean

} -result "Invalid argument provided. Must be a boolean value." \
-returnCodes 1

tcltest::cleanupTests

