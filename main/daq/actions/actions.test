
package require Actions 1.0
package require tcltest

set ::fullPath [tcltest::makeDirectory test]

tcltest::test buildPktERR {Test that ERRMSG directives succeed
} -setup {
  set action [::Actions %AUTO%]
  set line "ERRMSG 10 abcdefghij"
} -cleanup {
  $action destroy
} -body {
  $action buildPacket $line
} -result {ERRMSG abcdefghij 10}

tcltest::test buildPktLOG {Test that LOGMSG directives succeed
} -setup {
  set action [::Actions %AUTO%]
  set line "LOGMSG 10 abcdefghij"
} -cleanup {
  $action destroy
} -body {
  $action buildPacket $line
} -result {LOGMSG abcdefghij 10}

tcltest::test buildPktWRN {Test that WRNMSG directives succeed
} -setup {
  set action [::Actions %AUTO%]
  set line "WRNMSG 10 abcdefghij"
} -cleanup {
  $action destroy
} -body {
  $action buildPacket $line
} -result {WRNMSG abcdefghij 10}

tcltest::test buildPktTCLCMD {Test that TCLCMD directives succeed
} -setup {
  set action [::Actions %AUTO%]
  set line "TCLCMD 10 abcdefghij"
} -cleanup {
  $action destroy
} -body {
  $action buildPacket $line
} -result {TCLCMD abcdefghij 10}

tcltest::test buildPktOUTPUT {Test that OUTPUT directives succeed
} -setup {
  set action [::Actions %AUTO%]
  set line "OUTPUT 10 abcdefghij"
} -cleanup {
  $action destroy
} -body {
  $action buildPacket $line
} -result {OUTPUT abcdefghij 10}

tcltest::test buildPktDBGMSG {Test that DBGMSG directives succeed
} -setup {
  set action [::Actions %AUTO%]
  set line "DBGMSG 10 abcdefghij"
} -cleanup {
  $action destroy
} -body {
  $action buildPacket $line
} -result {DBGMSG abcdefghij 10}


tcltest::test buildPktIncomplete {Test that packet building stops on incomplete pkt
} -setup {
  set action [::Actions %AUTO%]
  set line "DBGMSG 16 abcdefghij"
} -cleanup {
  $action destroy
} -body {
  $action buildPacket $line
} -result {}


tcltest::test buildPktWithNewline {Test that packet is handled with internal newlines 
} -setup {
  set action [::Actions %AUTO%]
  set line {OUTPUT 4 a

b} 
} -cleanup {
  $action destroy
} -body {
  $action buildPacket $line
} -result {OUTPUT {a

b} 4}

tcltest::test buildPktWithMultiDirs {Test that only first packet outputted if multiple are present
} -setup {
  set action [::Actions %AUTO%]
  set line {OUTPUT 4 abcd
OUTPUT 4 efgh
OUTPUT 4 ijkl}
} -cleanup {
  $action destroy
} -body {
  $action buildPacket $line
} -result {OUTPUT abcd 4}


namespace eval testHandlers {
  variable line {}
  proc handleLog msg { variable line;  append line "log \"$msg\""}
  proc handleError msg { variable line; append line "error \"$msg\""}
  proc handleWarning msg { variable line; append line "warning \"$msg\""}
  proc handleTclCommand msg { variable line; append line "tcl \"$msg\""}
  proc handleOutput msg { variable line; append line "output \"$msg\""}
  proc handleDebug msg { variable line; append line "debug \"$msg\""}

  namespace export handleLog handleError handleWarning \
                  handleTclCommand handleOutput handleDebug
  namespace ensemble create
}

tcltest::test buildPktWithNewlines {Test that packet ending with newline works
} -setup {
  set action [::Actions %AUTO% -actionbundle testHandlers]
  $action setLine ""
} -cleanup {
  $action destroy
} -body {
  puts "test"
  $action processInput " \nTCL"
  $action processInput "CMD 3 end\n"

  set ::testHandlers::line
} -result {output " 
"tcl "end"}

tcltest::test buildPktSmushed-0 {Test that dropped whitespace get handled
} -setup {
  set action [::Actions %AUTO% -actionbundle testHandlers]
  
  set ::testHandlers::line {}
} -cleanup {
  $action destroy
} -body {
  puts "\n******** test2"
  $action processInput "LOGMSG "
  $action processInput "4 "
  $action processInput "asdf\n"

  set ::testHandlers::line
} -result "log \"asdf\"" ;# we will have to live with the fact that there is a blank line 
# emitted that gets registered as an output line. This should at least not break.


tcltest::test handleNonPktNoDirective {Test that fully non-directive data is properly handled
} -setup {
  set action [::Actions %AUTO% -actionbundle testHandlers]
  set line "abcdefghij\n"
  set ::testHandlers::line {}
} -cleanup {
  $action destroy
} -body {
  $action processInput $line
  set ::testHandlers::line
} -result {output "abcdefghij"}

tcltest::test handleNonPktWithDirective {Test that directive data is properly handled
} -setup {
  set action [::Actions %AUTO% -actionbundle testHandlers]
  set line "abcdef\nERRMSG 4 ghij\n"
  set ::testHandlers::line {}
} -cleanup {
  $action destroy
} -body {
  $action processInput $line
  set ::testHandlers::line
} -result {output "abcdef
"error "ghij"}

tcltest::test handlePainfulMessage {Test that directive data is properly handled
} -setup {
  set action [::Actions %AUTO% -actionbundle testHandlers]
  set ::testHandlers::line {}
} -cleanup {
  $action destroy
} -body {
  $action processInput "\n"
  $action processInput "T"
  $action processInput "CL"
  $action processInput "C"
  $action processInput "M"
  $action processInput "D"
  $action processInput " "
  $action processInput "16 "
  $action processInput "puts \"mean msg\n"
  $action processInput "\"\n"
  set ::testHandlers::line
} -result {output ""tcl "puts "mean msg
""}

tcltest::test failInBuildPacketIsRecoverable-0 {Test that directive data is properly handled
} -setup {
  set action [::Actions %AUTO% -actionbundle testHandlers]
  tcltest::makeFile  "abcdef\nERRMSG 4 ghij\n" ".testing"
  set ::testHandlers::line {}
} -cleanup {
  $action destroy
  snit::method ::Actions buildPacket $old_args $old_body
} -body {
  set old_args [$action info args buildPacket]
  set old_body [$action info body buildPacket]
  snit::method ::Actions buildPacket $old_args {
     error "forced failure"
  }

  set file [open ".testing" r]
  $action handleReadable $file
  close $file

  snit::method ::Actions buildPacket $old_args $old_body

  set file [open ".testing" r]
  $action handleReadable $file
  set ::testHandlers::line
} -result {error "Error while parsing 'abcdef
ERRMSG 4 ghij
'"error "Error: forced failure"error "Resetting parser state"output "abcdef
"error "ghij"}


tcltest::test handleSingleNewlineMessage {Test that we can produce a simple newline msg
} -setup {
  set action [::Actions %AUTO% -actionbundle testHandlers]
  set ::testHandlers::line {}
} -cleanup {
  $action destroy
} -body {
  $action processInput "\n"
  set ::testHandlers::line
} -result {output ""}

tcltest::test handleMessageLOG {test handleDirective for LOGMSG
} -setup {
  set action [::Actions %AUTO% -actionbundle testHandlers]
  set ::testHandlers::line {}
} -cleanup {
  $action destroy
} -body {
  set parsedmsg [list LOGMSG {my message}]
  $action handleMessage $parsedmsg
  set ::testHandlers::line
} -result {log "my message"}

tcltest::test handleMessageERROR {test handleDirective for ERRMSG
} -setup {
  set action [::Actions %AUTO% -actionbundle testHandlers]
  set ::testHandlers::line {}
} -cleanup {
  $action destroy
} -body {
  set parsedmsg [list ERRMSG {my message}]
  $action handleMessage $parsedmsg
  set ::testHandlers::line
} -result {error "my message"}

tcltest::test handleMessageWRN {test handleDirective for WRNMSG
} -setup {
  set action [::Actions %AUTO% -actionbundle testHandlers]
  set ::testHandlers::line {}
} -cleanup {
  $action destroy
} -body {
  set parsedmsg [list WRNMSG {my message}]
  $action handleMessage $parsedmsg
  set ::testHandlers::line
} -result {warning "my message"}

tcltest::test handleMessageTCLCMD {test handleDirective for TCLCMD 
} -setup {
  set action [::Actions %AUTO% -actionbundle testHandlers]
  set ::testHandlers::line {}
} -cleanup {
  $action destroy
} -body {
  set parsedmsg [list TCLCMD {my message}]
  $action handleMessage $parsedmsg
  set ::testHandlers::line
} -result {tcl "my message"}


tcltest::test handleMessageOUTPUT {test handleDirective for OUTPUT 
} -setup {
  set action [::Actions %AUTO% -actionbundle testHandlers]
  set ::testHandlers::line {}
} -cleanup {
  $action destroy
} -body {
  set parsedmsg [list OUTPUT {my message}]
  $action handleMessage $parsedmsg
  set ::testHandlers::line
} -result {output "my message"}

tcltest::test handleMessageDBG {test handleDirective for DBGMSG 
} -setup {
  set action [::Actions %AUTO% -actionbundle testHandlers]
  set ::testHandlers::line {}
} -cleanup {
  $action destroy
} -body {
  set parsedmsg [list DBGMSG {my message}]
  $action handleMessage $parsedmsg
  set ::testHandlers::line
} -result {debug "my message"}

tcltest::test buildPktAfterNonProtocol {Test that we can ignore the non protocol stuff
} -setup {
  set action [::Actions %AUTO% -actionbundle testHandlers]
  set ::testHandlers::line {}
  set line {asdf
asdfasdasdf
asdf
OUTPUT 4 abcd
OUTPUT 4 efgh
OUTPUT 4 ijkl
}
} -cleanup {
  $action destroy
} -body {
  $action processInput $line
  set ::testHandlers::line
} -result {output "asdf
"output "asdfasdasdf
"output "asdf
"output "abcd"output "efgh"output "ijkl"}

tcltest::test testS800FilterOutput-0 {s800 filter processing does always work, make sure it does
} -setup {
  set action [::Actions %AUTO% -actionbundle testHandlers]
  set ::testHandlers::line {}
  set line {LOGMSG 27  SET ERROR COUNTERS TO ZERO

ERROR COUNTER RESULTS
ERROR 1. Number of fragments in RingItem is not 2:                           1
ERROR 2. Fragment with no head:                                              0
ERROR 3. Duplicated source ID:                                               0
ERROR 4. Corrupted timestamp = 0:                                            0
ERROR 5. Uncorrelated fragments (different timestamps):                      0
ERROR 6. Body size value from body and header differ (OBSOLETE):             0
ERROR 7. Missing end-of-packet tag:                                          0
ERROR 8. Duplicated packet tag:                                              0
ERROR 9. Timestamp from header different than decoded timestamp from body:   0
ERROR 10. Incomplete RingItem (missing packet tags):                         0
ERROR 11. Unknown word found in fragment body:                               0
ERROR 12. Unknown controller type:                                           0
ERROR 13. Unknown PAD detector type:                                         0
ERROR 14. Too many pads in PAD detector:                                     0
ERROR 15. Too many MTDC channels (OBSOLETE):                                 0
ERROR 16. Non-contiguous event number:                                       0
ERROR 17. Non-increasing XLM timestamp:                                      0
ERROR 18. Non-increasing ULM timestamp:                                      0

TOTAL NUMBER OF EVENTS:                                                    38711
----------------------------------------
}
} -cleanup {
  $action destroy
} -body {
  $action processInput $line
  set ::testHandlers::line
} -result {log " SET ERROR COUNTERS TO ZERO"output "
"output "ERROR COUNTER RESULTS
"output "ERROR 1. Number of fragments in RingItem is not 2:                           1
"output "ERROR 2. Fragment with no head:                                              0
"output "ERROR 3. Duplicated source ID:                                               0
"output "ERROR 4. Corrupted timestamp = 0:                                            0
"output "ERROR 5. Uncorrelated fragments (different timestamps):                      0
"output "ERROR 6. Body size value from body and header differ (OBSOLETE):             0
"output "ERROR 7. Missing end-of-packet tag:                                          0
"output "ERROR 8. Duplicated packet tag:                                              0
"output "ERROR 9. Timestamp from header different than decoded timestamp from body:   0
"output "ERROR 10. Incomplete RingItem (missing packet tags):                         0
"output "ERROR 11. Unknown word found in fragment body:                               0
"output "ERROR 12. Unknown controller type:                                           0
"output "ERROR 13. Unknown PAD detector type:                                         0
"output "ERROR 14. Too many pads in PAD detector:                                     0
"output "ERROR 15. Too many MTDC channels (OBSOLETE):                                 0
"output "ERROR 16. Non-contiguous event number:                                       0
"output "ERROR 17. Non-increasing XLM timestamp:                                      0
"output "ERROR 18. Non-increasing ULM timestamp:                                      0
"output "
"output "TOTAL NUMBER OF EVENTS:                                                    38711
"output "----------------------------------------"}






tcltest::cleanupTests
