<!-- manpage 5daq -->

<refentry id="daq5-evbprotocol">
    <refentryinfo>
      <author>
          <personname>
              <firstname>Ron</firstname>
              <surname>Fox</surname>
          </personname>
          <personblurb><para></para></personblurb>
      </author>
      <productname>NSCLDAQ</productname>
      <productnumber></productnumber>
    </refentryinfo>
  
  <refmeta>
     <refentrytitle id='daq5-evbprotocol-title'>eventorderer</refentrytitle>
     <manvolnum>5daq</manvolnum>
     <refmiscinfo class='empty'></refmiscinfo>
  </refmeta>
  <refnamediv>
     <refname>eventorderer</refname>
     <refpurpose>Event orderer protocol</refpurpose>
  </refnamediv>
  
  <refsynopsisdiv>
    <programlisting>
#include &lt;fragment.h&gt;
#include &lt;CEventOrderClient.h&gt;

static const unsigned EVB_MAX_DESCRIPTION=80;      // Description string size.

namespace EVB {
  typedef struct _ClientMessageHeader {
    uint32_t  s_bodySize;          // # bytes of message body.
    uint32_t  s_msgType;           // Type of message.
  } ClientMessageHeader, *pClientMessageHeader;
  
  // Message type codes (bit encoded for the hell of it)
  
  static const uint32_t CONNECT   =1;
  static const uint32_t FRAGMENTS =2;
  static const uint32_t DISCONNECT=4;

  typedef struct _ConnectBody {
    char     s_description[EVB_MAX_DESCRIPTION];  // Description string.
    uint32_t s_nSids;                             // Number of sids on this link.
    uint32_t s_sids[0];                           // actually s_nSids follow.
  } ConnectBody, *pConnectBody;

  
}
    </programlisting>

  </refsynopsisdiv>
  <refsect1>
     <title>DESCRIPTION</title>
     <para>
        The NSCL event builder consists of a two stage pipeline. The first stage
        accepts a set of event fragments from an arbitrary number of event sources
        and produces output that is a total ordering of the event fragments
        with respect to the value of a timestamp associated with each fragment.
        The synchronization of the source of this timstamp is beyond the scope of the
        event builder software as that normally must be done by the experimental
        hardware.
     </para>
     <para>
        The event orderer stage operates as a TCP/IP server.  Data sources
        follow a well defined protocol to connect with the server, send data
        and, eventually, disconnect from the server.
     </para>
     <para>
        The server never initiates an interaction with the clients.  Only
        clients initiate interactions through <firstterm>messages</firstterm>.
        
     </para>
     <para>
        Messages consist of a header followed by an optional body.  The
        Beginning with NSCLDAQ-12, all headers are pure binary. Thus the
        event builder in NSCLDAQ-12 and later
        cannot accept data from fragment sources
        written for earlier versions of NSCLDAQ.
        Each messages is described fully in the next section: MESSAGES
     </para>
     <para>
        The event orderer uses the NSCL port manager to advertise its
        presence.  The service name used is, by default, "ORDERER"
     </para>
  </refsect1>
  <refsect1>
     <title>
        MESSAGES
     </title>
     <para>
        Each subsection describes a specific message.  Messages consist of a header
        and an optional body.  The message type determines if there is a body.
        Each segment consist of a 32 bit little endian size followed by its
        contents.
     </para>
     <para>
      Headers are described  in the synopsis by the struct
      <structname>EVB::ClientMessageHeader</structname>. 
     </para>
     <para>
        The server replies to the client are fully textual.  Each reply is a
        single line of text.  The server replies are success and error replies:
     </para>
     <variablelist>
        <varlistentry>
            <term><literal>OK</literal></term>
            <listitem>
                <para>
                    Successful completion of the request.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><literal>ERROR {text}</literal></term>
            <listitem>
                <para>
                    The request failed.  The <replaceable>text</replaceable>
                    following the <literal>ERROR</literal> return is an
                    English string that gives the reason for the failure.
                </para>
                <para>
                    See ERROR STRINGS below for the various failur reasons
                    that have been anticipated.
                </para>
            </listitem>
        </varlistentry>
        
     </variablelist>
     <para>
      The message headers have the following fields:
      <variablelist>
        <varlistentry>
           <term><type>uint32_t</type> <structfield>s_bodySize</structfield></term>
           <listitem>
               <para>
                Number of bytes of the body.  This can be zero if the message has
                no body.
               </para>
            </listitem>
        </varlistentry>
        <varlistentry>
           <term><type>uint32_t</type> <structfield>s_msgType</structfield></term>
           <listitem>
               <para>
                The message type.  This is one of:
               </para>
               <variablelist>
                <varlistentry>
                   <term><literal>EVB::CONNECT</literal></term>
                   <listitem>
                       <para>
                        Message is sent just after the client connects to the
                        server.  The body describes the connection and the
                        set of source ids to expect from the client.
                       </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                   <term><literal>EVB::FRAGMENTS</literal></term>
                   <listitem>
                       <para>
                        The body contains fragment data
                       </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                   <term><literal>EVB::DISCONNECT</literal></term>
                   <listitem>
                       <para>
                        The client is about to disconnect.  This message has no
                        body.
                       </para>
                    </listitem>
                </varlistentry>
               </variablelist>
            </listitem>
        </varlistentry>
      </variablelist>
     </para>
     <refsect2>
        <title>EVB::CONNECT</title>
        <para>
            Must be sent by the client immediately following a connection.
            The body is a <structname>EVB::ConnectBody</structname> which descsribes
            the connection and the source ids to expect from this connection.
            The fields of <structname>EVB::ConnectBody</structname> are:
        </para>
        <variablelist>
          <varlistentry>
             <term><type>char</type> <structfield>s_description[EVB_MAX_DESCRIPTION]</structfield></term>
             <listitem>
                 <para>
                  Contains the connection description string.  Any unused bytes
                  should be zero filled.  The description must be at most
                  <literal>EVB_MAX_DESCRIPTION-1</literal> bytes long to
                  allow a zero termination.
               </para>
            </listitem>
          </varlistentry>
          <varlistentry>
             <term><type>uint32_t</type> <structfield>s_nSids</structfield></term>
             <listitem>
                 <para>
                  Number of source ids the client will send.
               </para>
            </listitem>
          </varlistentry>
          <varlistentry>
             <term><type>uint32_t</type> <structfield>s_sids[0]</structfield></term>
             <listitem>
                 <para>
                  This array will actually be <structfield>s_nSids</structfield>
                  long and will contain the actual source ids the client
                  can send.  These are used to pre-allocate fragment queues.
               </para>
            </listitem>
          </varlistentry>
        </variablelist>
        <para>
            This message causes a transition from the CONNECTING to the
            CONNECTED state.
        </para>
     </refsect2>
     <refsect2>
        <title>EVB::DISCONNECT</title>
        <para>
            Indicates an orderly, alarm free, disconnect of the client from
            the event builder.  If the client simply closes the socket, the
            connection loss is considered abnormal, and alarms may be raised.
            Therefore clients should properly disconnect rather than just
            letting sockets close on exit e.g.
        </para>
        <para>
            The body of the DISCONNECT message is empty.
            Note that the actual sequence the API software imposes is:
            <orderedlist>
                <listitem><para>
                    Send the DISCONNECT message.
                    </para></listitem>
                <listitem><para>
                    Receive the OK message back from the server
                    </para></listitem>
                <listitem><para>
                    Both close the socket.  The server closes the socket as
                    soon as the OK message has been sent.  The client closes
                    the socket as soon as the server reply message has been
                    sent (note that in the future if the server can send
                    an ERROR, the client will still close after recieving
                    that reply).
                    </para>
                </listitem>
            </orderedlist>
        </para>
     </refsect2>
     <refsect2>
        <title>EVB::FRAGMENTS</title>
        <para>
            A <literal>EVB::FRAGMENTS</literal> type indicates the body is an
            array of
            fragments from the data source.  Each fragment can be thought of
            as a header followed immediately by its payload.  The payload
            itself is the event fragment.  The header describes the payload
            and is a <type>EVB::FragmentHeader</type>
            Note that the size of the body is still the first 32 bits in the
            entire body.  It is followed immediately by the first header.
        </para>
        <para>
          Fragment headers have the following fields:
        </para>
        <variablelist>
            <varlistentry>
                <term><fieldsynopsis><type>uint64_t</type> <varname>s_timestamp</varname></fieldsynopsis></term>
                <listitem>
                    <para>
                        The timestamp of the event fragment.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><fieldsynopsis><type>uint32_t</type> <varname>s_sourceId</varname></fieldsynopsis></term>
                <listitem>
                    <para>
                        The unique source id of the fragment.  The sourceId is
                        used to determine into which fragment queue the fragment
                        is put.  At this time it is required that data from
                        each source id come in monotonic time order.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><fieldsynopsis><type>uint32_t</type> <varname>s_size</varname></fieldsynopsis></term>
                <listitem>
                    <para>
                        The number of bytes in the payload that follows this
                        struct.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
               <term><fieldsynopsis><type>uint32_t</type> <varname>s_barrier</varname></fieldsynopsis></term>
               <listitem>
                   <para>
                    The barrier type code.
                   </para>
                </listitem>
            </varlistentry>
        </variablelist>
     </refsect2>
  </refsect1>
  <refsect1>
    <title>CONNECTION STATE</title>
    <para>
        Connections have well defined states.  The connection state changes
        due to a well defined set of events.   If the state machine is violated,
        the server will disconnect from the client immediately without reporting
        an error.
    </para>
  </refsect1>
  <refsect1>
    <title>ERROR STRINGS</title>
    <variablelist>
       <varlistentry>
       <term><literal>Expected CONNECT</literal></term>
       <listitem><para>
         Protocol required a CONNECT message but something else was received.
       </para></listitem>
       </varlistentry>

       <varlistentry>
         <term><literal>Empty Body</literal></term>
         <listitem><para>
           Protocol required a non-empty body but an empty body was received.
         </para></listitem>
       </varlistentry>

       <varlistentry>
          <term><literal>Unexpected header: xxx</literal></term>
          <listitem><para>
              A header was received of a type not expected.
          </para></listitem>
        </varlistentry>

    </variablelist>
  </refsect1>
</refentry>
