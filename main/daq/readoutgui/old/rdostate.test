#    This software is Copyright by the Board of Trustees of Michigan
#    State University (c) Copyright 2013.
#
#    You may use this software under the terms of the GNU public license
#    (GPL).  The terms of this license are described at:
#
#     http://www.gnu.org/licenses/gpl.txt
#
#    Author:
#            Ron Fox
#            NSCL
#            Michigan State University
#            East Lansing, MI 48824-1321

##
# @file rdostate.test
# @brief Tests for the ReadoutState package.
# @author Ron Fox <fox@nscl.msu.edu>

package require tcltest
package require RunstateMachine
package require ReadoutState

#
# Test registration/unregistration

tcltest::test register  {See if we can register with the runstate singleton} \
-setup {
    set sm [RunstateMachineSingleton %AUTO%]
} \
-cleanup {
    catch {$sm removeCalloutBundle ReadoutState}
    $sm destroy
} \
-body {
    ::ReadoutState::register
    $sm listCalloutBundles
    
} -result ReadoutState

tcltest::test unregister {See if we can unregister } \
-setup {
    set sm [RunstateMachineSingleton %AUTO%]
    ::ReadoutState::register
} \
-cleanup {
    $sm destroy
} \
-body {
    ::ReadoutState::unregister
    $sm listCalloutBundles
    
} -result [list]


# Transitions to Halted from Active or Paused, should result in
# a run number increment or not depending on the state of the recording flag.

tcltest::test recording-increments-1 {Increment run number when ending recording run.} \
-setup {
    ::ReadoutState::setRun 0
    ::ReadoutState::setRecording 1
    ::ReadoutState::register
    
    set sm [RunstateMachineSingleton %AUTO%]
    $sm _setState Active
} \
-cleanup {
    ::ReadoutState::unregister
    $sm destroy
    
} \
-body {
    $sm transition Halted
    ::ReadoutState::getRun
} -result 1


tcltest::test recording-increments-2 {Same as prior test but prior state is 'Paused'} \
-setup {
    ::ReadoutState::setRun 0
    ::ReadoutState::setRecording 1
    ::ReadoutState::register
    
    set sm [RunstateMachineSingleton %AUTO%]
    $sm _setState Paused
} \
-cleanup {
    ::ReadoutState::unregister
    $sm destroy
    
} \
-body {
    $sm transition Halted
    ::ReadoutState::getRun
} -result 1

tcltest::test notRecording-noIncrement-1 {Non recording transitions don't increment} \
-setup {
    ::ReadoutState::setRun 0
    ::ReadoutState::setRecording 0
    ::ReadoutState::register
    
    set sm [RunstateMachineSingleton %AUTO%]
    $sm _setState Paused
} \
-cleanup {
    ::ReadoutState::unregister
    $sm destroy
    
} \
-body {
    $sm transition Halted
    ::ReadoutState::getRun
} -result 0

#------------------------------------------------------------------------------
#
#  Report test results.
#

tcltest::cleanupTests