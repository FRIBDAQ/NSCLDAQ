package require tcltest

tcltest::verbose [list start pass]]

# mock packages and their implementations.

package provide ssh 1.0
package provide ReadoutGUIPanel 1.0

package require Wait
package require SSHPipe_Provider

namespace eval ssh {}
namespace eval ReadoutGUIPanel {}


namespace eval mytests {
    variable lastpid
    variable lastinfd
    variable lastoutfd
    variable logcount 0
    variable log
    array set log [list]
}

#
# TESTING CONCEPT and METHOD 
#
# 1. The SSHPipe::start method invokes a proc called ssh::sshpid in order to
# start up the ssh pipe it connects to. We simply override this with a different
# implementation that is simpler that involves storing some useful values.
#
# 2. When the ssh pipe is readable, the ultimate thing that happens is that
# ReadoutGUIPanel::Log is called to log the output of the ssh pipeline. We
# overload it to simply append the information in an array of dicts called
# ::mytests::log.
#
# 3. The sshsimulator.testscript is the standard process to start up with the
# ssh::sshpid proc. It merely reads input and read output. When it reads an exit
# from the stream, it exits.
#


#tcltest::configure -verbose tebp
##
# Run program over ssh (substitute a pipe) that is called by SSHPipe::start
#
proc ssh::sshpid {host program} {
    puts "program: $program"
    set fd [open "|$program" a+]
    set ::mytests::lastinfd $fd
    set ::mytests::lastoutfd $fd
    set ::mytests::lastpid [pid $fd]
    fconfigure $::mytests::lastoutfd -buffering line
    
    return [list $::mytests::lastpid $::mytests::lastinfd $::mytests::lastoutfd]
}

## Overridden Log proc to capture the data read from the sshpipe.
#
# This is what ultimately is called when the ssh pipe is readable. For each new
# message read from the pipeline, append it to an array called ::mytests::log.
# Each element of the array is actually a dict containing the following keys:
#   source
#   severity
#   message
#
# whose values are the arguments passed to the ReadutGUIPanel::Log proc.
#
proc ReadoutGUIPanel::Log {source severity msg} {
    puts "Logging $source $severity $msg"
    set ::mytests::log($::mytests::logcount) [dict create source $source \
                                                          severity $severity \
                                                          message $msg]
    incr ::mytests::logcount
}

## Clear out the log
#
proc ::mytests::clearlog {} {
    array unset ::mytests::log *
    set ::mytests::logcount 0
}

#------------------------------------------------------------------------------#
#
# Test parameters proc:

tcltest::test paramters-1 {Get the right dict from parameters} \
-body {
    set dict [::SSHPipe::parameters]
    
} -result $::SSHPipe::parameterization


#------------------------------------------------------------------------------#
#
# Test Start

tcltest::test start-1 {Bad program fails} \
-body {
    set status [catch {::SSHPipe::start \
        [dict create sourceid 1 host localhost path junky-junk parameters ""]} \
        msg]
    list $status $msg
        
} -result [list 1 "SSHPipe data source: Cannot start 'junky-junk' as it is not executable"]


tcltest::test start-2 {Start echo, check activeProviders contents.} \
-setup {
    set tcl $::env(tcl)
    set cat [file join [file dirname [info script]] sshsimulator.testscript];    # Full path
} \
-cleanup {
    ::SSHPipe::stop 0
    vwait ::SSHPipe::activeProviders(0) 
    array unset ::SSHPipe::activeProviders(0)
    catch {close $::mytests::lastinfd}
    catch {close $::mytests:lastoutfd}
    catch {array unset ::SSHPipe::activeProviders 0}
    ::mytests::clearlog
} \
-body {
    set parameters [dict create host localhost sourceid 0 path $tcl parameters  $cat wdir ~]
    SSHPipe::start $parameters
    set actual [lsort $::SSHPipe::activeProviders(0)]
    set should [lsort [dict create \
        sshpid  $::mytests::lastpid    \
        inpipe  $::mytests::lastinfd   \
        outpipe $::mytests::lastoutfd  \
        alive   true        \
        closing false       \
        idle    true        \
        line    ""          \
        parameterization $parameters \
    ]]
    
    
    expr {$should == $actual}
} -result 1

#------------------------------------------------------------------------------#
#
# tests for ::SSHPipe::Check.
#

tcltest::test check-1 {After start, check should give true} \
-setup {
    set tclsh $::env(tcl)
    set cat [file join [file dirname [info script]] sshsimulator.testscript]
} \
-cleanup {
    ::SSHPipe::stop 0
    vwait ::SSHPipe::activeProviders(0) 
    catch {close $::mytests::lastinfd} msg1
    catch {close $::mytests::lastoutfd} msg2

    catch {array unset ::SSHPipe::activeProviders 0} msg3
    puts "'$msg1' '$msg2' '$msg3'"
    ::mytests::clearlog
    
} \
-body {
    ::SSHPipe::start [dict create \
        host localhost path $tclsh parameters $cat sourceid 0 \
    ]
    puts $::mytests::lastoutfd "Some output $::mytests::lastpid"
    flush $mytests::lastoutfd
    vwait ::SSHPipe::activeProviders(0)
    set ok [::SSHPipe::check 0]
} -result true

tcltest::test check-2 {After killing a started source, check should give false} \
-setup {
    set tclsh $::env(tcl)
    set cat [file join [file dirname [info script]] sshsimulator.testscript]
} \
-cleanup {
    catch {close $::mytests::lastinfd}
    catch {close $::mytests::lastoutfd}

    catch {array unset ::SSHPipe::activeProviders 0}
    ::mytests::clearlog
    
} \
-body {
    ::SSHPipe::start [dict create \
        host localhost path $tclsh parameters $cat sourceid 0 \
    ]
    puts $::mytests::lastoutfd "Some output $::mytests::lastpid"
    flush $::mytests::lastoutfd
    vwait ::SSHPipe::activeProviders(0)

    puts $::mytests::lastoutfd "exit"
    flush $::mytests::lastoutfd
    vwait ::SSHPipe::activeProviders(0);   # Exit
    vwait ::SSHPipe::activeProviders(0)
    vwait ::SSHPipe::activeProviders(0);   #EOF
 
    SSHPipe::check 0
     
}  -result false

#------------------------------------------------------------------------------#
#
# Tests for stop

#
tcltest::test stop-1 {After starting a source stopping it kills/cleans it} \
-setup {
    set tclsh $::env(tcl)
    set cat [file join [file dirname [info script]] sshsimulator.testscript]
    ::SSHPipe::start [dict create \
        host localhost path $tclsh parameters $cat sourceid 0 \
    ]

} \
-cleanup {

    ::mytests::clearlog
} \
-body {
puts body
    ::SSHPipe::stop 0
puts stop
    vwait ::SSHPipe::activeProviders(0);   #Echo of exit command
puts vw1
    vwait ::SSHPipe::activeProviders(0)
puts vw2
#    vwait ::SSHPipe::activeProviders(0);   #EOF?
#puts vw3
    array names ::SSHPipe::activeProviders 0
    
} -result ""

if {0} {
#  Test begin

tcltest::test begin-1 {begin on an idle run is ok} \
-setup {
   set tclsh $::env(tcl)
   set cat [file join [file dirname [info script]] sshsimulator.testscript]
   ::SSHPipe::start [dict create \
        host localhost path $tclsh parameters $cat sourceid 0 \
    ]
   
} \
-cleanup {
    ::SSHPipe::stop 0
    vwait ::SSHPipe::activeProviders(0);   #blank
    puts "Vwait 1"

    vwait ::SSHPipe::activeProviders(0);   #EOF (i Hope).
    puts "Vwait 2"
     ::mytests::clearlog
    catch {array unset ::SSHPipe::activeProviders(0)}
} \
-body {
    ::SSHPipe::begin 0 1234 {This is a test}
    vwait ::SSHPipe::activeProviders(0);  # Wait for echo set run
    puts "Vwait done"
    
    set state [dict get $::SSHPipe::activeProviders(0) idle]
    set msgCount $::mytests::logcount
    list $state $msgCount $::mytests::log(0) $::mytests::log(1) $::mytests::log(2)
} -result [list false 3 [dict create source \
    SSHPipe@localhost severity output message "set run 1234\n"] \
    [dict create source SSHPipe@localhost severity output message "set title {This is a test}\n"] \
    [dict create source SSHPipe@localhost severity output message "begin\n"] \
    ]

tcltest::test begin-2 {begin on a run that is not idle fails} \
-setup {
    set tclsh $::env(tcl)
    set cat [file join [file dirname [info script]] sshsimulator.testscript]
    ::SSHPipe::start [dict create \
         host localhost path $tclsh parameters $cat sourceid 0 \
     ]    
} \
-cleanup {
    ::SSHPipe::stop 0
    vwait ::SSHPipe::activeProviders(0)
    vwait ::SSHPipe::activeProviders(0)
    vwait ::SSHPipe::activeProviders(0)
    vwait ::SSHPipe::activeProviders(0);
     ::mytests::clearlog
    catch {array unset ::SSHPipe::activeProviders(0)} 
} \
-body {
    ::SSHPipe::begin 0 1234 {This is a test}
    vwait ::SSHPipe::activeProviders(0);  # Wait for echo set run
    vwait ::SSHPipe::activeProviders(0);  # Set title
    vwait ::SSHPipe::activeProviders(0);  # begin
    vwait ::SSHPipe::activeProviders(0);
    
    # Already running so begin should fail
    
    set status [catch {::SSHPipe::begin 0 124 {This is a test}} msg]
    list $status $msg
      
} -result [list 1 "A run is already active in $::env(tcl)@localhost"]
## Tests for Pause
#

tcltest::test pause-1 {Pause running run ok} \
-setup {
    set tclsh $::env(tcl)
    set cat [file join [file dirname [info script]] sshsimulator.testscript]
    ::SSHPipe::start [dict create \
         host localhost path $tclsh parameters $cat sourceid 0 \
     ]    
} \
-cleanup {
    ::SSHPipe::stop 0
    vwait ::SSHPipe::activeProviders(0);   #blank
    vwait ::SSHPipe::activeProviders(0);
     ::mytests::clearlog

    catch {array unset ::SSHPipe::activeProviders(0)} 
} \
-body {
    ::SSHPipe::begin 0 1234 {This is a test}
    vwait ::SSHPipe::activeProviders(0);  # Wait for echo set run
    vwait ::SSHPipe::activeProviders(0);
    
    ::mytests::clearlog;                 # fresh log:
    ::SSHPipe::pause 0
    vwait ::SSHPipe::activeProviders(0);  # Pause

    list $::mytests::logcount $::mytests::log(0)
    
} -result [list 1 [dict create source SSHPipe@localhost severity output message "pause\n"]]

tcltest::test pause-2 {Pause run that is idle (fails)} \
-setup {
    set tclsh $::env(tcl)
    set cat [file join [file dirname [info script]] sshsimulator.testscript]
    ::SSHPipe::start [dict create \
         host localhost path $tclsh parameters $cat sourceid 0 \
     ]    
} \
-cleanup {
    ::SSHPipe::stop 0
    vwait ::SSHPipe::activeProviders(0) 
     ::mytests::clearlog
    catch {array unset ::SSHPipe::activeProviders(0)} 
} \
-body {
    set status [catch {SSHPipe::pause 0} msg]
    list $status $msg
} -result [list 1 "A run is not active in $::env(tcl)@localhost so no pause is possible."]


## Tests for the end operation note end is really just like pause but
#  afterwards on success we are in the idle state:

tcltest::test end-1 {End running run ok} \
-setup {
    set tclsh $::env(tcl)
    set cat [file join [file dirname [info script]] sshsimulator.testscript]
    ::SSHPipe::start [dict create \
         host localhost path $tclsh  parameters $cat sourceid 0 \
     ]    
} \
-cleanup {
    ::SSHPipe::stop 0
    vwait ::SSHPipe::activeProviders(0) 
     ::mytests::clearlog
    catch {array unset ::SSHPipe::activeProviders(0)} 
} \
-body {
    ::SSHPipe::begin 0 1234 {This is a test}
    vwait ::SSHPipe::activeProviders(0);  # Wait for echo set run
    vwait ::SSHPipe::activeProviders(0);  # Set title
    vwait ::SSHPipe::activeProviders(0);  # begin
    vwait ::SSHPipe::activeProviders(0);
    vwait ::SSHPipe::activeProviders(0);
    vwait ::SSHPipe::activeProviders(0);
    vwait ::SSHPipe::activeProviders(0);
    
    ::mytests::clearlog;                 # fresh log:
    ::SSHPipe::end 0
    vwait ::SSHPipe::activeProviders(0);  # Pause
    vwait ::SSHPipe::activeProviders(0)

    set state [dict get $::SSHPipe::activeProviders(0) idle]
        
    set result [list $::mytests::logcount $state ]
    if {$::mytests::logcount > 0} {
       lappend result $::mytests::log(0)
    }
    set result

    
} -result [list 1 true [dict create source SSHPipe@localhost severity output message "end\n"]]

tcltest::test end-2 {End run that is idle (fails)} \
-setup {
    set tclsh $::env(tcl)
    set cat [file join [file dirname [info script]] sshsimulator.testscript]
    ::SSHPipe::start [dict create \
         host localhost path $tclsh parameters $cat sourceid 0 \
     ]    
} \
-cleanup {
    ::SSHPipe::stop 0
    vwait ::SSHPipe::activeProviders(0) 
     ::mytests::clearlog
    catch {array unset ::SSHPipe::activeProviders(0)} 
} \
-body {
    set status [catch {SSHPipe::end 0} msg]
    list $status $msg
} -result [list 1 "A run is not active in $::env(tcl)@localhost so no end is possible."]

# Resume is like a begin, however it is required _not_ to be idle.

tcltest::test resume-1 {resume on an active run is ok} \
-setup {
    set tclsh $::env(tcl)
    set cat [file join [file dirname [info script]] sshsimulator.testscript]
    ::SSHPipe::start [dict create \
         host localhost path $tclsh parameters $cat sourceid 0 \
     ]
   
} \
-cleanup {
    ::SSHPipe::stop 0
    vwait ::SSHPipe::activeProviders(0) 
     ::mytests::clearlog
    catch {array unset ::SSHPipe::activeProviders(0)}
} \
-body {
    ::SSHPipe::begin 0 1234 {This is a test}
    vwait ::SSHPipe::activeProviders(0);  # Wait for echo set run
    vwait ::SSHPipe::activeProviders(0);  # Set title
    vwait ::SSHPipe::activeProviders(0);  # begin
    vwait ::SSHPipe::activeProviders(0);
    
    ::SSHPipe::pause 0
    vwait ::SSHPipe::activeProviders(0);   # Pause the run (in case we use full state machine)
    vwait ::SSHPipe::activeProviders(0)
    ::mytests::clearlog

    ::SSHPipe::resume 0;                   #legally resume the run.
    vwait ::SSHPipe::activeProviders(0)
    vwait ::SSHPipe::activeProviders(0)
    vwait ::SSHPipe::activeProviders(0)
       
    set state [dict get $::SSHPipe::activeProviders(0) idle]
    set msgCount $::mytests::logcount
    set result [list $state $msgCount]
    if {$msgCount > 0} {
	lappend result $::mytests::log(0)
    }
    set result
} -result [list false 1 [dict create source \
    SSHPipe@localhost severity output message "resume\n"]
    ]

tcltest::test resume-2 {begin on a run that is not idle fails} \
-setup {
    set tclsh $::env(tcl)
    set cat [file join [file dirname [info script]] sshsimulator.testscript]
    ::SSHPipe::start [dict create \
         host localhost path $tclshparameters $cat  sourceid 0 \
     ]    
} \
-cleanup {
    ::SSHPipe::stop 0
    vwait ::SSHPipe::activeProviders(0) 
     ::mytests::clearlog
    catch {array unset ::SSHPipe::activeProviders(0)} 
} \
-body {
 
    # not running so begin should fail
    
    set status [catch {::SSHPipe::resume 0} msg]
    list $status $msg
      
} -result [list 1 "A run is not active in [file join [file dirname [info script]] sshsimulator.testscript]@localhost so no resume is possible."]
}


#-----------------------------------------------------------------------------
#
# Init tests

#
#
#
tcltest::test init-0 {Test that init command when not started fails
} -setup {
} -cleanup {
} -body {
 
    # not running so begin should fail
    
    set status [catch {::SSHPipe::init 0} msg]
    list $status $msg
} -result {1 {SSHPipe::init Source id does not exist.}}

#
#
#
tcltest::test init-1 {Test that init command when started succeeds
} -setup {
    set tclsh $::env(tcl)
    set cat [file join [file dirname [info script]] sshsimulator.testscript]
    ::SSHPipe::start [dict create \
        host localhost path $tclsh parameters $cat sourceid 0 \
    ]
} -cleanup {
    exec kill $::mytests::lastpid
    catch {array unset ::SSHPipe::activeProviders 0}
    ::mytests::clearlog
} -body {
 
    # not running so begin should fail
    
    set status [catch {::SSHPipe::init 0} msg]
    list $status $msg
    vwait ::SSHPipe::activeProviders(0);   #Echo of exit command
    set msg [dict get $::mytests::log(0) message]
    puts $msg 
    set msg
} -result {init
}


# Report results:

tcltest::cleanupTests
