
package require tcltest
package require portAllocator 


tcltest::test pkgrequire-0 {ensure we can require this beast 
} {package require s800} 1.0

proc ReadLine {sock} {
  flush stdout
  if {[eof $sock]} {
    catch {close $sock}
  } else {
    if {[catch {gets $sock line} len]} {
      puts "$line"
    }
  }
}

set ::servsock ""
proc ClientConnect {sock host port} {
  if {$::servsock eq ""} {
    chan configure $sock -blocking 1 -buffering line
    chan event $sock readable [list ReadLine $sock]
    set ::servsock $sock
  } else {
    catch {close $sock}
  }
}

proc setup {} {
  set here [file dirname [file normalize [info script]]]

  set pmanager [portAllocator %AUTO%] 
  set remport [$pmanager allocatePort TEST]
  set ::serv [socket -server ClientConnect $remport]
  set ::pid [exec [file join $here fakeControlServer.tcl] $remport &]
  vwait ::servsock
  set pm2 [portAllocator %AUTO%]
  set port [$pm2  findServer s800rctl]
  set ::reqsock [socket localhost $port]
  chan configure $::reqsock -buffering line
  $pmanager destroy
}

proc tearDown {} {
  exec kill $::pid
  catch {close $::sockserv}
  catch {close $::serv}
  set ::servsock ""
}

tcltest::test receiveEnd-0 {Test that sending an end succeeds
} -setup {
  setup
} -cleanup {
  tearDown
} -body {

  puts $::reqsock "end"
  gets $::reqsock line

  # make sure that we process all of the events
  update
  set line
} -result "OK"

tcltest::cleanupTests
