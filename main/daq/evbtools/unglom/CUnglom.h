#ifndef DAQ_CUNGLOM_H
#define DAQ_CUNGLOM_H

#include <CDataSource.h>
#include <CDataSink.h>

namespace DAQ {

namespace V12 {
class CRingItem;
}

/*!
 * \brief The CUnglom class
 *
 * The CUnglom class provides the basic logic for the unglom program.
 * It reads in a ring item from a generic data source and then does one
 * of two things before outputting it to a generic data sink. The operations
 * that it performs on the items depends on whether they are composite or not.
 *
 *   - if composite, all of the children, 1 level deep, are outputted with
 *     fragment headers appended.
 *
 *   - if not composite, a fragment header is appended and then the fragment outputted
 *
 * In general, the first of these will almost always be used because the output of
 * glom is always a composite ring item. The only reason unglom will operate on
 * ring items that are not composite will be if the data was not generated by glom.
 *
 * It should also be noted that any non-composite EVB_GLOM_INFO type item will be removed
 * from the data. The idea is that Unglom will remove any semblence of being built.
 * If the data is reglommed with glom, then a new EVB_GLOM_INFO will be added in that
 * properly describes the parameters.
 *
 */
class CUnglom
{
private:
    CDataSourcePtr m_pSource;   ///< a generic data source
    CDataSinkPtr   m_pSink;     ///< a generic data sink

public:
    CUnglom(CDataSourcePtr pSource, CDataSinkPtr pSink);

    void operator()();

    bool processOne();

private:
    uint32_t barrierType(V12::CRingItem& item);
    void writeFragment(CDataSink& sink, V12::CRingItem& item);

};

} // end DAQ

#endif // CUNGLOM_H
