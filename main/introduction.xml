<!-- chapter user-guide -->
<chapter>
  <title>NSCLDAQ In a Nut Shell</title>

  <para>
    NSCLDAQ is a software suite that provides a flexible and extensible
    framework for handling the data flow produced by nuclear physics
    experiments.  It aims to solve the top-level problem of managing the data
    stream by breaking it down into smaller problems solved by smaller
    applications. It therefore is a collection of tools that can be assembled
    into more complicated applications. This approach enables NSCLDAQ to be a
    modular system capable of tackling a wide range of experimental setups, from
    small calibration setups to merging multiple independent data acquisitions
    into unified systems. 
  </para>

  <section>
    <title>Basics of Data Flow in NSCLDAQ</title>

    <para>
      A major component of NSCLDAQ is the ability for it to manage data flows. A
      data flow is the path each element of data follows between the point of
      its originating process and destination process(es). The backbone of data
      flow in NSCLDAQ is the <firstterm>ring buffer</firstterm>. The ring buffer is the primary
      mechanism for making data available to different processes. The idea is that ring
      buffers are holding points for data. Processes can deposit data into them
      and others can read data out of them. More will be described on this in
      the next section. The ring buffer subsystem largely operates in the
      background and users do not deal too much with it besides specifying to
      processes where they should read data from or write data to.
    </para>

    <para>
      The programs that users deal with fall into a couple categories. Some
      operate in the data streams and others manage the entire system. Let's
      start with those that operate within the data stream. There are 4
      different process types of this sort. The first is a <firstterm>data
        source</firstterm>. Data sources only output data. They do not read
      data from any upstream process.  A good example of a data source is a
      Readout program. Readout programs interface with hardware and then output
      their data. It is most often the case that data sources output their data
      to a ring buffer. The next type of process is a <firstterm>data sink</firstterm>. Data sinks
      only read data from an input source (typically a ring buffer). There are
      many examples of data sinks. Two good examples are
      processes that write the data stream to a file and processes that help
      users inspect the data. Besides data sources and sinks, there are <firstterm>filter</firstterm> 
      programs that have both an input and an output. Filters perform lots of
      tasks, two of which are transforming data between formats and inline data
      integrity checking. The final type is a <firstterm>merger</firstterm> process. It is characterized
      by having multiple inputs and a single output. There is only one example of
      such a program in NSCLDAQ, and that is the event builder. The way that we
      have used "data source" and "data sink" so far is in an absolute sense.
      They are a start or end of the data stream. We sometimes refer to sources
      and sink in a relative sense. The location a filter reads from is its
      source and the location it sends data to is its sink. Usually these refer
      more to passive entities like files or ring buffers. By tracing the path of
      data from process to process, we define a data flow.
    </para>

    <para>
      It is useful to visualize the data flow for any given setup with a
      flow chart. Each piece of the chart is either a ring buffer, data source,
      data sink, merger, or filter. So that you have a sense for what NSCLDAQ
      builds for each experiment, here is a sample experimental setup diagrammed
      out.
    </para>

    <graphic fileref="figures/intro-data-flow-diagram.png"/>

  </section>

  <section>
    <title>
      Pipeline Building, Run Control, and DAQ Modularization
    </title>
    <para>
      To construct the data stream, also known as the data pipeline, there must
      be a separate process. In NSCLDAQ, that process is the ReadoutGUI. The
      ReadoutGUI can be considered the conductor of the entire system. Once it
      constructs the pipeline, it provides control over the run state of the
      system. By run state, we intend to mean, in the simplest sense, whether
      the data sources are producing data or not.
    </para>
        
    <para>
      The ReadoutGUI is really the face of NSCLDAQ. It is a graphical user
      interface that user's interact with to run their experiment. Because of
      this,
      it aims to centralize controls over the entire experiment to give the
      experimenter a bit of a facade to the complexity of their system. A short
      list of its features are control over data recording, consolidation of  output 
      from the various processes in the pipeline, setting up the pipeline,
      monitoring the health of the data sources, and managing the directory of
      recorded data files (a.k.a. <firstterm>stagearea</firstterm>).
    </para>

    <para>
      One other thing that the ReadoutGUI provides, is the ability to
      modularize the data flow at a higher level. Consider the scenario in which
      there are two DAQs that operate independently of one another that need to
      be operated by together through a single ReadoutGUI. The way to do this is
      by allowing the ReadoutGUIs of each individual DAQ to handle the setup of
      their component of the data pipeline. A master ReadoutGUI can then simply
      command those ReadoutGUIs remotely as though they were just like a
      Readout program. 
    </para>
  </section>

  <section>
    <title>Built-in Diagnostics</title>

    <para>
      With any experiment, it is paramount to understand quickly whether the
      data in the stream is sensible or not. Because ring buffers lie
      in between each process in the data pipeline and they support multiple
      consumers, they act as built-in diagnostic points. A handful of
      applications are provided by NSCLDAQ to attach to these points for data
      inspection. The most basic and useful is the <link
        linkend="ch.dumper">dumper</link> program, which provides a textual
      dump of each ring item that passes through the ring buffer. It is a very
      low-level tool that gives insight into the details of the raw data. There
      are higher level tools though such as the <link
        linkend="chapter.scalerdisplay">ScalerDisplay</link> program. The
      ScalerDisplay provides a user-configurable graphical display of scaler
      data with extra tools specific to scaler data.  
    </para>

    <para>
      The fact that ring buffers lie on either side of each process allows the
      user to understand the effect of the process on the data. You can easily
      attach sink processes to the desired rings to provide diagnostic
      information. Other tools like the <link
        linkend="manpage.ringbuffer">ringbuffer</link> program provide
      statistics for the ring buffers themselves so that you can quickly
      identify if any processes are introducing flow control or vying for
      producer status on the same ring buffer.
    </para>

    <graphic fileref="figures/intro-data-flow-diagram-diagnostics.png"/>

  </section>

  <section>
    <title>Extensibility and Openness</title>

    <para>
      A very important aspect of NSCLDAQ is that it is designed to be open.
      Because it is impossible to know what challenges might be introduced by
      future experiments, NSCLDAQ is built around software frameworks. 
    </para>

    <para>
      There are a number of frameworks for building C++ applications. First
      there is the <link linkend="chap-sbsrdo">SBS Readout Framework</link>,
      which provides users with the ability to write minimal amounts of C++
      code to develop a Readout program that
      has the same semantics and feel of other precompiled NSCLDAQ Readout
      programs.  Though it is designed for use with the SBS Bit3 PCI/VME
      bridge, it is useful for any other hardware that requires a trigger loop
      for reading out hardware and emitting data in the NSCLDAQ 11.0 version
      data format. To facilitate the design of filter programs, the <link
        linkend="ch.filter">Filter framework</link> exists. It handles the
      input, output, and data-type delegation logic in order to allow the
      experimenter to focus on the details of his/her specific problem.
      Thirdly, the event builder provides a framework for constructing new
      clients in case a user intends to contribute data to it in a format
      different than the standard NSCLDAQ format. 
    </para>

    <para>
      In addition to the already mentioned frameworks, most of the precompiled
      Readout programs provide the ability to extend their functionality through
      plugins. For example, both VMUSBReadout and CCUSBReadout have frameworks
      to support reading out and controlling new hardware. In both these cases,
      templates (a.k.a. skeletons) exist to facilitate development.
    </para>

    <para>
      Of course, the NSCLDAQ source code is open source. It is licensed under
      the <ulink url="http://www.gnu.org/copyleft/gpl.html">Gnu General Public
        License</ulink> and is available at <ulink
        url="http://sourceforge.net/projects/nscldaq/">sourceforge</ulink>.
      Code added by the scientific software team at the NSCL is copyright
      protected by the Michigan State University Board of Trustees. 
    </para>
  </section>

</chapter>
