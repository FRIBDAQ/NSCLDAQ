/** @file cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.6
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE "VMUSBReadout"
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CMDLINE_PARSER_PACKAGE_NAME "VMUSBReadout"
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION "11.4-028"
#endif

enum enum_quickstart { quickstart__NULL = -1, quickstart_arg_on = 0, quickstart_arg_off };

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  char * serialno_arg;	/**< @brief Serial number of VM usb VMnnn.  */
  char * serialno_orig;	/**< @brief Serial number of VM usb VMnnn original value given at command line.  */
  const char *serialno_help; /**< @brief Serial number of VM usb VMnnn help description.  */
  char * ring_arg;	/**< @brief Ring buffer in which data are output.  */
  char * ring_orig;	/**< @brief Ring buffer in which data are output original value given at command line.  */
  const char *ring_help; /**< @brief Ring buffer in which data are output help description.  */
  char * daqconfig_arg;	/**< @brief Configuration file for data taking [~/config/daqconfig.tcl].  */
  char * daqconfig_orig;	/**< @brief Configuration file for data taking [~/config/daqconfig.tcl] original value given at command line.  */
  const char *daqconfig_help; /**< @brief Configuration file for data taking [~/config/daqconfig.tcl] help description.  */
  char * ctlconfig_arg;	/**< @brief Slow control configuration file [~/config/controconfig.tcl].  */
  char * ctlconfig_orig;	/**< @brief Slow control configuration file [~/config/controconfig.tcl] original value given at command line.  */
  const char *ctlconfig_help; /**< @brief Slow control configuration file [~/config/controconfig.tcl] help description.  */
  char * port_arg;	/**< @brief Port on which Tcl server should listen [27000].  */
  char * port_orig;	/**< @brief Port on which Tcl server should listen [27000] original value given at command line.  */
  const char *port_help; /**< @brief Port on which Tcl server should listen [27000] help description.  */
  const char *enumerate_help; /**< @brief Enumerate VM-USB modules and exit help description.  */
  int sourceid_arg;	/**< @brief Data source Id for timestamped data (default='0').  */
  char * sourceid_orig;	/**< @brief Data source Id for timestamped data original value given at command line.  */
  const char *sourceid_help; /**< @brief Data source Id for timestamped data help description.  */
  char * timestamplib_arg;	/**< @brief Path to shared library that can extract timestamps from events.  */
  char * timestamplib_orig;	/**< @brief Path to shared library that can extract timestamps from events original value given at command line.  */
  const char *timestamplib_help; /**< @brief Path to shared library that can extract timestamps from events help description.  */
  char * init_script_arg;	/**< @brief Initialization script file.  */
  char * init_script_orig;	/**< @brief Initialization script file original value given at command line.  */
  const char *init_script_help; /**< @brief Initialization script file help description.  */
  char * log_arg;	/**< @brief Log filename - setting enables logging.  */
  char * log_orig;	/**< @brief Log filename - setting enables logging original value given at command line.  */
  const char *log_help; /**< @brief Log filename - setting enables logging help description.  */
  int debug_arg;	/**< @brief Specifies the verbosity of the log (default='0').  */
  char * debug_orig;	/**< @brief Specifies the verbosity of the log original value given at command line.  */
  const char *debug_help; /**< @brief Specifies the verbosity of the log help description.  */
  enum enum_quickstart quickstart_arg;	/**< @brief Use daqconfig digesting to determine if relaods are needed BEWARE
  If your daqconfig file is not self contained (does not rely on other files) this may not
  reload the configuration when necessary (default='off').  */
  char * quickstart_orig;	/**< @brief Use daqconfig digesting to determine if relaods are needed BEWARE
  If your daqconfig file is not self contained (does not rely on other files) this may not
  reload the configuration when necessary original value given at command line.  */
  const char *quickstart_help; /**< @brief Use daqconfig digesting to determine if relaods are needed BEWARE
  If your daqconfig file is not self contained (does not rely on other files) this may not
  reload the configuration when necessary help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int serialno_given ;	/**< @brief Whether serialno was given.  */
  unsigned int ring_given ;	/**< @brief Whether ring was given.  */
  unsigned int daqconfig_given ;	/**< @brief Whether daqconfig was given.  */
  unsigned int ctlconfig_given ;	/**< @brief Whether ctlconfig was given.  */
  unsigned int port_given ;	/**< @brief Whether port was given.  */
  unsigned int enumerate_given ;	/**< @brief Whether enumerate was given.  */
  unsigned int sourceid_given ;	/**< @brief Whether sourceid was given.  */
  unsigned int timestamplib_given ;	/**< @brief Whether timestamplib was given.  */
  unsigned int init_script_given ;	/**< @brief Whether init-script was given.  */
  unsigned int log_given ;	/**< @brief Whether log was given.  */
  unsigned int debug_given ;	/**< @brief Whether debug was given.  */
  unsigned int quickstart_given ;	/**< @brief Whether quickstart was given.  */

} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief the description string of the program */
extern const char *gengetopt_args_info_description;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char **argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);

extern const char *cmdline_parser_quickstart_values[];  /**< @brief Possible values for quickstart. */


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
