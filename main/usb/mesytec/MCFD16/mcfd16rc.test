
#    This software is Copyright by the Board of Trustees of Michigan
#    State University (c) Copyright 2014.
#
#    You may use this software under the terms of the GNU public license
#    (GPL).  The terms of this license are described at:
#
#     http://www.gnu.org/licenses/gpl.txt
#
#    Author:
#    Jeromy Tompkins
#	   NSCL
#	   Michigan State University
#	   East Lansing, MI 48824-1321


package require tcltest

tcltest::test pkgrequire-0 {Ensures that the package can be required
} {package require mcfd16rc} 1.0

package require snit

## a simple class to act as an actual communication channel that 
# only records operations
snit::type FakeRCProxy {

  variable _record 
  option -returnval 0

  constructor {} { set _record [list] }

  method Write {adr val} { lappend _record "Write $adr $val" }
  method Read {adr} { lappend _record "Read $adr" ; return [$self cget -returnval]}
  method Transaction {paramAddr {val ""}} {
    set message "Transaction $paramAddr"
    if {$val ne ""} {
      append message " $val" 
    }
    lappend _record $message
  }
  method getRecord {} { return $_record }
}

proc setup {} {
  FakeRCProxy ::comObj
  MCFD16RC ::dev comObj
}

proc tearDown {} {
  ::dev destroy
#  ::comObj destroy
}

set badChannelPairError {Invalid channel provided. Must be in range [0,8].}

#----------

tcltest::test threshold-0 {Writing threshold for good param does correct thing
} -setup {
  setup
} -cleanup {
  tearDown
} -body { 
  ::dev SetThreshold 0 20
  ::dev SetThreshold 3 40 
  ::dev SetThreshold 16 255 

  ::comObj getRecord
} -result {{Write 0 20} {Write 3 40} {Write 64 255}}

tcltest::test threshold-1 {Writing threshold with bad channel fails
} -setup {
  setup
} -cleanup {
  tearDown
} -body { 
  ::dev SetThreshold 17 20 ; # channels can only be in range [0,8]
} -result {Invalid channel provided. Must be in range [0,16].}  -returnCodes 1

tcltest::test threshold-2 {Writing threshold with bad value fails 
} -setup {
  setup
} -cleanup {
  tearDown
} -body { 
  ::dev SetThreshold 3 -1  ; # only values in range [0,255]
} -result {MCFD16RC::SetThreshold Invalid value provided. Must be in range [0,255].} -returnCodes 1

tcltest::test threshold-3 {Reading threshold does the proper thing w/ valid ch
} -setup {
  setup
} -cleanup {
  tearDown
} -body { 
  ::dev GetThreshold 3 
  ::dev GetThreshold 16
  ::comObj getRecord
} -result {{Read 3} {Read 64}}

tcltest::test threshold-4 {Reading threshold from bad channel fails
} -setup {
  setup
} -cleanup {
  tearDown
} -body { 
  ::dev GetThreshold 17
  ::comObj getRecord
} -result {Invalid channel provided. Must be in range [0,16].} -returnCodes 1

#-------------

tcltest::test polarity-0 {Write polarity does the correct thing
} -setup {
  setup
} -cleanup {
  tearDown
} -body { 
  ::dev SetPolarity 0 pos
  ::dev SetPolarity 4 neg
  ::dev SetPolarity 8 neg

  ::comObj getRecord
} -result {{Write 56 0} {Write 60 1} {Write 70 1}}

tcltest::test polarity-1 {Write polarity val for bad channel pair --> fail
} -setup {
  setup
} -cleanup {
  tearDown
} -body { 
  ::dev SetPolarity 16 neg
} -result $badChannelPairError -returnCodes 1

tcltest::test polarity-2 {Write polarity for bad val --> fail
} -setup {
  setup
} -cleanup {
  tearDown
} -body { 
  ::dev SetPolarity 2 foo
} -result {Invalid value provided. Must be "pos" or "neg".} -returnCodes 1

tcltest::test polarity-3 {Read polarity does the correct thing
} -setup {
  setup
} -cleanup {
  tearDown
} -body { 
  ::dev GetPolarity 0
  ::dev GetPolarity 8

  ::comObj getRecord
} -result {{Read 56} {Read 70}}

tcltest::test polarity-4 {Read polarity val for bad channel pair --> fail
} -setup {
  setup
} -cleanup {
  tearDown
} -body { 
  ::dev GetPolarity 16 
} -result $badChannelPairError -returnCodes 1

#-------

tcltest::test gain-0 {Writing gain val for good param does correct thing
} -setup {
  setup
} -cleanup {
  tearDown
} -body { 
  ::dev SetGain 0 0
  ::dev SetGain 4 1 
  ::dev SetGain 8 2

  ::comObj getRecord
} -result {{Write 16 0} {Write 20 1} {Write 65 2}}

tcltest::test gain-1 {Writing gain with bad channel fails
} -setup {
  setup
} -cleanup {
  tearDown
} -body { 
  ::dev SetGain 9 0
} -result $badChannelPairError -returnCodes 1

tcltest::test gain-2 {Writing gain with value out of range fails
} -setup {
  setup
} -cleanup {
  tearDown
} -body { 
  ::dev SetGain 0 3 ; # only integer values between 0 and 2 are good
} -result {MCFD16RC::SetGain Invalid value provided. Must be in range [0,2].} -returnCodes 1

tcltest::test gain-3 {Reading gain val for good chan does correct thing
} -setup {
  setup
} -cleanup {
  tearDown
} -body { 
  ::dev GetGain 0
  ::dev GetGain 4
  ::dev GetGain 8

  ::comObj getRecord
} -result {{Read 16} {Read 20} {Read 65}}

tcltest::test gain-4 {Reading gain with bad channel fails
} -setup {
  setup
} -cleanup {
  tearDown
} -body { 
  ::dev GetGain 9
} -result $badChannelPairError -returnCodes 1

#-------

tcltest::test width-0 {Writing width for good param does correct thing
} -setup {
  setup
} -cleanup {
  tearDown
} -body { 
  # good width values are in range [16,222]
  ::dev SetWidth 0 16 
  ::dev SetWidth 3 222 
  ::dev SetWidth 8 120

  ::comObj getRecord
} -result {{Write 24 16} {Write 27 222} {Write 66 120}}

tcltest::test width-1 {Writing width with bad channel fails
} -setup {
  setup
} -cleanup {
  tearDown
} -body { 
  ::dev SetWidth 9 16 ; # channels can only be in range [0,8]
} -result $badChannelPairError -returnCodes 1

tcltest::test width-2 {Writing width with value out of range fails
} -setup {
  setup
} -cleanup {
  tearDown
} -body { 
  ::dev SetWidth 0 15 ; # only integer values between 16 and 222 are good
} -result {MCFD16RC::SetWidth Invalid value provided. Must be in range [16,222].} -returnCodes 1

tcltest::test width-3 {Reading width val for good chan does correct thing
} -setup {
  setup
} -cleanup {
  tearDown
} -body { 
  ::dev GetWidth 0
  ::dev GetWidth 4
  ::dev GetWidth 8

  ::comObj getRecord
} -result {{Read 24} {Read 28} {Read 66}}

tcltest::test width-4 {Reading width with bad channel fails
} -setup {
  setup
} -cleanup {
  tearDown
} -body { 
  ::dev GetWidth 9
} -result $badChannelPairError -returnCodes 1

#-------


tcltest::test deadtime-0 {Writing deadtime for good param does correct thing
} -setup {
  setup
} -cleanup {
  tearDown
} -body { 
  # good values for dead time are in range [27,222]
  ::dev SetDeadtime 0 27 
  ::dev SetDeadtime 3 222 
  ::dev SetDeadtime 8 120

  ::comObj getRecord
} -result {{Write 32 27} {Write 35 222} {Write 67 120}}

tcltest::test deadtime-1 {Writing deadtime with bad channel fails
} -setup {
  setup
} -cleanup {
  tearDown
} -body { 
  ::dev SetDeadtime 9 27 ; # channels can only be in range [0,8]
} -result $badChannelPairError -returnCodes 1

tcltest::test deadtime-2 {Writing deadtime with value out of range fails
} -setup {
  setup
} -cleanup {
  tearDown
} -body { 
  ::dev SetDeadtime 0 26 ; # only integer values between 27 and 222 are good
} -result {MCFD16RC::SetDeadtime Invalid value provided. Must be in range [27,222].} -returnCodes 1

tcltest::test deadtime-3 {Reading deadtime val for good chan does correct thing
} -setup {
  setup
} -cleanup {
  tearDown
} -body { 
  ::dev GetDeadtime 0
  ::dev GetDeadtime 4
  ::dev GetDeadtime 8

  ::comObj getRecord
} -result {{Read 32} {Read 36} {Read 67}}

tcltest::test deadtime-4 {Reading deadtime with bad channel fails
} -setup {
  setup
} -cleanup {
  tearDown
} -body { 
  ::dev GetDeadtime 9
} -result $badChannelPairError -returnCodes 1

#----------

tcltest::test delay-0 {Writing delay for good param does correct thing
} -setup {
  setup
} -cleanup {
  tearDown
} -body { 
  ::dev SetDelay 0 1
  ::dev SetDelay 3 2 
  ::dev SetDelay 8 4

  ::comObj getRecord
} -result {{Write 40 1} {Write 43 2} {Write 68 4}}

tcltest::test delay-1 {Writing delay with bad channel fails
} -setup {
  setup
} -cleanup {
  tearDown
} -body { 
  ::dev SetDelay 9 0 ; # channels can only be in range [0,8]
} -result $badChannelPairError -returnCodes 1

tcltest::test delay-2 {Writing delay with value out of range fails
} -setup {
  setup
} -cleanup {
  tearDown
} -body { 
  ::dev SetDelay 3 -1  ; # only integer values between 0 and 4 are allowed
} -result {MCFD16RC::SetDelay Invalid value provided. Must be in range [0,4].} -returnCodes 1

tcltest::test delay-3 {Reading delay val for good chan does correct thing
} -setup {
  setup
} -cleanup {
  tearDown
} -body { 
  ::dev GetDelay 0
  ::dev GetDelay 4
  ::dev GetDelay 8

  ::comObj getRecord
} -result {{Read 40} {Read 44} {Read 68}}

tcltest::test delay-4 {Reading delay with bad channel fails
} -setup {
  setup
} -cleanup {
  tearDown
} -body { 
  ::dev GetDelay 9
} -result $badChannelPairError -returnCodes 1

#----------

tcltest::test fraction-0 {Writing fraction for good param does correct thing
} -setup {
  setup
} -cleanup {
  tearDown
} -body { 
  ::dev SetFraction 0 20
  ::dev SetFraction 3 40 
  ::dev SetFraction 8 20

  ::comObj getRecord
} -result {{Write 48 0} {Write 51 1} {Write 69 0}}

tcltest::test fraction-1 {Writing fraction with bad channel fails
} -setup {
  setup
} -cleanup {
  tearDown
} -body { 
  ::dev SetFraction 9 20 ; # channels can only be in range [0,8]
} -result $badChannelPairError -returnCodes 1

tcltest::test fraction-2 {Writing fraction with bad value fails 
} -setup {
  setup
} -cleanup {
  tearDown
} -body { 
  ::dev SetFraction 3 -1  ; # only values of 20 or 40 are accepted
} -result {MCFD16RC::SetFraction Invalid value provided. Must be either 20 or 40.} -returnCodes 1

tcltest::test fraction-3 {Reading fraction for good channel does correct thing
} -setup {
  setup
} -cleanup {
  tearDown
} -body { 
  ::dev GetFraction 0
  ::dev GetFraction 3
  ::dev GetFraction 8

  ::comObj getRecord
} -result {{Read 48} {Read 51} {Read 69}}

tcltest::test fraction-4 {Writing fraction with bad channel fails
} -setup {
  setup
} -cleanup {
  tearDown
} -body { 
  ::dev GetFraction 9 ; # channels can only be in range [0,8]
} -result $badChannelPairError -returnCodes 1

#---------

tcltest::test mode-0 {Setting mode does what we expect
} -setup {
  setup
} -cleanup {
  tearDown
} -body { 
  ::dev SetMode common  
  ::dev SetMode individual 
  
  ::comObj getRecord
} -result  {{Write 72 0} {Write 72 1}}

tcltest::test mode-1 {Setting mode with invalid argument fails
} -setup {
  setup
} -cleanup {
  tearDown
} -body { 
  ::dev SetMode foobar
} -result {MCFD16RC::SetMode Invalid value provided. Must be either "common" or "individual".} \
-returnCodes 1

tcltest::test mode-2 {Reading mode does what we expect
} -setup {
  setup
} -cleanup {
  tearDown
} -body { 
  ::dev GetMode
  
  ::comObj getRecord
} -result  {{Read 72}}

#---------

tcltest::test pulser-0 {Enabling pulser creates appropriate command
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  ::dev EnablePulser 1 ; # enable 2.5 MHz pulser
  ::dev EnablePulser 2 ; # enable 1.22 kHz pulser

  ::comObj getRecord
} -result {{Write 118 1} {Write 118 2}}


tcltest::test pulser-1 {Enabling the pulser with an invalid arg fails
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  ::dev EnablePulser 0 ; # pulser arg can only be 1 or 2
} -result {MCFD16RC::EnablePulser Invalid value provided. Must be either 1 or 2.} \
-returnCodes 1


tcltest::test pulser-2 {Disabling the pulser creates the appropriate command
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  ::dev DisablePulser ; # pulser arg can only be 1 or 2
  ::comObj getRecord
} -result {{Write 118 0}}

tcltest::test pulser-3 {Reading pulser pulser creates the appropriate command
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  ::dev PulserEnabled 
  ::comObj getRecord
} -result {{Read 118}}
#---------

tcltest::test channelmask-0 {Setting channel mask
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  ::dev SetChannelMask 255 ; #  disable channels 0-15

  ::comObj getRecord
} -result {{Write 83 255}}

tcltest::test channelmask-1 {Writing invalid value to  channel mask fails
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  ::dev SetChannelMask 256 ; # only values in range [0,255] are allowed

  ::comObj getRecord
} -result {MCFD16RC::SetChannelMask Invalid mask value. Must be in range [0,255].} \
-returnCodes 1

tcltest::test channelmask-2 {Reading channel mask with bad bank value fails
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  ::dev GetChannelMask ; 

  ::comObj getRecord
} -result {{Read 83}}

#---------

tcltest::test enablerc-0 {Make sure that we can enable rc
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  ::dev EnableRC on ;# rc mode takes any boolean type as arg
  ::dev EnableRC false
  ::comObj getRecord
} -result {{Write 73 1} {Write 73 0}}

tcltest::test enablerc-1 {Make sure that non-boolean arg fails
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  ::dev EnableRC notabool 
} -result {MCFD16RC::EnableRC Invalid value provided. Must be a boolean.} \
-returnCodes 1

tcltest::test rcenabled-0 {Reading state of rc forms the correct cmd
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  ::dev RCEnabled
  ::comObj getRecord
} -result {{Read 73}}


#---------

tcltest::test setTriggerSource-0 {Check that trigger source settings work
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  ::dev SetTriggerSource 0 or 1
  ::dev SetTriggerSource 1 pair_coinc 0
  ::dev SetTriggerSource 2 pat_or_1 1
  ::comObj getRecord
} -result {{Write 128 65} {Write 129 4} {Write 130 96}}

#---------

tcltest::test setTriggerOrPattern-0 {Check that trigger or pattern settings work
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  ::dev SetTriggerOrPattern 0 0x0a0b
  ::dev SetTriggerOrPattern 1 0x0f12
  ::comObj getRecord
} -result {{Write 124 11} {Write 125 10} {Write 126 18} {Write 127 15}}

#---------

tcltest::test getFastVeto-0 {Check that we can write fast veto
} -setup {
  setup
} -cleanup {
  tearDown
} -body {
  ::dev SetFastVeto 0
  ::dev SetFastVeto 1
  ::dev GetFastVeto
  ::comObj getRecord
} -result {{Write 77 0} {Write 77 1} {Read 77}}

#---------
#
tcltest::test computeAddress-0 {Given a parameter and ch, return proper addr
} -setup {
  setup
} -cleanup {
  tearDown
} -body { 
  set res [list]
  lappend res [::MCFD16RC ComputeAddress threshold 2]
  lappend res [::MCFD16RC ComputeAddress threshold 16]
  lappend res [::MCFD16RC ComputeAddress fraction 8]
  lappend res [::MCFD16RC ComputeAddress fraction 4]
} -result {2 64 69 52}


#------------

###############################################################################
###############################################################################
###############################################################################

# 

snit::type controlClient {
  option -host
  option -port
  option -returnval -default "OK"
  
  variable _log
  
  constructor {args} {
    $self configurelist $args

    set _log [list]
  }

  method Set {dev param val} { 
    lappend _log [list Set $dev $param $val];
    return [$self cget -returnval]
  }
  method Get {dev param} { 
    lappend _log [list Get $dev $param]  
    return [$self cget -returnval]
  }

  method getLog {} {return $_log}
}


tcltest::test mxdcrc_transaction-0 { Test for a Set command
} -setup {
  MXDCRCProxy ::dev -module rcbus -devno 8 
} -cleanup {
  ::dev destroy
} -body {
  ::dev Write 14 0;

  [::dev getComObject] getLog
} -result {{Set rcbus d8a14 0}}

tcltest::test mxdcrc_transaction-1 { Test for a Get command
} -setup {
  MXDCRCProxy ::dev -module rcbus -devno 8 
} -cleanup {
  ::dev destroy
} -body {
  ::dev Read 20  ;

  [::dev getComObject] getLog
} -result {{Get rcbus d8a20}}

tcltest::test mxdcrc_transaction-2 { Test that write returning "ERROR - ..."
 converts into a tcl error
} -setup {
  MXDCRCProxy ::dev -module rcbus -devno 8 
  [::dev getComObject] configure -returnval "ERROR - etcetera etcetera"
} -cleanup {
  ::dev destroy
} -body {
  
  set res [catch {::dev Write 20 4} msg] 

  list $res $msg
} -result {1 {Set d8a20 4 failed with message : "etcetera etcetera"}}

tcltest::test mxdcrc_transaction-3 { Test that read returning "ERROR - ..."
 converts into a tcl error
} -setup {
  MXDCRCProxy ::dev -module rcbus -devno 8 
  [::dev getComObject] configure -returnval "ERROR - etcetera etcetera"
} -cleanup {
  ::dev destroy
} -body {
  
  set res [catch {::dev Read 20} msg] 

  list $res $msg
} -result {1 {Get d8a20 failed with message : "etcetera etcetera"}}


tcltest::test mxdcrc_formparam-0 { Format parameter from devno and param addr
} -setup {
  MXDCRCProxy ::dev -module rcbus -devno 8 
} -cleanup {
  ::dev destroy
} -body {
  ::dev _formatParameter 8 27
} -result d8a27

tcltest::test mxdcrc_transactFailed-0 { Check for ERROR in transaction response
} -setup {
  MXDCRCProxy ::dev -module rcbus -devno 8 
} -cleanup {
  ::dev destroy
} -body {
  
  set reslist [list]
  
  # ERROR response --> failure
  lappend reslist [::dev _transactionFailed "ERROR - etcetera etcetera"]

  # string response --> NOT a failure
  lappend reslist [::dev _transactionFailed "etcetera etcetera"]

  # numeral response --> NOT a failure
  lappend reslist [::dev _transactionFailed 1]

  # empty response --> NOT a failure
  lappend reslist [::dev _transactionFailed {}]

  set reslist
} -result {1 0 0 0}


tcltest::cleanupTests
