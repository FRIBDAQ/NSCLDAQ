<!-- manpage 1daq -->

<refentry>
  <refmeta>
    <refentrytitle>ddasReadout</refentrytitle>
    <manvolnum>1daq</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>ddasReadout</refname>
    <refpurpose>Run <filename>DDASReadout</filename> and an associated sorter.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <cmdsynopsis>
      <command>$DAQBIN/ddasReadout <replaceable>option...</replaceable></command>
    </cmdsynopsis>
  </refsynopsisdiv>
  <refsect1>
    <title>DESCRIPTION</title>
    <para>
      As of NSCLDAQ 11.4, the DDAS readout framework has been broken into a pair of programs: <filename>DDASReadout</filename>, which reads blocks of (possibly) out-of-order data from the XIA digitizer modules and <filename>ddasSort</filename>, which accepts those data and sorts them by timestamp. This was done to maximize performance:
    </para>
    <orderedlist>
      <listitem>
        <para>
          <filename>DDASReadout</filename> and <filename>ddasSort</filename> take advantage of pipeline parallelism to do the sorting in parallel with digitizer readout.
        </para>
      </listitem>
      <listitem>
        <para>
          If necessary, the <filename>ddasSort</filename> process can be run on a different node than <filename>DDASReadout</filename>, making more processing power available.
        </para>
      </listitem>
    </orderedlist>
    <para>
      A driver, that looks to the <literal>ReadoutGUI</literal> like an SSHPipe data source, allows you to treat this pair of programs as if it were a single unified program.
    </para>
    <para>
      The program is called <filename>ddasReadout</filename> (note the lower case 'ddas'). This manpage describes the <filename>ddasReadout</filename> program.
    </para>
  </refsect1>
  <refsect1>
    <title>Options</title>
    <para>
      Note that some program options are mandatory. Those will be pointed out as they are documented. Note as well that options are prefixed with a single <literal>-</literal> rather than a double <literal>--</literal>.
    </para>
    <variablelist>
      <varlistentry>
        <term><option>-readouthost</option> <replaceable>dns-name</replaceable> (required)</term>
        <listitem>
          <para>
            This required determines which system the <filename>DDASReadout</filename> program will be run in. This must be a system that is connected to a DDAS crate and has its PLX drivers loaded.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>-readoutring</option> <replaceable>ringname (default=tcp://localhost/$USER)</replaceable></term>
        <listitem>
          <para>
            Specifies the name of the ring buffer into which <filename>DDASReadout</filename> reads data in the host where that program runs (see <option>-readouthost</option>). This is passed to the <filename>DDASReadout</filename> program as its <option>--ring</option> option. Note that while a default value exists for this option, it is almost certainly unsuitable for any real application and this option is required in practice.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>-sorthost</option> <replaceable>name</replaceable> (required)</term>
        <listitem>
          <para>
            This is a required option which provides the DNS name of the host in which the <filename>ddasSort</filename> will be run.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>-sortring</option> <replaceable>ringname</replaceable> (required)</term>
        <listitem>
          <para>
            This is a required option that provides the name of the ring into which <filename>ddasSort</filename> puts the sorted hit ring items. If the ringbuffer does not yet exist, it will be created. This is a ring name not a URI, just a string specifying the output ringbuffer name.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>-cratedir</option> <replaceable>path</replaceable> (required)</term>
        <listitem>
          <para>
            A required option which sets <filename>DDASReadout</filename>'s current working directory set to a directory that contains its configuration files. When <filename>DDASReadout</filename> is run, this will be its working directory.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>-sourceid</option> <replaceable>value (default=0)</replaceable></term>
        <listitem>
          <para>
            If present this value is relayed to <filename>DDASReadout</filename> as the value of its <option>--sourceid</option> option. This determines the sourceid used to tag ring items from the readout program. The <filename>ddasSort</filename> program will tag ring items with the same source id as that observed by the ring items it processes.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>-fifothreshold</option> <replaceable>words (default=20480)</replaceable></term>
        <listitem>
          <para>
            Setd the FIFO threshold used by <filename>DDASReadout</filename> for the data source (crate). The FIFO threshold is in units of 32-bit words. All modules in a crate will have their data read out whenever any module FIFO contians more than fifothreshold words.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>-buffersize</option> <replaceable>bytes (default=16384)</replaceable></term>
        <listitem>
          <para>
            Size in bytes of the event buffer that will be used by <filename>DDASReadout</filename> to hold events prior to constructing ring items. The buffer must be larger than the size of a single event read frm the module. If you are reading large events (e.g. with long traces) you may need to increase the event buffer size if you get messages like "channel event too big for readout".
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>-infinity</option> <replaceable>enb (default=off)</replaceable></term>
        <listitem>
          <para>
            Controls whether the infinity clock is used or not (on/off). If the infinity clock is enabled, run timers are not cleared at the beginning of a new run (timestamps _do not_ reset to 0) and the clock phases for 250 MSPS and 500 MSPS Pixie modules will not be reinitialized upon run start.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>-clockmultiplier</option> <replaceable>ns-per-tick (default=1)</replaceable></term>
        <listitem>
          <para>
            External timestamp calibration value in nanoseconds per clock tick.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>-scalerseconds</option> <replaceable>seconds (default=16)</replaceable></term>
        <listitem>
          <para>
            Readout interval for scaler data in seconds. Note that this may be rate-limiting if the data rate is large and the scaler readout interval is small.
          </para>
        </listitem>
      </varlistentry>      
      <varlistentry>
        <term><option>-window</option> <replaceable>seconds (default=10.0)</replaceable></term>
        <listitem>
          <para>
            Describes how old events must be before they are emitted (in seconds) from the <filename>ddasSort</filename> sliding window. If you change this value be sure to ensure the event builder sees no late or out-of-order fragments from this data source.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>-port</option> <replaceable>integer</replaceable></term>
        <listitem>
          <para>
            This becomes the <option>--port</option> option of the <filename>DDASReadout</filename> program. If Tcl server functionality is needed, this is the port on which that server will be listening for connections. If not specified, this option is not provided to the <filename>DDASReadout</filename> program which will have its Tcl server functionality disabled.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>-init-script</option> <replaceable>path</replaceable></term>
        <listitem>
          <para>
            If provided, this is passed to the <filename>DDASReadout</filename> program as its <option>--init-script</option> option. The value should be a path to a Tcl script that will be run as the readout program starts.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>-log</option> <replaceable>path</replaceable></term>
        <listitem>
          <para>
            If provided, the value of this option will be passed to <filename>DDASREADOUT</filename> as its <option>--log</option> option. This specifies the path into which the readout program logs interesting information. If the file does not exist it is created. The path prefix must be a directory that's writable by the user.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>-debug</option> <replaceable>log-level (default=0)</replaceable></term>
        <listitem>
          <para>
            If provided, passes the debug level to the <filename>DDASReadout</filename> program. This parameter is an integer in the range 0-2 inclusive and determines the sort of information written to the log file. The higher the number, the more verbose the logging.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>
  <refsect1>
    <title>Using the <filename>ddasReadout</filename> driver</title>
    <para>
      <filename>ddasReadout</filename> is intended to be used as a data source in the <filename>ReadoutShell</filename> GUI. It does not actually matter much where the <filename>ddasReadout</filename> program is run as it will be running the actual readout and sort programs where you tell it to using its command line options.
    </para>
    <para>
      Use the <guimenu>Data Source</guimenu> <guimenuitem>Add...</guimenuitem> menu to specify the data source. <filename>ddasReadout</filename> is intended to be used as an SSHPipe data source. It will relay commands sent to it to the actual readout program. It will relay output and error messages to the its own stdout which is captured by the SSHPipe driver and relayed to a tab for the data source on the <filename>ReadoutShell</filename> GUI.
    </para>
    <para>
      When setting up the event builder be sure to point the data source at the <filename>ddasSort</filename> output ring (e.g. in <filename>ReadoutCallouts.tcl</filename>). That's where the individual timestamped hits will be placed. The <filename>DDASReadout</filename> ring gets ring items that consist of blocks of unsorted hits and its output will not be correctly handled by the event builder.
    </para>
  </refsect1>
</refentry>

<!-- /manpage -->
