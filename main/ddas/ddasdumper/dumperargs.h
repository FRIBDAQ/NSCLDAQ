/** @file dumperargs.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.6
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef DUMPERARGS_H
#define DUMPERARGS_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE "ddasdumper"
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CMDLINE_PARSER_PACKAGE_NAME "ddasdumper"
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION "1.1"
#endif

enum enum_format { format__NULL = -1, format_arg_v12 = 0, format_arg_v11, format_arg_v10 };

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  char * source_arg;	/**< @brief URL of source, ring buffer or file.  */
  char * source_orig;	/**< @brief URL of source, ring buffer or file original value given at command line.  */
  const char *source_help; /**< @brief URL of source, ring buffer or file help description.  */
  int skip_arg;	/**< @brief number of items to skip before dumping.  */
  char * skip_orig;	/**< @brief number of items to skip before dumping original value given at command line.  */
  const char *skip_help; /**< @brief number of items to skip before dumping help description.  */
  int count_arg;	/**< @brief Number of items to dump before exiting.  */
  char * count_orig;	/**< @brief Number of items to dump before exiting original value given at command line.  */
  const char *count_help; /**< @brief Number of items to dump before exiting help description.  */
  char * sample_arg;	/**< @brief *Deprecated* List of item types to sample.  */
  char * sample_orig;	/**< @brief *Deprecated* List of item types to sample original value given at command line.  */
  const char *sample_help; /**< @brief *Deprecated* List of item types to sample help description.  */
  char * exclude_arg;	/**< @brief List of item types to exclude from the dump.  */
  char * exclude_orig;	/**< @brief List of item types to exclude from the dump original value given at command line.  */
  const char *exclude_help; /**< @brief List of item types to exclude from the dump help description.  */
  char * fileout_arg;	/**< @brief Path of output file.  */
  char * fileout_orig;	/**< @brief Path of output file original value given at command line.  */
  const char *fileout_help; /**< @brief Path of output file help description.  */
  int legacy_mode_flag;	/**< @brief *Deprecated* use --format* Legacy data format enabled. This is not a default setting (default=off).  */
  const char *legacy_mode_help; /**< @brief *Deprecated* use --format* Legacy data format enabled. This is not a default setting help description.  */
  enum enum_format format_arg;	/**< @brief Format of input data - replaces the legacy-mode flag (default='v12').  */
  char * format_orig;	/**< @brief Format of input data - replaces the legacy-mode flag original value given at command line.  */
  const char *format_help; /**< @brief Format of input data - replaces the legacy-mode flag help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int source_given ;	/**< @brief Whether source was given.  */
  unsigned int skip_given ;	/**< @brief Whether skip was given.  */
  unsigned int count_given ;	/**< @brief Whether count was given.  */
  unsigned int sample_given ;	/**< @brief Whether sample was given.  */
  unsigned int exclude_given ;	/**< @brief Whether exclude was given.  */
  unsigned int fileout_given ;	/**< @brief Whether fileout was given.  */
  unsigned int legacy_mode_given ;	/**< @brief Whether legacy-mode was given.  */
  unsigned int format_given ;	/**< @brief Whether format was given.  */

} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief the description string of the program */
extern const char *gengetopt_args_info_description;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char **argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);

extern const char *cmdline_parser_format_values[];  /**< @brief Possible values for format. */


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* DUMPERARGS_H */
