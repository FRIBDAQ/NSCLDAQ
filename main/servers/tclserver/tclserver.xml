<!-- chapter utilities -->
    
<chapter id="chapter.tclserver">
    <title>The tcl server application</title>
    <para>
        TclServer is a deceptively simple program.  It is a wish (Tk) interpreter
        that allows Tcp/IP connections from a local or remote client.
        Once connected, the client can send messages consisting of Tcl commands
        and receive the result of executing those commands from the server.
    </para>
    <para>
        TclServer is used as the basis of a number of applications in the
        NSCLDAQ system including the scaler display program, the epicsdisplay
        program and other software written by specific groups. Tcl servers can
        be used as distributed data repositories (store data in server Tcl variables and/or
        arrays and get them back out), or as display programs that can be remote-controlled.
        The production readout framework has a Tcl Server component that can be enabled.
    </para>
    <para>
        This chapter contains:
	A description of the TclServer protection model.  For complete
    information about the TclServer see
    <link linkend="manpage.tclserver"> the TclServer reference pages
    </link>.
    </para>
        <para>
            The TclServer protection model is not very stringent.  The assumption
            is that TclServers can only be reached by trusted systems.  Specifically
            systems that have not been broken into and will not spoof host names.
            When a TclServer starts, it will only allow connections from
            <literal>localhost</literal>.
        </para>
        <para>
            The TclServer extends the Tcl/Tk command set with the command
            <command>serverauth</command> this command allows you to authorize
            additional systems to connect  to the server.  The complete form
            of the <command>serverauth</command> command is described in
            the <link linkend="manpage.serverauth"> reference page for the
	    <command>serverauth</command> command.</link>.
            section.
        </para>
        <para>
            The following command adds the node <literal>spdaq20.nscl.msu.edu</literal>
            to the set of hosts that are allowed to connnect to the server.
        </para>
        <example>
            <title>Using <command>serverauth</command> to authorize a node</title>
            <programlisting>
serverauth add spdaq20.nscl.msu.edu
            </programlisting>
        </example>
        <section>
            <title>Tcl server package</title>
            <para>
                TclServer is also available as a package that can be incorporated
                into Tcl scripts.
                For information about that, see:
                <link linkend='tcl3_tclserver_class'
                      endterm='tcl3_tclserver_class_title' />
            </para>
        </section>
</chapter>

<!-- /chapter -->
<!-- manpage 1tcl -->


<refentry id="manpage.tclserver">
  <refentryinfo>
	<author>
	    <personname>
		<firstname>Ron</firstname>
		<surname>Fox</surname>
	    </personname>
	    <personblurb><para></para></personblurb>
	</author>
	<productname>NSCLDAQ</productname>
	<productnumber></productnumber>
    </refentryinfo>
  <refmeta>
     <refentrytitle>tclserver</refentrytitle>
     <manvolnum>1tcl</manvolnum>
     <refmiscinfo class='empty'></refmiscinfo>
  </refmeta>
  <refnamediv>
     <refname>tclserver</refname>
     <refpurpose>Start a Tcl Server.</refpurpose>
  </refnamediv>
  
  <refsynopsisdiv>
    <cmdsynopsis>
	<command>
tclserver <optional><option>-p<replaceable>port</replaceable></option> <option>-userauth</option></optional>
	</command>
    </cmdsynopsis>
  </refsynopsisdiv>
  <refsect1>
     <title>DESCRIPTION</title>
     <para>
	Starts a Tcl server.   The server will listen for connections.  Authorized
        connections will be allowed to 'poke' Tcl commands to the server which will
        execute them and return the result to the client.
     </para>
  </refsect1>
  <refsect1>
     <title>
	OPTIONS
     </title>
     <variablelist>
	<varlistentry>
	    <term><option>-p<replaceable>port</replaceable></option></term>
	    <listitem>
		<para>
                    Specifies the port on which the server will listen.
                    <itemizedlist>
                        <listitem>
                            <para>
                                If omitted this defaults to 2048.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                If <replaceable>port</replaceable> is the
                                text string <literal>Managed</literal>,
                                the daq port manager is contacted to allocated
                                a free port on which to listen.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                If <replaceable>port</replaceable> is an integer,
                                it is taken as th eport on which to listen.
                            </para>
                        </listitem>
                    </itemizedlist>
		</para>
	    </listitem>
                        
	</varlistentry>
        <varlistentry>
            <term><option>-userauth</option></term>
            <listitem>
                <para>
                    If present, the client must, in addition to being authorized
                    via the <command>serverauth</command> command send as the first
                    line of text the name of the user running the client.
                    This username must match the name of the uyser that is running
                    the server.
                </para>
                <para>
                    This is intended to reduce the chances that more than one user
                    on the same system might cause problems by talking with each other's
                    tclservers.
                </para>
            </listitem>
        </varlistentry>
     </variablelist>
  </refsect1>

</refentry>
<refentry id="manpage.serverauth">
    <refentryinfo>
            <author>
                <personname>
                    <firstname>Ron</firstname>
                    <surname>Fox</surname>
                </personname>
                <personblurb><para></para></personblurb>
            </author>
            <productname>NSCLDAQ</productname>
            <productnumber></productnumber>
        </refentryinfo>
  <refmeta>
     <refentrytitle>serverauth</refentrytitle>
     <manvolnum>1tclserver</manvolnum>
     <refmiscinfo class='empty'></refmiscinfo>
  </refmeta>
  <refnamediv>
     <refname>serverauth</refname>
     <refpurpose>Control tcl server authorization.</refpurpose>
  </refnamediv>
  
  <refsynopsisdiv>
    <cmdsynopsis>
	<command>
serverauth add <replaceable>hostorip</replaceable>
	</command>
    </cmdsynopsis>
    <cmdsynopsis>
        <command>
serverauth remove <replaceable>hostorip</replaceable>
        </command>
    </cmdsynopsis>
    <cmdsynopsis>
        <command>
serverauth list
        </command>
    </cmdsynopsis>

  </refsynopsisdiv>
  <refsect1>
     <title>DESCRIPTION</title>
     <para>
	Manipulates the server authorization database.  The server authorization
        database determines which nodes are allowed to connect to the tcl server.
        This command lives in the tclserver itself.  Usually a startup script
        or GUI element projected by the server sets up the appropriate authorization
        lists.
     </para>
     <para>
        <command>serverauth</command> is an ensemble of commands that has
        the following ensemble commands:
     </para>
     <variablelist>
        <varlistentry>
            <term><command>serverauth add <replaceable>hostorip</replaceable></command></term>
            <listitem>
                <para>
                    Adds <parameter>hostorip</parameter> to the set of hosts
                    that are allowed to connect to this instance of the server.
                    <parameter>hostorip</parameter> can be either a DNS hostname
                    like <literal>spdaq22.nscl.msu.edu</literal> or it can
                    be a dotted IP address like: <literal>35.8.35.123</literal>.
                    </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><command>serverauth remove <replaceable>hostorip</replaceable></command></term>
            <listitem>
                <para>
                    Removes the host <parameter>hostorip</parameter> from the set of
                    systems that are authorized to connect as clients to the tcl server.
                    <parameter>hostorip</parameter> is a DNS name or dotted IP, as for
                    the <command>serverauth add</command> command.  Matching is based on
                    the IP address so the command should work just fine in the presence of e.g. CNAMEs.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><command>serverauth list</command></term>
            <listitem>
                <para>
                    Lists the systems that are authorized to connect.  The command
                    returns as a result a Tcl list. Each element of the list is a pair.
                    The first element of the pair is the hostname of a host authorized
                    to connect (actually a hostorip provided).  The second element
                    of the list is the IP address of the associated host.
                </para>
            </listitem>
        </varlistentry>
     </variablelist>
  </refsect1>
 
</refentry>
<!-- /manpage -->

<!-- manpage 3tcl -->

      <refentry id="tcl3_tclserver_class">
	<refentryinfo>
            <author>
                <personname>
                    <firstname>Ron</firstname>
                    <surname>Fox</surname>
                </personname>
                <personblurb><para></para></personblurb>
            </author>
            <productname>NSCLDAQ</productname>
            <productnumber></productnumber>
        </refentryinfo>
        <refmeta>
           <refentrytitle id="tcl3_tclserver_class_title">TclServer</refentrytitle>
           <manvolnum>3tcl</manvolnum>
	   <refmiscinfo class='empty'></refmiscinfo>
        </refmeta>
        <refnamediv>
           <refname>TclServer</refname>
           <refpurpose>Embeddable Tcl Server script object</refpurpose>
        </refnamediv>
        
        <refsynopsisdiv>
          <cmdsynopsis>
              <command>
package require TclServer
          </command>
          </cmdsynopsis>
            <cmdsynopsis>
                <command>
set <replaceable>server</replaceable> [TclServer %AUTO% <replaceable>?options?</replaceable>]
                </command>
            </cmdsynopsis>
            <cmdsynopsis>
                <command>
<replaceable>$server methodname ?params?</replaceable>
                </command>
            </cmdsynopsis>

        </refsynopsisdiv>
        <refsect1>
           <title>DESCRIPTION</title>
           <para>
            <classname>TclServer</classname> provides a pure Tcl Tcl server that
            can be embedded into a script.  A script using
            <classname>TclServer</classname> must be based on the Tcl event
            loop as that is used to dispatch connection and input events.
           </para>
           <para>
            In insecure environments you should probably embed the
            <classname>TclServer</classname> in a secure slave interpreter.
            Users can implement authentication protocols via the
            <option>-onconnect</option> script.   Error handling can also be
            customized via the <option>-onerror</option> script.
           </para>
           <para>
            The sever can be in two states.   In the <literal>inactive</literal>
            state the server is not listening for new connections.  Prior connections
            could still be executing.  In the <literal>active</literal> state,
            the server is listening for connections on the port configured
            via the <option>-port</option> option.
           </para>
        </refsect1>
        <refsect1>
           <title>
              OPTIONS
           </title>
           <para>
            Several options control the way the server works:
           </para>
           <variablelist>
            <varlistentry>
                <term><option>-port</option> <replaceable>port-num</replaceable></term>
                <listitem>
                    <para>
                        Determines which TCP/IP port the server will listen on
                        for client connections.  This can only be configured when
                        the server is in the <literal>inactive</literal> state.
                        See the <methodname>start</methodname> and
                        <methodname>stop</methodname> methods in the METHODS
                        section below for more information.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><option>-onconnect</option> <replaceable>script</replaceable></term>
                <listitem>
                    <para>
                        Specifies a script to be called when a connection
                        request is received.  The script must take three parameters
                        which are in order;
                    </para>
                    <orderedlist>
                        <listitem><para>The socket fd on which data are transferred </para></listitem>
                        <listitem><para>The IP address of the client</para></listitem>
                        <listitem><para>The port assigned the client</para></listitem>
                    </orderedlist>
                    <para>
                        If the script returns false, the connection will be immediately
                        closed by the server.  If true, the server will set up
                        to handle commands from the client.  This option therefore
                        allows users of the <classname>TclServer</classname> object
                        to implement authentication protocols.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><option>-onerror</option> <replaceable>script</replaceable></term>
                <listitem>
                    <para>
                        Specifies a script that will be called whenever a remotely
                        requested script has thrown an error.  The script is called
                        with three parameters that are in order:
                    </para>
                    <orderedlist>
                        <listitem><para>The channel on which the script was received.</para></listitem>
                        <listitem><para>The command that caused the error.</para></listitem>
                        <listitem><para>The error message produced by the command.</para></listitem>
                    </orderedlist>
                    <para>
                        If the script returns <literal>false</literal> the
                        client connection is closed by the server.  If the
                        script returns <literal>true</literal> the client
                        connection remains open.
                    </para>
                </listitem>
            </varlistentry>
                
           </variablelist>
        </refsect1>
        <refsect1>
            <title>METHODS</title>
            <para>
                The following methods control the server.
            </para>
            <variablelist>
                <varlistentry>
                    <term><methodname>start</methodname></term>
                    <listitem>
                        <para>
                            Starts the server.  This puts the server into the
                            <literal>active</literal> mode.  Configuring the
                            <option>-port</option> option when <literal>active</literal>
                            results in an error.  If the server is already
                            <literal>active</literal> an error is also thrown.
                        </para>
                        <para>
                            If the <option>-port</option> configuration option is
                            not a legal positive integer an error will be thrown.
                            If a privileged port is chosen but the application does
                            not have privilege the <command>socket -server</command>
                            command will throw an error.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><methodname>stop</methodname></term>
                    <listitem>
                        <para>
                            Stops the server.  This puts the server into the
                            <literal>inactive</literal> state.  Note that
                            this only stops listening for new connections.
                            Existing connections are retained unless or until
                            the <methodname>close</methodname> method is invoked.
                        </para>
                        <para>
                            It is an error to <methodname>stop</methodname> the
                            server when it is <literal>inactive</literal>.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><methodname>close</methodname></term>
                    <listitem>
                        <para>
                            Closes all active client connections.   This can be
                            performed in any server state.  It is not an error
                            to <methodname>close</methodname> if there are no
                            active connections.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </refsect1>
      </refentry>


<!-- /manpage -->