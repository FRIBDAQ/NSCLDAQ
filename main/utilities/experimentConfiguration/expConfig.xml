<!-- chapter utilities -->

<chapter id='chap.expconfig'>
    <title id='chap.expconfig.title'>Experiment Configuration utility</title>
    <para>
        The experiment configuration utility works together with the statemanager
        and boot programs to allow you to define the software and data flow
        elements for your experiment.  For information about the state manager
        see <link linkend='chap.statemgr' endterm='chap.statemgr.title' />.
        For information about the boot managerr see
        <link linkend='chap.boot' endterm='chap.boot.title' />
    </para>
    <para>
        The experiment configuration utility is a graphical editor. The editor
        lets you configure:
        <itemizedlist>
            <listitem><para>
                 The set of nodes (computers) your experiment runs on
                 </para></listitem>
            <listitem><para>
                The ring buffers your experiment uses for dataflow and which
                nodes they liveo n.
                </para></listitem>
            <listitem><para>
                A set of critical programs and the nodes on which they will
                be started.   In the context of the boot manager, a critical program
                is one that must continue to run for the experiment to work.
                In the context of the state manager, if a critical program exits,
                a <literal>FAIL</literal> transition is requested to make the
                system state <literal>NotReady</literal>
                </para></listitem>
        </itemizedlist>
    </para>
    <para>
        The remainder of this chapter will describe how to:
        <itemizedlist>
            <listitem><para>
                Open or create an experiment configuration.
                </para></listitem>
            <listitem><para>
                Work with the node configuration of the experiment.
                </para></listitem>
            <listitem><para>
                Work with the ring configuration of the experiment.
                </para></listitem>
            <listitem><para>
                Work with the program configuration of the experiment.
                </para>
            </listitem>
        </itemizedlist>
    </para>
    <section>
        <title>Starting the program and choosing a configuration</title>
        <para>
            Before starting the experiment configurationprogram, NSCLDAQ
            installation specific environment variables must be defined.
            This is done by sourcing the <filename>dasetup.bash</filename> script
            from the root of the installation directory for your DAQ distribution.
        </para>
        <para>
            If, for example, NSCLDAQ is installed in /usr/opt/daq/11.0:
        </para>
        <informalexample>
            <programlisting>
. /usr/opt/daq/11.0/daqsetup.bash
            </programlisting>
        </informalexample>
        <para>
            makes the necessary environment variable definitions.
        </para>
        <para>
            Once the <filename>daqsetup.bash</filename> script has been run,
            you can start up the experiment configuration tool via the command:
        </para>
        <informalexample>
            <programlisting>
$DAQBIN/experimentConfiguration
            </programlisting>
        </informalexample>
        <para>
            The editor looks like this immediately after it was started:
        </para>
        <figure>
            <title>experimentConfiguration utility initial display</title>
            <mediaobject>
               <imageobject>
                    <imagedata fileref='initial.jpg' format='JPEG' />
                </imageobject>
            </mediaobject>
        </figure>
        <para>
            The top of the display has the File menu from which you can open
            existing or create new experiment definition files.  Definition
            files are sqlite3 databases.  All editor operations are immediately
            reflected in the database.
        </para>

    </section>
    <section>
        <title>Defining, deleting and editing nodes</title>
        <para>
            The <literal>Hosts</literal> tab of the editor allows you to define
            and modify the set of host computers that will participate in your
            experiment.  When empty it looks like this:
        </para>
        <figure>
            <title>Empty host definition table</title>
            <mediaobject>
               <imageobject>
                    <imagedata fileref='hosts.jpg' format='JPEG' />
                </imageobject>
            </mediaobject>
        </figure>
        <itemizedlist>
            <listitem><para>
                Define a new host by typing it's hostname or IP address in the
                empty <literal>Host Name</literal> box in the empty row at the
                end of the table. Hitting the enter key commits the change
                and assigns a unique host id to the hostname.  This host id
                is what is actually used to bind rings and programs to that host.
            </para></listitem>
            <listitem><para>
                Change an existing host name by simply typing a new hostname
                in a filled in box and again, hit enter to commit the change.
                Since host bindings are represented by the host id, changing a
                host name effectively moves all the rings and programs that had
                been associated with the old host to the new host.
            </para></listitem>
            <listitem><para>
                Finally to remove a host from the list of hosts right click in the
                table line containing that host and select <literal>Delete</literal>
                from the resulting pop up menu.  If a host is referenced by a ring or
                a program those references must first be deleted before the editor will
                allow you to delete a host from the table.
                </para></listitem>
        </itemizedlist>
        <para>
            Here's an example of a filled in host table:
        </para>
        <figure>
            <title>A filled in host table</title>
            <mediaobject>
               <imageobject>
                    <imagedata fileref='filledinhosts.jpg' format='JPEG' />
                </imageobject>
            </mediaobject>
        </figure>
        
                
    </section>
    <section>
        <title>Creating, deleting and editing ring buffer definitions</title>
        <para>
            Ringbuffers are NSCLDAQ's primary dataflow mechanism. The Rings
            tab of the program configuration editor allows you to define
            the rings you need for your experiment.  Note that proxy rings
            <footnote><para>
                A proxy ring is a ring buffer that is created to allow access to a ring
                buffer located in a remote system.  NSCLDAQ sets up a network
                data flow between the remote ring and the proxy ring.
                </para></footnote>
            should not be created.  Only ringbuffers for which you will provide
            data sources
        </para>
        <para>
            Here is what the empty Rings tab looks like:
        
            <figure>
                <title>Experiment editor empty ring table</title>
                <mediaobject>
                   <imageobject>
                        <imagedata fileref='emptyringtable.jpg' format='JPEG' />
                    </imageobject>
                </mediaobject>
            </figure>
            The <literal>host/ring</literal> column shows either the hostname in which the
            ring is defined or the ring id depending on the table line.  This
            will be a bit clearer when we show a filled in Rings table.  The
            <literal>ring</literal> column shows the ring name.  This must be unique
            within the host, however the same ring name can be used in different hosts
            (not recommended as it can be confusing).  The <literal>source id</literal>
            column displays the optional source id for the column.  When an event
            builder gets data from a ring, the <literal>source id</literal>
            of that ring is used to configure the ring data source's source id.
        </para>
        <itemizedlist>
            <listitem><para>
                To define a new ring, right click anwhere in the table and select
                <literal>New...</literal> from the pop up menu.  This will
                bring up a dialog box that allows you to fill in the name of the
                ring, select its host from the set of hosts defined and optinoally
                set a source id if the output of the ring will be a data source
                for the event builder.
                </para></listitem>
            <listitem><para>
                To modify a ring's definition, right click it and choose
                <literal>Edit...</literal> from the pop up menu.  The same dialog
                you used to define the ring will pop up, pre-stocked with the
                current ring definition.  after making appropriate changes,
                clicking Ok modifies the definition of that ring
                </para></listitem>
            <listitem><para>
                To delete a ring definition, again right click the ring and
                select <literal>Delete...</literal> from the popup menu.
                </para></listitem>
        </itemizedlist>
        <para>
            The figure below shows what a filled in Rings tab might look like.
            <figure>
                <title>Rings defined in the experiment configuratino editor.</title>
                <mediaobject>
                   <imageobject>
                        <imagedata fileref='filledinrings.jpg' format='JPEG' />
                    </imageobject>
                </mediaobject>
            </figure>
            As you can see the data are arranged as a shallow tree. The top levels
            of the trees are hosts defined in the system.  The second level of the
            tree are rings that are defined to be created within that host.
        </para>
        
    </section>
    <section>
        <title>Creating, deleting and editing program definitions</title>
        <para>
            Programs are the active part of an experiment.  They include
            ring data sources, ring clients and programs that are not in the
            dataflow (for example GUI's that ask the state manager to make
            state transitions).
        </para>
        <para>
            Programs are manipulated via the Programs tab of the editor. An
            empty program editor is shown in the figure below:
            <figure>
                <title>Empty program table.</title>
                <mediaobject>
                   <imageobject>
                        <imagedata fileref='emptyprogramtable.jpg' format='JPEG' />
                    </imageobject>
                </mediaobject>
            </figure>
            The <literal>Host/program id</literal>
            column displays the host a set of programs
            runs in or, alternatively the program id (much linke the rings
            editor).  The  <literal>Path</literal> column displays the path to
            the program itself.  This can be a path to an executable or to a shell
            script.  The target of the path must be excutable, however.
            The <literal>Working Directory</literal> column describes the
            working directory the boot manager sets for the program before it is
            started.  The <literal>Program Arguments</literal> contain command
            line parameters for programs.
        </para>
        <itemizedlist>
            <listitem><para>
                To create a new program definition, right click anywhere in the
                programs table and select <literal>New...</literal> from the
                resulting pop up menu.  This brings up the dialog shown below:
                <figure>
                    <title>Program definition dialog.</title>
                    <mediaobject>
                       <imageobject>
                            <imagedata fileref='programdefdialog.jpg' format='JPEG' />
                        </imageobject>
                    </mediaobject>
                </figure>
                </para>
                <para>
                    Most of the dialog is self explanatory.  The Browse...
                    buttons allow you to use a file system browser to navigate
                    to the path or current working directory.  The
                    Program Args are defined by typing them into the entry
                    strip just below the <literal>Program Args:</literal>
                    box.  Hitting enter adds a new argument.
                    Double clicking an existing argument removes it from the
                    list.
                </para>
                <para>
                    Below is a program definition dialog after it was filled
                    in.
                    <figure>
                        <title>Filled in program definition</title>
                        <mediaobject>
                           <imageobject>
                                <imagedata fileref='filledinprogramdef.jpg' format='JPEG' />
                            </imageobject>
                        </mediaobject>
                    </figure>
                </para>
            </listitem>
            <listitem><para>
                To edit a program definition, right click anywhere in the program's
                and choose the <literal>Edit...</literal> menu entry.  This brings
                up the program definition dialog used by the <literal>New...</literal>
                entry however it is pre-stocked with the definition of the program
                you right clicked.  Clicking the <guibutton>Ok</guibutton> button
                will modify the existing definition rather than creating a new one.
                </para></listitem>
            <listitem><para>
                To delete a program definition, right click anywhere in the
                program's definition and choose the <literal>Delete...</literal>
                menu option>
                </para></listitem>
        </itemizedlist>
        <para>
            Below is a figure that shows an experiment definition that has
            some entries.
        </para>
        <figure>
            <title>Filled in program definition editor.</title>
            <mediaobject>
               <imageobject>
                    <imagedata fileref='filledinprogramlisting.jpg' format='JPEG' />
                </imageobject>
            </mediaobject>
        </figure>        
    </section>
</chapter>