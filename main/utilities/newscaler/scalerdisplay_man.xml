<!-- manpage 1daq -->

<refentry id='daq1_scalerdisplay11'>
    <refentryinfo>
            <author>
                <personname>
                    <firstname>Jeromy</firstname>
                    <surname>Tompkins</surname>
                </personname>
                <personblurb><para></para></personblurb>
            </author>
            <productname>NSCLDAQ</productname>
            <productnumber></productnumber>
        </refentryinfo>
    <refmeta>
        <refentrytitle id='daq1_scalerdisplay11_title'>Scaler Display program
	<anchor id="manpage.scalerdisplay" /></refentrytitle>
        <manvolnum>1daq</manvolnum>
	<refmiscinfo class='empty'></refmiscinfo>
    </refmeta>
    <refnamediv>
        <refname>ScalerDisplay</refname>
        <refpurpose>Display counts and rates in scalers.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <cmdsynopsis>
            <command>
$DAQBIN/ScalerDisplay <replaceable>definition-file</replaceable>
            </command>            
        </cmdsynopsis>
        <literallayout>
Configuration file commands:

        </literallayout>
        <cmdsynopsis>
            <command>
channel <replaceable>?option...? name channel?.sourceid?</replaceable>
            </command>
        </cmdsynopsis>        
        <cmdsynopsis>
            <command>
page <replaceable>tabname page-title</replaceable>
            </command>
        </cmdsynopsis>        
        <cmdsynopsis>
            <command>
display_single <replaceable>tabname scaler-name</replaceable>
            </command>
        </cmdsynopsis>        
        <cmdsynopsis>
            <command>
display_ratio <replaceable>tabname numerator-scaler denominator-scaler</replaceable>
            </command>
        </cmdsynopsis>        
        <cmdsynopsis>
            <command>
blank <replaceable>tabname</replaceable>
            </command>
        </cmdsynopsis>        
        <cmdsynopsis>
            <command>
stripparam <replaceable>name</replaceable>
            </command>
        </cmdsynopsis>        
        <cmdsynopsis>
            <command>
stripratio <replaceable>numerator denominator</replaceable>
            </command>
        </cmdsynopsis>        
        <cmdsynopsis>
            <command>
stripconfig <replaceable>option ?...?</replaceable>
            </command>
        </cmdsynopsis>        
        
    </refsynopsisdiv>
    <refsect1>
        <title>DESCRIPTION</title>
        <para>
            The scaler display program displays scaler counts and rates
            during active data taking runs.   The environment variable
            <literal>SCALER_RING</literal> (See <literal>ENVIRONMENT VARIABLSE</literal> below)
            specifies the rings from which data will be taken.  A configuration file
            determines what is displayed and how.  
        </para>
        <para>
            The configuration file is described in the section <literal>CONFIGURATION FILE</literal>
            below.  The path to the configuration file is the one command line parameter that is both
            required and accepted by the scaler display program.
        </para>
        <para>
            The command synopsis assumes you have sourced the <filename>daqsetup.bash</filename> file
            into your shell.
        </para>
    </refsect1>
    <refsect1>
        <title>CONFIGURATION FILE</title>
        <para>
            The configuration file is a Tcl script with a few command extensions.  The extensions
            provide the ability to associate a name with a scaler channel, and describe how and if that
            channel should be displayed.
        </para>
        <para>
            The display is organized into two sections.  A tabbed notebook at the top of the user interface
            provides several <firstterm>pages</firstterm>.  Each page is a table containing scaler names, rates, totals and,
            if appropriate, ratios of rates and totals for a pair of scalers.
            The lower section is an optional stripchart that shows the time evolution of counting rates
            in a scaler or the ratio of a pair of scaler rates.
        </para>
        <refsect2>
            <title>channel</title>
            <para>
                The <command>channel</command> command associates a name with a scaler channel from
                a data source.  The name is then used both to display the channel and to refer to
                it in other configuration file commands.  The form of this command is: 
            </para>
            <cmdsynopsis>
                <command>
channel <replaceable>?option...? name channel?.sourceid?</replaceable>                    
                </command>
            </cmdsynopsis>
            <variablelist>
                <varlistentry>
                    <term><replaceable>option...</replaceable></term>
                    <listitem>
                        <para>
                            Are options that control how the channel is treated.
                            Legal options are:
                        </para>
                        <variablelist>
                            <varlistentry>
                                <term><option>-incremental</option> <replaceable>bool</replaceable></term>
                                <listitem>
                                    <para>
                                        A boolean value which, if true, means that the
                                        scaler channel is incremental (cleared after each read).
                                        If false, the scaler counts are cumulative over the entire run.
                                    </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term><option>-width</option> <replaceable>nbits</replaceable></term>
                                <listitem>
                                    <para>
                                        The value is an integer that specifies the width of the scaler
                                        channel in bits.  All bits in positions higher than this value
                                        will be ignored.  This is primarily used with some CAMAC
                                        scalers read out through some interfaces that put additional
                                        bits in positions above bit <literal>23</literal>.
                                    </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term><option>-lowlim</option> <replaceable>rate</replaceable></term>
                                <listitem>
                                    <para>
                                        Specifies a low rate limit for the scaler.  If the count
                                        rate for this scaler drops below the specfied <replaceable>rate</replaceable>,
                                        the channel will show in a low rate alarmed status, if alarms are
                                        enabled via the checkbutton on the scaler display screen.
                                    </para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term><option>-hilim</option> <replaceable>rate</replaceable></term>
                                <listitem>
                                    <para>
                                        Specifies a high rate limit for this scaler.
                                    </para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>name</term>
                    <listitem>
                        <para>
                            Is the name that will be given to the channel.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>channel</term>
                    <listitem>
                        <para>
                            Is the index into the data source's scaler array in which
                            the counts for this scaler live.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>sourceid</term>
                    <listitem>
                        <para>
                            If supplied this specifies the source id from which the data
                            comes.  If not specified, the source id defaults no source id
                            which is what you get when the data has no body header.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
            
        </refsect2>
        <refsect2>
            <title>page</title>
            <para>
                The <command>page</command> command defines a new scaler display table page.
                It has the form:
            </para>
            <cmdsynopsis>
                <command>
page <replaceable>tabname page-title</replaceable>
                </command>
            </cmdsynopsis>        
            <variablelist>
                <varlistentry>
                    <term><replaceable>tabname</replaceable></term>
                    <listitem>
                        <para>
                            Is the text on the tab of the tabbed notebook in which the page is displayed.
                            This is also the name used to refer to this page in other
                            commands in the configuration file.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </refsect2>
        <refsect2>
            <title>display_single</title>
            <para>
                The <command>display_single</command> command appends a line to a page.
                The line displays the rates and total counts for a single scaler.
                The syntax of this command is:
            </para>
            <cmdsynopsis>
                <command>
display_single <replaceable>tabname scaler-name</replaceable>
                </command>
            </cmdsynopsis>        
            <variablelist>
                <varlistentry>
                    <term><replaceable>tabname</replaceable></term>
                    <listitem>
                        <para>
                            Is the name of the tab that has the page the line will be added to.  Lines
                            are added to the bottom of the page.  
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><replaceable>scaler-name</replaceable></term>
                    <listitem>
                        <para>
                            The name of the scaler channel (as defined by  a
                            <command>channel</command> command) that will be displayed
                            on that line.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
            
        </refsect2>
        <refsect2>
            <title>display_ratio</title>
            <para>
                The display ratio command adds a line to a page that displays two
                scalers.  In additon the ratio of the rates and totals are displayed.
                The line is added to the end of the page.
                The syntax of this command is:
            </para>
            <cmdsynopsis>
                <command>
display_ratio <replaceable>tabname numerator-scaler denominator-scaler</replaceable>
                </command>
            </cmdsynopsis>        
            <variablelist>
                <varlistentry>
                    <term><replaceable>tabname</replaceable></term>
                    <listitem>
                        <para>
                            Is the label on the tab that is displaying the page
                            to which this line will be added.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><replaceable>numerator-scaler</replaceable></term>
                    <listitem>
                        <para>
                            Is the name of the scaler that will be the numerator of the
                            ratios.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><replaceable>denominator-scaler</replaceable></term>
                    <listitem>
                        <para>
                            Is the name of the scaler that will be the denominator of the ratios.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </refsect2>
        <refsect2>
            <title>blank</title>
            <para>
                Appends a blank line to the specified tab.  The syntax of this command is:
            </para>
            <cmdsynopsis>
                <command>
        
blank <replaceable>tabname</replaceable>
                </command>
            </cmdsynopsis>        
            
        </refsect2>
        <refsect2>
            <title>stripparam</title>
            <para>
                If no other strip chart traces have been defined, this enables the strip chart.
                The command also enables the plot of a single trace of the rate of the
                specified parameter on the strip chart.  The syntax of this command is:
            </para>
            <cmdsynopsis>
                <command>
stripparam <replaceable>name</replaceable>
                </command>
            </cmdsynopsis>        

        </refsect2>
        <refsect2>
            <title>stripratio</title>
            <para>
                If no other strip chart traces have been defined, this enables the strip chart.
                The command enables the plot of a trace that is the ratio of the numerator scaler
                to the denominator scaler.   The scalers are specified by the name they were given in
                their <command>channel</command> commands.
                The form of this command is:
            </para>
            <cmdsynopsis>
                <command>
stripratio <replaceable>numerator denominator</replaceable>
                </command>
            </cmdsynopsis>        

        </refsect2>
        <refsect2>
            <title>stripconfig</title>
            <para>
                Sets configuration options for the strip chart.  Naturally this is only meaningful
                if at least one trace is defined via the <command>stripparam</command> or
                <command>stripratio</command> commands above.
            </para>
            <para>
                The syntax of this command is:
            </para>
            <cmdsynopsis>
                <command>
stripconfig <replaceable>option ?...?</replaceable>
                </command>
            </cmdsynopsis>
            <para>
                The available options are:
            </para>
            <variablelist>
                <varlistentry>
                    <term><option>-timeaxis</option> <replaceable>seconds</replaceable></term>
                    <listitem>
                        <para>
                            Number of seconds on the time axis.  Note that since the
                            plot is allowed to choose axis labels that are 'natural' you may
                            get slightly something a bit different, for example a value of
                            <literal>1198</literal> will almost certainly be modified to
                            <literal>1200</literal>.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </refsect2>
        
        
    </refsect1>
    <refsect1>
        <title>EXTENSION POINTS AND API</title>
        <para>
            There are a number of ways to extend the scaler display. 
        </para>
        <para>
            First the scaler configuration file is just a Tcl script with commands
            added to the interpreter to support defining channels, pages and their
            contents and strip chart channels.  Thus you could add additional
            functionality via that script.
        </para>
        <para>
            Second the scaler display program provides for callbacks to
            user code that is either part of the configuration file
            or incorporated by the configuration file. A minimal API
            also allows extensions of that sort to gain information
            needed for other processing.
        </para>
	<para>
	    Third, variable values can affect the operation and visual
	    display of the program.
	</para>
        <refsect2>
            <title>Callbacks</title>
            <para>
                There are three callback points defined by the scaler display program.
                If a user configuration file defines an appropriately named
                <command>proc</command> it will be called:
            </para>
            <variablelist>
                <varlistentry>
                    <term><command>UserBeginRun</command></term>
                    <listitem>
                        <para>
                            As the namei implies, this proc, if defined,
                            will be invoked when the scaler program processes
                            begin run ring items.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><command>UserEndRun</command></term>
                    <listitem>
                        <para>
                            Similarly this proc, if defined, is called when
                            the scaler program processes an end of run.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><command>UserUpdate</command></term>
                    <listitem>
                        <para>
                            Called, if defined, when a scaler ring item is
                            processed.
                        </para>
                    </listitem>
                </varlistentry>
                
            </variablelist>
        </refsect2>
        <refsect2>
            <title>API</title>
            <para>
                A very simple and minimal API provides access to data and objects
                that make up the scaler program.  These are all simple Tcl procs.  
            </para>
            <variablelist>
                <varlistentry>
                    <term><command>getStartTime</command></term>
                    <listitem>
                        <para>
                            Returns the start time <command>[clock seconds]</command>
                            at which the most recent run started.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><command>getElapsedTime</command></term>
                    <listitem>
                        <para>
                            Return the run elapsed time in seconds.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>getTitle</term>
                    <listitem>
                        <para>
                            Returns the title of the most recently started run.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>getRunNumber</term>
                    <listitem>
                        <para>
                            Returns the run number of the most recently started run.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>getState</term>
                    <listitem>
                        <para>
                            Returns the state of the run.  This is one of
                            <literal>Active</literal> or <literal>Inactive</literal>
                            depending on whether or not the run is in progress.
                            Note that paused runs will appear as <literal>Active</literal>
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><command>getScalerNames</command></term>
                    <listitem>
                        <para>
                            Returns a Tcl list that contains the name of all
                            scaler channels defined.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><command>getRate</command> <replaceable>name</replaceable></term>
                    <listitem>
                        <para>
                            Returns the counting rate of the channel
                            <replaceable>name</replaceable>
                            as of its most recent update.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <command>getTotal</command> <replaceable>name</replaceable>
                    </term>
                    <listitem>
                        <para>
                            Returns the total number of counts accumulated in the
                            scaler <replaceable>name</replaceable> as of its most
                            recent update.
                        </para>
                    </listitem>
                </varlistentry>
                
            </variablelist>
        </refsect2>
	<refsect2>
	    <title>VARIABLES</title>
	    <para>
		The following variables affect the visual display of the program:
	    </para>
	    <variablelist>
		<varlistentry>
		    <term><varname>::scalerconfig::normalColor</varname></term>
		    <listitem>
			<para>
			    Background color for channels that are not in the
			    alarmed state.  This can be expressed either as
			    a known named color or as an rgb intensity. The default
			    value is <literal>white</literal>.  Note that this and
			    all alarm color definitions must be defined prior to
			    the page definition in which they apply.
			</para>
		    </listitem>
		</varlistentry>
		<varlistentry>
		    <term><varname>::scalerconfig::lowAlarmColor</varname></term>
		    <listitem>
			<para>
			    Background color for channels that are alarming
			    due to a count rate below the <option>-lowlim</option>
			    value.  The default value is <literal>green</literal>.
			    Note that changing the background color of the
			    alarmed channel does not, at this time, affect the
			    tab color for pages containing the channel.
			</para>
		    </listitem>
		</varlistentry>
		<varlistentry>
		    <term><varname>::scalerconfig::highAlarmColor</varname></term>
		    <listitem>
			<para>
			    Background color for channels that are alarming
			    due to a count rate above the <option>hilimi</option>
			    value.  The default avale is <literal>red</literal>.
			    Note that changing the background color of the
			    alarmed channel does not, at this time, affect the
			    tab color for pages containing the channel.
			</para>
		    </listitem>
		</varlistentry>
	    </variablelist>
	</refsect2>
    </refsect1>
    <refsect1>
        <title>ENVIRONMENT VARIABLES</title>
        <para>
            <literal>SCALER_RING</literal> is a space separated list of the
            ring URIs from which the program will acquire data.
        </para>
    </refsect1>
</refentry>


<!-- /manpage -->

<!-- manpage 3tcl -->
<refentry id="tcl3_tclringbuffer">
  <refentryinfo>
    <author>
	    <personname>
		    <firstname>Ron</firstname>
		    <surname>Fox</surname>
	    </personname>
	    <personblurb><para></para></personblurb>
    </author>
    <productname>NSCLDAQ</productname>
    <productnumber></productnumber>
  </refentryinfo>
  <refmeta>
     <refentrytitle id='tcl3_tclringbuffer_title'>TclRingBuffer</refentrytitle>
     <manvolnum>3tcl</manvolnum>
     <refmiscinfo class='empty'></refmiscinfo>
  </refmeta>
  <refnamediv>
     <refname>TclRingBuffer</refname>
     <refpurpose>Tcl ring buffer consumer package</refpurpose>
  </refnamediv>
  
  <refsynopsisdiv>
    <cmdsynopsis>
    <command>
package require TclRingBuffer
   </command>
    </cmdsynopsis>
    <cmdsynopsis>
	<command>
ringbuffer attach <replaceable>ring-uri</replaceable>
	</command>
    </cmdsynopsis>
    <cmdsynopsis>
	<command>
set item [ringbuffer get <replaceable>ring-uri ?type-list?</replaceable>
	</command>
    </cmdsynopsis>
    <cmdsynopsis>
	<command>
ringbuffer detach <replaceable>ring-uri</replaceable>
	</command>
    </cmdsynopsis>
    
  </refsynopsisdiv>
  <refsect1>
     <title>DESCRIPTION</title>
     <para>
	Provides Tcl scripts with access to ring buffer data.
	NSCLDAQ ring buffers are identified by Uniform Resource
	Identifiers (URI).  These URIs are of the form:
	tcp://<replaceable>hostname/ringname</replaceable>.
     </para>
     <para>
	A program wishing to get data from  ring must first use
	the <command>ringbuffer attach</command> command to
	attach as a client to that ring.  Once attached the
	<command>ringbuffer get</command> command gets data
	fromt he ring, blocking as needed.  The optional
	<replaceable>type-list</replaceable> limits the types
	of ring items returned.  The type list is a list of integer
	item types.  See the header <filename>DataFormat.h</filename>
	for the ring data types.
     </para>
     <para>
	Once done with a ring, the script either exits, which automatically
	detaches all rings that have been attached, or explicitly uses
	the <command>detach</command> command to detach the ring. 
     </para>
     <para>
	The items returned by <command>ring get</command> are dicts that are
	descsribed in the <literal>RING ITEM DICT</literal> section below.
     </para>
  </refsect1>
  <refsect1>
     <title>
	RING ITEM DICT
     </title>
     <para>
	Ring items returned by the <command>ringitem get</command> command are
	decoded into dicts.  All dicts contain a <literal>type</literal> key
	whose value is a textually encoded ring item type.  Further more, if a ring item
	has a body header it has an additional key <literal>bodyheader</literal>
	whos value is a dict that contains three key value pairs:
	<literal>timestamp</literal> is the timestamp from the body header,
	<literal>source</literal>  is an integer that identifies the data source
	and <literal>barrier</literal> is the barrier flag, nonzero if the
	item was an event builder barrier synchronization item and zero if not.
     </para>
     <para>
	The remaining keys depend on the type of ring item>
     </para>
     <refsect2>
	<title>Run state change types</title>
	<para>
	    These are types <literal>Begin</literal>, <literal>Pause</literal>,
	    <literal>Resume</literal>, and <literal>End</literal>.  The
	    additional dict key/value pairs these item type have are:
	</para>
	<variablelist>
	    <varlistentry>
		<term><literal>run</literal></term>
		<listitem>
		    <para>
			The number of the run affected.
		    </para>
		</listitem>
	    </varlistentry>
	    <varlistentry>
		<term>timeoffset</term>
		<listitem>
		    <para>
			The number of seconds into the run at which this
			item was emitted.
		    </para>
		</listitem>
	    </varlistentry>
	    <varlistentry>
		<term>title</term>
		<listitem>
		    <para>
			The title of the run.
		    </para>
		</listitem>
	    </varlistentry>
	    <varlistentry>
		<term><literal>realtime</literal></term>
		<listitem>
		    <para>
			A unix timestamp that can, for example be passed to
			<command>clock format</command> to get date and time
			at which this item was emitted.
		    </para>
		</listitem>
	    </varlistentry>
	</variablelist>
     </refsect2>
     <refsect2>
	<title>Scaler items</title>
	<para>
	    These items are of type <literal>Scaler</literal>.
	    The additional key value pairs specific to this ring item are:
	</para>
	<variablelist>
	    <varlistentry>
		<term><literal>start</literal></term>
		<listitem>
		    <para>
			Number of seconds into the run at which the counting
			interval for this scaler item started. See
			<literal>divisor</literal> below, however.
		    </para>
		</listitem>
	    </varlistentry>
	    <varlistentry>
		<term><literal>end</literal></term>
		<listitem>
		    <para>
			Number of seconds into the run at which the counting
			interval ended. See
			<literal>divisor</literal> below, however.
		    </para>
		</listitem>
	    </varlistentry>
	    <varlistentry>
		<term><literal>realtime</literal></term>
		<listitem>
		    <para>
			A unix timestamp that indicates the absolute time
			at which this item was emitted.  This can be
			passed to <command>clock format</command> to get a
			date/time string.
		    </para>
		</listitem>
	    </varlistentry>
	    <varlistentry>
		<term><literal>divisor</literal></term>
		<listitem>
		    <para>
			Applications can do fractional second timing.
			If so, this value is the what to divide the
			start and end offsets by to actually get seconds.
		    </para>
		</listitem>
	    </varlistentry>
	    <varlistentry>
		<term><literal>incremental</literal></term>
		<listitem>
		    <para>
			Boolean flag that is true if the scalers are incremental
			(cleared when latched/read) or false if not.
		    </para>
		</listitem>
	    </varlistentry>
	    <varlistentry>
		<term><literal>scalers</literal></term>
		<listitem>
		    <para>
			A list of the scaler values.
		    </para>
		</listitem>
	    </varlistentry>
	</variablelist>
     </refsect2>
     <refsect2>
	<title>String items</title>
	<para>
	    These are types <literal>Packet Types</literal> and
	    <literal>Monitored Variables</literal>.  The have the
	    additional key value pairs:
	</para>
	<variablelist>
	    <varlistentry>
		<term><literal>timeoffset</literal></term>
		<listitem>
		    <para>
			Number of seconds into the run the item was emitted.
			See, however <literal>divisor</literal> below.
		    </para>
		</listitem>
	    </varlistentry>
	    <varlistentry>
		<term><literal>divisor</literal></term>
		<listitem>
		    <para>
			If the producer is using fractional timing, this is
			the value to divide the time offset by to get seconds
			again.
		    </para>
		</listitem>
	    </varlistentry>
	    <varlistentry>
		<term><literal>realtime</literal></term>
		<listitem>
		    <para>
			A unix time stamp value specifying when the
			item was emitted.  This can be passed to
			<command>clock format</command> to get a date/time
			string.
		    </para>
		</listitem>
	    </varlistentry>
	    <varlistentry>
		<term><literal>strings</literal></term>
		<listitem>
		    <para>
			A valid Tcl list of the strings in the item.  The
			meanings of these strings depends on the actual item type.
		    </para>
		</listitem>
	    </varlistentry>
	</variablelist>
     </refsect2>
     <refsect2>
	<title>Ring format description items</title>
	<para>
	    This item type;
	    <literal>Ring Item format version</literal>, describes the
	    format of the data.  It should be the first item emitted in
	    a run.  It contains the following key/value pairs
	</para>
	<variablelist>
	    <varlistentry>
		<term><literal>major</literal></term>
		<listitem>
		    <para>
			The major version of the format.
		    </para>
		</listitem>
	    </varlistentry>
	    <varlistentry>
		<term><literal>minor</literal></term>
		<listitem>
		    <para>
			The minor version of the format.
		    </para>
		</listitem>
	    </varlistentry>
	</variablelist>
     </refsect2>
     <refsect2>
	<title>Physics events</title>
	<para>
	    This dict contains data acquired in response to accepted physics
	    triggers.  It contains the following items:
	</para>
	<variablelist>
	    <varlistentry>
		<term><literal>size</literal></term>
		<listitem>
		    <para>
			Number of bytes of data in the event body.
		    </para>
		</listitem>
	    </varlistentry>
	    <varlistentry>
		<term><literal>body</literal></term>
		<listitem>
		    <para>
			The body of the physics event as a byte array.  Byte
			arrays can be decoded using the Tcl
			<command>binary scan</command> command.  Byte arrays
			are used because, unlike other item types, we have no
			clues to the semantics of the body contents.
		    </para>
		</listitem>
	    </varlistentry>
	</variablelist>
     </refsect2>
     <refsect2>
	<title>Event fragment</title>
	<para>
	    These represent event fragments.  They can occur if you monitor a
	    ring that is the direct output of the event orderer.  Using the
	    ReadoutGUI this is done by requesting a 'tee ring' and looking at it.
	</para>
	<para>
	    Event fragment dicts have the following key/value pairs:
	</para>
	<variablelist>
	    <varlistentry>
		<term><literal>timestamp</literal></term>
		<listitem>
		    <para>
			The timestamp associated with the fragment.  Note that
			event fragments don't ever have body headers.
		    </para>
		</listitem>
	    </varlistentry>
	    <varlistentry>
		<term><literal>source</literal></term>
		<listitem>
		    <para>
			Id of the source of this event.
		    </para>
		</listitem>
	    </varlistentry>
	    <varlistentry>
		<term><literal>barrier</literal></term>
		<listitem>
		    <para>
			Barrier type of the fragment.  Nonzero values indicate
			the fragment cause a barrier synchronization of the
			event orderer's output while zero means the fragment is
			did not.
		    </para>
		</listitem>
	    </varlistentry>
	    <varlistentry>
		<term><literal>size</literal></term>
		<listitem>
		    <para>
			Number of bytes in the body of the fragment.
		    </para>
		</listitem>
	    </varlistentry>
	    <varlistentry>
		<term><literal>body</literal></term>
		<listitem>
		    <para>
			A byte array contaning the fragment body (payload).
			This byte arrays can be decoded using the
			Tcl <command>binary scan</command> command.
		    </para>
		</listitem>
	    </varlistentry>
	</variablelist>
     </refsect2>
     <refsect2>
	<title>Trigger count items</title>
	<para>
	    Of type <literal>Trigger count</literal>, these items provide
	    gross statistics for the triggers seen by a data source.  These are
	    normally used by SpecTcl to determine the fraction of data analyzed
	    online.  
	</para>
	<para>
	    The following key/value pairs are used by this type:
	</para>
	<variablelist>
	    <varlistentry>
		<term><literal>timeoffset</literal></term>
		<listitem>
		    <para>
			Offset into the run at which this item was emitted.
		    </para>
		</listitem>
	    </varlistentry>
	    <varlistentry>
		<term><literal>divisor</literal></term>
		<listitem>
		    <para>
			Dividing <literal>timeoffset</literal> by this value
			yields the number of seconds into the run at which
			this item was emitted.
		    </para>
		</listitem>
	    </varlistentry>
	    <varlistentry>
		<term><literal>realtime</literal></term>
		<listitem>
		    <para>
			The unix time of day value at which this item was emitted.
			This can be passed to <command>clock format</command> to
			get a time/day string.
		    </para>
		</listitem>
	    </varlistentry>
	    <varlistentry>
		<term><literal>triggers</literal></term>
		<listitem>
		    <para>
			Number of triggers this source responded to this run
			(live trigers).
		    </para>
		</listitem>
	    </varlistentry>
	    
	</variablelist>
     </refsect2>
     <refsect2>
	<title>Glom parameters</title>
	<para>
	    When the event builder pipeline is in use, the glom stage of the
	    pipeline has a set of parameters it uses to determine how, or if
	    to glue event fragments together to make an event.  These parameters
	    are documented in a ring item it emits at the start of each run.
	</para>
	<para>
	    The glom parameter item has the type <literal>Glom Parameters</literal>.
	    It never has a body header and has the following key/value pairs:
	</para>
	<variablelist>
	    <varlistentry>
		<term><literal>isBuilding</literal></term>
		<listitem>
		    <para>
			Boolean value that is true if glom was told to build
			events and false if ont.
		    </para>
		</listitem>
	    </varlistentry>
	    <varlistentry>
		<term><literal>conicidenceWindow</literal></term>
		<listitem>
		    <para>
			This only has meaning if <literal>isBuilding</literal>
			is true.  In that case it is the width of the window
			in ticks that defines a coincidence.
		    </para>
		</listitem>
	    </varlistentry>
	    <varlistentry>
		<term><literal>timstampPolicy</literal></term>
		<listitem>
		    <para>
			Only meaningful if <literal>isBuilding</literal> is
			true, this value describes how timestamps are
			assigned to built events.  If this value is
			<literal>first</literal>, the event timestamp is taken
			from the earliest fragment.  If <literal>last</literal>,
			the timestamp is taken from the last fragment.  Finally,
			if <literal>average</literal>, indicates the timestamp is
			the average of all fragments in the event.
		    </para>
		</listitem>
	    </varlistentry>
	</variablelist>
     </refsect2>
     <refsect2>
	<title>Abnormal end items</title>
	<para>
	    These can be emitted by various NSCLDAQ components to indicate the
	    run did not end properly.  The type, <literal>Abnormal End</literal>,
	    is the only key value pair this dictionary has.
	</para>
     </refsect2>
  </refsect1>

</refentry>

 <!-- /manpage -->