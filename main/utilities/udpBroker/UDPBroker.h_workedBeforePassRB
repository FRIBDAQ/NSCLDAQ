#ifndef UDPBROKER_H
#define UDPBROKER_H

// #include <CUDPClient.h>
// #include <CDataSinkFactory.h>
#include <CDataSink.h>
// #include <DataFormat.h>
#include <CRingItem.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <iostream>
#include <string>
#include <memory>

class UDPBroker {
public:
    // UDPBroker(int port, std::string sinkType, int sid = -1);
    UDPBroker();
    ~UDPBroker ();

    void initialize(int port, std::string sinkType, int sid = -1);
    void run();
    void begin();
    void end();
    void stop();
    void pause();
    void resume();
    // void setChannelsMap(std::string mapFile);
    void setChannelsMap();


private:
    void mainLoop();

    // std::unique_ptr<CRingItem> makeRingItem(in_addr_t from, short port, int sid, void* datagram, size_t nBytes);
    void makeRingItems(in_addr_t from, short port, CDataSink& sink, int sid, uint8_t* buffer, size_t nBytes);
    void extractHitTimeStamp(uint8_t sourceId, uint8_t* data);
    void mapping(uint8_t* data, int fecId);
    void testReadData(uint8_t* data);
    uint16_t invertByteOrder(uint16_t data);
    // void usage(const char* msg);

    int m_socket;
    bool m_stopMainLoop;
    bool m_pauseMainLoop;
    int m_port;
    std::string m_sinkType;
    int m_sid;
    // std::unique_ptr<UDP::CUDPClient> m_client;
    std::unique_ptr<CDataSink> m_dataSink;

    //Specific to SRS, should move that in a specfic SRS header file
    static const int MaxFECs{16};
    static const int MaxVMMs{16};
    static const int MaxChns{64};
    // int channelsMap[16][16][64];//[fec][vmm][ch]

    struct VMM3Marker
    {
      uint64_t fecTimeStamp{0};  /// 42 bit
      uint64_t calcTimeStamp{0}; /// 42 bit
      uint16_t lastTriggerOffset{0};
      bool hasDataMarker{false};
    } *markerSRS;

    struct newData
    {
        uint64_t hitTimeStamp{0};
        uint16_t chnoMapped{0};
    } tsAndMappedChno;

    // VMM3Marker *markerSRS;
    static const int SRSHeaderSize{16};
    static const int HitAndMarkerSize{6};
    static const int Data1Size{4};
    static const int Data2Size{2};
    
};

#endif