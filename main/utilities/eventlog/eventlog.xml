<!-- chapter utilities -->
<chapter id="chap.eventlog">
    <title>The Event log program</title>
    <para>
        Most experiments will record event data.  Event data files are
        record the data taken from the experiment event by event.
        The format of event data files is identical to the format of data in
        ring buffers.
        See the chapter:
        <link linkend="chapter.ringformat">Format of EventData In Ring Buffers</link>
        for a description of what to expect in an event file.   The
        <filename>$DAQROOT/include/DataFormat.h</filename> header is
        also helpful as it provides C/C++ structure definitions for
        data in ring buffers and event files.
    </para>
    <para>
        The event logger takes data from any ring (local or remote via the
        networked proxy ring subsystem).  When a begin run item is seen,
        a new event file is started.  Event files are broken into segments.
        This is done to ensure that files do not exceed maximum sizes set
        by some filesystems and NFS.  By default, the segment size is a bit
        less than 2Gbytes. When replaying data it is important to keep this in 
        mind, and replay all segments of a run.
    </para>
    <para>
        The Event logger places output files in a specified directory.
        By default, this directory is the working directory at the time the
        application was started.  The default ring from which the program
        accepts data is <literal>tcp://localhost/</literal><replaceable>username</replaceable>
        where <replaceable>username</replaceable> is the name of the user running
        the program.
    </para>
    <para>
        The event log program includes a <option>--oneshot</option> option that
        records a single run and then exits.  The <option>--oneshot</option>
        option also creates synchronization files in the event file directory that
        allow a controlling program to know when the event logger is
        running and when it is about to exit.
    </para>
    <para>
        The control files are:
        <variablelist>
            <varlistentry>
                <term><filename>.started</filename></term>
                <listitem>
                    <para>
                        Created when the program is ready to record data.
                        The controlling program can then start a run.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><filename>.exited</filename></term>
                <listitem>
                    <para>
                        Created when the program has closed the event file and
                        is about to exit.  The controlling program can move
                        any event files to a final directory if desired.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </para>
    <example>
        <title>Taking data from a remote ring</title>
        <programlisting>
eventlog --source=tcp://spdaq22/fox --path=/user/0400x/stagearea/current --oneshot
        </programlisting>
    </example>
    <para>
        The full reference documentation for the program is in the
        <link linkend="manpage.eventlog">event log reference page</link>.
    </para>
</chapter>
    
<!-- /chapter -->

<!-- manpage 1daq -->

<refentry id="manpage.eventlog">
  <refentryinfo>
            <author>
                <personname>
                    <firstname>Ron</firstname>
                    <surname>Fox</surname>
                </personname>
                <personblurb><para></para></personblurb>
            </author>
            <productname>NSCLDAQ</productname>
            <productnumber></productnumber>
        </refentryinfo>  
  <refmeta>
     <refentrytitle id='manpage.eventlog_title'>eventlog</refentrytitle>
     <manvolnum>1daq</manvolnum>
     <refmiscinfo class='empty'></refmiscinfo>
  </refmeta>
  <refnamediv>
     <refname>eventlog</refname>
     <refpurpose>Record Event Data to Disk.</refpurpose>
  </refnamediv>
  
  <refsynopsisdiv>
    <cmdsynopsis>
	<command>
eventlog <optional>options...</optional>
	</command>
    </cmdsynopsis>
  </refsynopsisdiv>
  <refsect1>
     <title>DESCRIPTION</title>
     <para>
	Records event data verbatim from ring buffers to disk files.
        The program monitors the source ring buffer for a begin run item.
        At that point it opens an event file for that run and begins to record
        data from the ring.  
     </para>
     <para>
        Runs are recorded in files in the target directory.
        Event files are named
        <filename>run-runnumber-segment.evt</filename> where
        <literal>runnumber</literal> is the run number of the run
        taken from the begin run item, <literal>segment</literal> is a file
        segment numbered from zero.
     </para>
     <para>
        Runs are segmented in file that are no larger than a segment size.
        This is done to avoid creating files that are too large for a file system
        to handle or too large for NFS to accurately serve.
     </para>
     <para>
        An option allows the program to be started by a controlling program
        for a single run (e.g. by the readout GUI).
     </para>
     <para>
        Options have sensible defaults.  See OPTIONS below.
     </para>
  </refsect1>
  <refsect1>
     <title>
	OPTIONS
     </title>
     <variablelist>
       <varlistentry>
	 <term><option>--checksum</option></term>
	 <listitem>
	   <para>
	     If present, an SHA512 checksum is computed over the data in each run
	     and output to a file named <filename>run-nnnn.sha512</filename> in the
	     same directory as the event file.  The checksum should match the value
	     that would be produced by the command:
	     <command>sha512sum run-nnnn*.evt</command>
	   </para>
	 </listitem>
       </varlistentry>
        <varlistentry>
            <term><option>--number-of-sources</option>=<replaceable>n</replaceable></term>
            <listitem>
                <para>
                    Indicates to the logger the number of end of run items it should
                    expect to see prior to closing the run.  Once the first end of
                    run is seen, if there is ever a long time without getting any
                    data from the ring source, the logger will complain about a
                    timeout and close the run anyway.
                </para>
                <para>
                    Once <parameter>n</parameter> end of run items are seen in a
                    single run, the run file is closed.  As you might expect,
                    <parameter>n</parameter> must be an integer with a value
                    that is greater than zero.
                </para>
            </listitem>
        </varlistentry>
	<varlistentry>
	    <term><option>--source</option>=<replaceable>ringuri</replaceable></term>
	    <listitem>
		<para>
                    Defines the event source as a Ring buffer Uniform Resource
                    Identifier (URI).  The URI can be for a local or a remote
                    ring buffer.  By default the ring:
                    <literal>tcp://localhost/</literal><replaceable>username</replaceable>
                    where <replaceable>username</replaceable> is the username
                    of the account running the program.
		</para>
	    </listitem>
	</varlistentry>
        <varlistentry>
            <term><option>--path</option>=<replaceable>dir</replaceable></term>
            <listitem>
                <para>
                    Provides the path to the directory in which the program will
                    write its event files. By default, this is
                    current working directory at the time <application>eventlog</application>
                    is started.
                </para>
                <para>
                    <application>eventlog</application> ensures that the path is
                    a directory and is writable.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><option>--segmentsize</option>=<replaceable>size-spec</replaceable></term>
            <listitem>
                <para>
                    Specifies the size of the files segments created.
                    <parameter>size-spec</parameter> can be any of an integer number
                    of bytes or an integer followed by one of the suffixes:
                    <literal>g</literal>, <literal>m</literal>, <literal>k</literal>
                    that multiply the integer by a gigabyte, a megabyte and a kilobyte
                    repsectively.
                </para>
                <para>
                    The default value is a <literal>1900m</literal>, which should
                    be suitable for most operating environments.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><option>--oneshot</option></term>
            <listitem>
                <para>
                    When present, the program only records a single run, then
                    exits.  The program will also create the
                    <filename>.started</filename> file in the target directory
                    when it's ready to record data, and the
                    <filename>.exited</filename> file when it's about to exit.
                </para>
            </listitem>
        </varlistentry>
	<varlistentry>
	  <term><option>--run</option> <replaceable>number</replaceable></term>
	  <listitem>
	    <para>
	      When present, the <parameter>number</parameter> unconditionally sets
	      the run number for the run.  This requires the <option>--oneshot</option>
	      switch to be present and eventlog will exit with an error if that is not
	      the case.  This switch is intended to be used with a set of event sources
	      that either don't have the concept of a run number or, alternatively,
	      cannot synchronize their run numbers.  The NSCLDAQ-11 readoutGui will
	      use this switch to force the run number of event files created to match the
	      run number in  the ReadoutGUI run number entry.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><option>--combine-runs</option></term>
	  <listitem>
	    <para>
	      When present, the normal checks in <option>--one-shot</option> mode
	      that would make the event logger exit if run numbers are observed to change
	      or if there are too many begin runs, are not made.
	    </para>
	  </listitem>
	</varlistentry>
        <varlistentry>
            <term><option>--prefix</option>=<replaceable>string</replaceable></term>
            <listitem>
                <para>
                    The <replaceable>string</replaceable> will precede the generated
                    filename.   For example if <option>--prefix</option> is
                    <literal>vmusbreadout-</literal>, the first segment of run 6
                    will be named <filename>vmusbreadout-run-0006-00.evt</filename>
                    rather than <filename>run-0006-00.evt</filename>.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><option>--freewarn</option>=<replaceable>freepct</replaceable></term>
            <listitem>
                <para>
                    Specifies the integer percentage of device capacity below which the
                    event logger will emit a warning log message.   If not
                    specified, this defaults to <literal>10</literal>.  Once
                    the amount of free space on the device drops, while event
                    recording is in progress, the eventlog program emits a
                    log message with severity <literal>WARNING</literal> indicating
                    that fact and how mucb space remains.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><option>--freesevere</option>=<replaceable>freepct</replaceable></term>
            <listitem>
                <para>
                    Like <option>-freewarn</option> but specifies the threshold
                    for a severe warning to be emitted.  This defaults to
                    <literal>1</literal> percent.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><option>--appname</option>=<replaceable>name</replaceable></term>
            <listitem>
                <para>
                    Log messages are identified by an application name and host of
                    origin.  If you are running more than one event logger in
                    a single host, you can use this to distinguish between their
                    log messages.  If not supplied, the default is
                    <literal>eventlog</literal>.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><option>--service</option>=<replaceable>servicename</replaceable></term>
            <listitem>
                <para>
                    The name of the service to which event log connects in order to
                    log messages.  This defaults to
                    <literal>StatusAggregator</literal> which is normally correct.
                    You should only need to specify this under extraordinary
                    conditions.
                </para>
            </listitem>
        </varlistentry>
     </variablelist>
  </refsect1>


</refentry>


<!-- /manpage -->