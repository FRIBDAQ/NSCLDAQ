#!/bin/sh
# -*- tcl -*-
# The next line is executed by /bin/sh, but not tcl \
exec tclsh "$0" ${1+"$@"}

#    This software is Copyright by the Board of Trustees of Michigan
#    State University (c) Copyright 2014.
#
#    You may use this software under the terms of the GNU public license
#    (GPL).  The terms of this license are described at:
#
#     http://www.gnu.org/licenses/gpl.txt
#
#    Authors:
#             Ron Fox
#             Giordano Cerriza
#	     NSCL
#	     Michigan State University
#	     East Lansing, MI 48824-1321


##
# @file   program.test
# @brief  Test the configuration API for programs.
# @author Ron Fox <fox@nscl.msu.edu>
#
package require tcltest
package require containers
package require programs
package require sqlite3

set dbfile test-config.db
set TestContainerImage [file normalize [file join ~ minimal.img]]
set echo               [file join /bin echo];     # Test prograsm.

proc commonSetup { } {
    tcltest::makeFile [list] $::dbfile
    exec [file join $::env(DAQBIN) mg_mkconfig] $::dbfile
    sqlite3 db $::dbfile -create 0
}
proc commonCleanup {} {
    db close
    tcltest::removeFile $::dbfile

}

#------------------------------------------------------------------------
# program::add tests

tcltest::test add_1 {Add a base program makes the proper entries.} \
-setup {
    commonSetup
    program::add db test $echo Transitory localhost [dict create]
} \
-cleanup {
    commonCleanup
} \
-body {
    db eval {SELECT id, name, path, type_id, host, directory,
                    container_id, initscript, service
            FROM program
            WHERE name = 'test'}
} \
-result [list 1 test $echo 1 localhost "" "" "" ""]

tcltest::test add_2 {Test with options in root table.} \
-setup {
    commonSetup
    program::add db test $echo Transitory localhost [dict create \
        service TEST_SERVICE initscript [file normalize ~/singexists.sh] \
        directory /temp   \
    ]
} \
-cleanup {
    commonCleanup
} \
-body {
    set result [db eval {SELECT id, name, path, type_id, host, directory,
                    container_id, initscript, service
            FROM program
            WHERE name = 'test'}]
    # Need to massage the  init script to make it a match result.
    
    set fd [open ~/singexists.sh r]
    set contents [read $fd]
    set dbresult [lindex $result 7]
    set match [expr {$contents eq $dbresult}]
    lreplace $result 7 7 $match
    
    
} -result [list 1 test $echo 1 localhost /temp "" 1 TEST_SERVICE]

tcltest::test add_3 {Test with a container specified.} \
-setup {
    commonSetup
    container::add db test1 [file normalize ~/minimal.img] "" ""
    container::add db test2 \
        [file normalize ~/minimal.img] [file normalize ~/singexists.sh] ""
    program::add db test $echo Transitory localhost [dict create container test2]
} \
-cleanup {
    commonCleanup
} \
-body {
    db eval {SELECT container_id FROM program WHERE name = 'test'}
} -result 2

tcltest::test add_4 {Invalid container is an error.} \
-setup {
    commonSetup
    
} \
-cleanup {
    commonCleanup
} \
-body {
    program::add db test $echo Transitory localhost [dict create container test2]
} -result * -match glob -returnCodes error


tcltest::test add_5 {program with options} \
-setup {
    commonSetup
    program::add db test $echo Transitory localhost \
        [dict create options  [list {--ring junk} {--sourceid 6} ]]
} \
-cleanup {
    commonCleanup
} \
-body {
    set id [db eval {SELECT id FROM program WHERE name='test'}]
    db eval {SELECT option, value FROM program_option WHERE program_id=$id}
} -result [list --ring junk --sourceid 6]

tcltest::test add_6 {program with parameters} \
-setup {
    commonSetup
    program::add db test $echo Transitory localhost \
        [dict create parameters [list a b c]]
} \
-cleanup {
    commonCleanup
} \
-body {
    set id [db eval {SELECT id FROM program WHERE name='test'}]
    db eval {SELECT parameter FROM program_parameter WHERE program_id=$id}
} -result [list a b c]

tcltest::test add_7 {program with environment variables} \
-setup {
    commonSetup
    program::add db test $echo Transitory localhost \
        [dict create environment [list {DAQROOT /usr/opt/daq/12.0pre3} \
         {IMAGE /ron/fox/minimal.img} {TEDDY Bear}]]
} \
-cleanup {
    commonCleanup
} \
-body {
    set id [db eval {SELECT id FROM program WHERE name='test'}]
    db eval {SELECT name, value FROM program_environment WHERE program_id = $id}
} -result [list DAQROOT /usr/opt/daq/12.0pre3 IMAGE /ron/fox/minimal.img \
        TEDDY Bear ]

tcltest::test add_8 {Duplicate add is illegal} \
-setup {
    commonSetup
    program::add db test $echo Transitory localhost \
        [dict create environment [list {DAQROOT /usr/opt/daq/12.0pre3} \
         {IMAGE /ron/fox/minimal.img} {TEDDY Bear}]]
} \
-cleanup {
    commonCleanup
} \
-body {
    program::add db test $echo Transitory localhost [dict create]
} -result * -match glob -returnCodes error

#-----------------------------------------------------------------------------
# program::exists tests.

tcltest::test exists_1 {Program does not exist.} \
-setup {
    commonSetup
} \
-cleanup {
    commonCleanup
} \
-body {
    program::exists db test
} -result 0

tcltest::test exists_2 {Program does exist} \
-setup {
    commonSetup
    program::add db test $echo Transitory localhost [dict create]
} \
-cleanup {
    commonCleanup
} \
-body {
    program::exists db test

} -result 1
#----------------------------------------------------

proc tcltest::cleanupTestHook {} {
    variable numTests
    set ::exitCode [expr {$numTests(Failed) > 0}]
}


tcltest::cleanupTestHook
tcltest::cleanupTests
exit $::exitCode