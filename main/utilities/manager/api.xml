<!-- chapter libraries -->

<chapter>
   <title>DAQ Manager APIs</title>
   <para>
    The DAQ Manager has extensive APIs for database, server REST access.
    Also provided are a set of user interface libraries that provide canned views
    which can either be coupled with standard model/controller APIs to build
    user interfaces, or coupled with application specific model/controller
    code to produce custom written GUIs.
   </para>
   <para>
    At present these APIs only supply Tcl bindings.  As time goes on, it is
    likely that additional bindings will be written and documented here
    and in the reference pages.
   </para>
   <para>
    The organization of this chapter is as follows:
   </para>
   <itemizedlist>
    <listitem>
       <para>
           <link linkend='sec.manager.dbapi' endterm='sec.manager.dbapi.title' />
           documents the components of the DAQ manager configuration database API.
           This API not only supports database manipulation but includes
           code used by the manager.  
       </para>
    </listitem>
    <listitem>
       <para>
          <link linkend='sec.manager.clientapi' endterm='sec.manager.clientapi.title' />
          documents the components of the manager REST client API.  This API
          allows you to create custom code to interact witht he manager.
       </para>
    </listitem>
    <listitem>
       <para>
          <link linkend='sec.manager.guiapi' endterm='sec.manager.guiapi.title' /> 
       </para>
    </listitem>
   </itemizedlist>
   <para>
      Each of these sections will list and describe the packages provided
      in each category and provide copious references to man pages that
      provide detailed descriptions of their public interfaces.
   </para>
   <section id='sec.manager.dbapi'>
      <title id='sec.manager.dbapi.title'>Manager Configuration Database API</title>
      <para>
        This section will provide documenation for Tcl packages that provide direct
        access to the experiment configuration database used by the manager.
        In actual fact, these packages also contain the manager server, minus
        its REST interface packages.
      </para>
      <para>
        The  Tcl packages described in this section are available in the
        NSCLDAQ Tcl library tree. This is defined by the $DAQTCLLIBS environment
        variable when you source in <filename>daqsetup.bash</filename> from
        NSCLDAQ 12.0 and later.  You can add this directory to your path
        by either adding it to the TCLLIBPATH environment variable when running
        tclsh or explicitly including it in <varname>auto_path</varname>
        prior to sourcing your packages.  The next pair of examples illustrate
        both options.
      </para>
      <example>
        <title>Setting the TCLLIBPATH environment variable for tclsh</title>
        <programlisting>
# On the Tcl command line:

TCLLIBPATH="$TCLLIBPATH $DAQTCLLIBS" tclsh

# Or via a persistent environment variable:

TCLLIBPATH="$TCLLIBPATH $DAQTCLLIBS"
export TCLLIBPATH
tclsh
        </programlisting>
      </example>
      <para>
        Note that the method showne appends the $DAQTCLLIBS environment variable
        value to any existing directorys in the TCLLIBPATH.  This environment
        variable is a space separated list of directories (valid Tcl list)  that
        are top levels of directories searched for packages.
      </para>
      <example>
        <title>Adding DAQTCLLIBS to auto_path</title>
        <programlisting>
lappend ::auto_path $::env(DAQTCLLIBS)
        </programlisting>
      </example>
      <para>
        This code snippet takes advantage of the fact that environment
        variables in Tcl are stored in a global array named <varname>env</varname>
        whose indices are variable names and values the values.  Using ::
        in front of these variable names forces them to be evaluated in the
        global scope allowing this code snippet to work even in the body of a
        <command>proc</command>.
      </para>
      <para>
        The database API packages are described in subsections listed below:
      </para>
      <itemizedlist>
        <listitem>
           <para>
              The <link linkend='sec.manager.containers' endterm='sec.manager.containers.title' />
              section describes a package that allows the manipulation of
              container definitions as well as the ability to start a
              persistent container
              as defined by the database in an arbitrary node that can access
              the container image and user's home directory tree.
           </para>
        </listitem>
        <listitem>
           <para>
               The <link linkend='sec.manager.programs' endterm='sec.manager.programs.title' />
               section describes a package that suports the definition of programs
               in the database and can manipulate them as well.
           </para>
        </listitem>
        <listitem>
           <para>
              The <link linkend='sec.manager.sequence' endterm='sec.manager.sequence.title' />
              section describes a package that supports manipulation of the
              state machine and sequences attached to state transitions.
           </para>
        </listitem>
        <listitem>
           <para>
              The <link linkend='sec.manager.kvstore' endterm='sec.manager.kvstore.title' />
              section describes a package that can manipulate the key value store.
           </para>
        </listitem>
        <listitem>
           <para>
              The <link linkend='sec.manager.auth' endterm='sec.manager.auth.title' />
              section describes support for an authorization database.
           </para>
        </listitem>
        <listitem>
           <para>
              The <link linkend='sec.manager.eventloggers'
              endterm='sec.manager.eventloggers.title' />
              section describes a package that supports the definition of
              event loggers.
           </para>
        </listitem>
      </itemizedlist>
      
      <section id='sec.manager.containers'>
         <title id='sec.manager.containers.title'>
            The <literal>containers</literal> package.
         </title>
         <para>
         </para>
      </section>
      <section id='sec.manager.programs'>
         <title id='sec.manager.programs.title'>
            The <literal>programs</literal> package
         </title>
         <para>
         </para>
      </section>
      <section id='sec.manager.sequence'>
         <title id='sec.manager.sequence.title'>
            The <command>sequence</command> package
         </title>
         <para>
         </para>
      </section>
      <section id='sec.manager.kvstore'>
         <title id='sec.manager.kvstore.title'>
            The <literal>kvstore</literal> package
         </title>
         <para>
         </para>
      </section>
      <section id='sec.manager.auth'>
         <title id='sec.manager.auth.title'>
            The <literal>auth</literal> package.
         </title>
         <para>
         </para>
      </section>
      <section id='sec.manager.eventloggers'>
         <title id='sec.manager.eventloggers.title'>
            The <literal>eventloggers</literal> package
         </title>
         <para>
         </para>
      </section>
   </section>
   <section id='sec.manager.clientapi'>
      <title id='sec.manager.clientapi.title'>Manager REST client API.</title>
      <para>
      </para>
   </section>
   <section id='sec.manager.guiapi'>
      <title id='sec.manager.guiapi.title'>Manager User Interface API</title>
      <para>
      </para>
   </section>
</chapter>

<!-- /chapter -->

<!-- manpage 3tcl -->

<!-- /manpage -->