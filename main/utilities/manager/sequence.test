#!/bin/sh
# -*- tcl -*-
# The next line is executed by /bin/sh, but not tcl \
exec tclsh "$0" ${1+"$@"}

#    This software is Copyright by the Board of Trustees of Michigan
#    State University (c) Copyright 2014.
#
#    You may use this software under the terms of the GNU public license
#    (GPL).  The terms of this license are described at:
#
#     http://www.gnu.org/licenses/gpl.txt
#
#    Authors:
#             Ron Fox
#             Giordano Cerriza
#	     NSCL
#	     Michigan State University
#	     East Lansing, MI 48824-1321


##
# @file   sequence.test
# @brief  Test sequence part of manager API.
# @author Ron Fox <fox@nscl.msu.edu>
#
package require tcltest
package require sequence
package require programs
package require sqlite3

variable dbFile
variable dbFd

proc commonSetup { } {
    set ::dbFd [file tempfile ::dbFile]
    exec [file join $::env(DAQBIN) mg_mkconfig] $::dbFile
    sqlite3 db $::dbFile
}

proc commonCleanup { } {
    close $::dbFd
    db close
    if {[file exists $::dbFile]} {
        file delete $::dbFile
    }
}

#-----------------------------------------------------------------------------
#  newState Tests.
#
tcltest::test newstate_1 {Successful add} \
-setup {
    commonSetup
} \
-cleanup {
    commonCleanup
} \
-body {
    sequence::newState db test
    db eval {SELECT COUNT(*) FROM transition_name WHERE name='test'}
} \
-result 1

tcltest::test newstate_2 {Duplicate add is an error.} \
-setup {
    commonSetup
    sequence::newState db test
} \
-cleanup {
    commonCleanup
} \
-body {
    sequence::newState db test
} -result * -match glob -returnCodes error

#-------------------------------------------------------------------------------
#  newTransition tests

tcltest::test newtransition_1 {Successful new transition} \
-setup {
    commonSetup
    sequence::newState db state1
    sequence::newState db state2
} \
-cleanup {
    commonCleanup
} \
-body {
    sequence::newTransition db state1 state2
    
    #  Get the ids of state1 and state2 and require that we have a legal
    #  transition with that from and to:
    
    set id1 [db eval {SELECT id FROM transition_name WHERE name = 'state1'}]
    set id2 [db eval {SELECT id FROM transition_name WHERE name = 'state2'}]
    
    db eval {
        SELECT COUNT(*) FROM legal_transition WHERE from_id=$id1 AND to_id=$id2
    }
    
} -result 1

tcltest::test newTransition_2 {to state does not exist.} \
-setup {
    commonSetup
    sequence::newState db state1
} \
-cleanup {
    commonCleanup
} \
-body {
    sequence::newTransition db state1 state2
} -result * -match glob -returnCodes error

tcltest::test newTransition_3 {from state does not exist.} \
-setup {
    commonSetup
    sequence::newState db state2
} \
-cleanup {
    commonCleanup
} \
-body {
    sequence::newTransition db state1 state2
} -result * -match glob -returnCodes error


tcltest::test newtransition_4 {Duplicate transition definitions illegal/detected} \
-setup {
    commonSetup
    sequence::newState db state1
    sequence::newState db state2
    sequence::newTransition db state1 state2
} \
-cleanup {
    commonCleanup
} \
-body {
    sequence::newTransition db state1 state2;               # Duplicate illegal
} -result * -match glob -returnCodes error

#----------------------------------------------------

proc tcltest::cleanupTestHook {} {
    variable numTests
    set ::exitCode [expr {$numTests(Failed) > 0}]
}


tcltest::cleanupTestHook
tcltest::cleanupTests
exit $::exitCode