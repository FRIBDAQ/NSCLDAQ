#!/bin/sh
# -*- tcl -*-
# The next line is executed by /bin/sh, but not tcl \
exec tclsh "$0" ${1+"$@"}

#    This software is Copyright by the Board of Trustees of Michigan
#    State University (c) Copyright 2014.
#
#    You may use this software under the terms of the GNU public license
#    (GPL).  The terms of this license are described at:
#
#     http://www.gnu.org/licenses/gpl.txt
#
#    Authors:
#             Ron Fox
#             Giordano Cerriza
#	     NSCL
#	     Michigan State University
#	     East Lansing, MI 48824-1321


##
# @file   transitions.test
# @brief  Test the actual transition parts of the sequence package.
# @author Ron Fox <fox@nscl.msu.edu>
#
package require tcltest
package require sequence
package require programs
package require sqlite3
package require snit

variable dbfile
variable dbfd
proc commonSetup { } {
    set ::dbfd [file tempfile ::dbfile]
    exec [file join $::env(DAQBIN) mg_mkconfig] $::dbfile
    sqlite3 db $::dbfile
    
    # Make some programs to use in sequences.
        
    ::program::add db echo /bin/echo Transitory localhost [dict create \
        parameters [list Hello world]                                   \
    ]
    ::program::add db criticalEcho /bin/echo Critical localhost [dict create \
        parameters [list Hello from critical]                       \
    ]
    ::program::add db list /bin/ls Transitory localhost [dict create directory ~]
    ::program::add db failure /this/does/not/exist Transitory localhost [dict create]
    
}

proc commonCleanup {} {
    close $::dbfd
    db close
    if {[file exists $::dbfile]} {
        file delete $::dbfile
    }
    
    array unset ::sequence::StepMonitors *
    if {$::sequence::currentTransitionManager ne ""} {
        $::sequence::currentTransitionManager destroy
        set ::sequence::currentTransitionManager [list]
    }
}

#-------------------------------------------------------------------------------
#  Monitor tests.

tcltest::test addmonitor_1 {Add a monitor when  there's none returns empty.} \
-setup {
    commonSetup
    sequence::add db testing SHUTDOWN
    set step [sequence::addStep db testing echo 0 0]
} \
-cleanup {
    commonCleanup
} \
-body {
    
    set retval [::sequence::addMonitor db testing $step junk]
    
} \
-result {}

tcltest::test addmonitor_2 {Add monitor creates a new monitor array element:} \
-setup {
    commonSetup
    sequence::add db testing SHUTDOWN
    set step [sequence::addStep db testing echo  0 0]
} \
-cleanup {
    commonCleanup
} \
-body {
    ::sequence::addMonitor db testing $step junk
    set seqid [::sequence::_getSeqId db testing]
    set monitorIndex [::sequence::_monitorIndex $seqid $step]
    set ::sequence::StepMonitors($monitorIndex)
} -result junk

tcltest::test addmonitor_3 {Adding a monitor returns any prior one.} \
-setup {
    commonSetup
    sequence::add db testing SHUTDOWN
    set step [sequence::addStep db testing echo  0 0]
} \
-cleanup {
    commonCleanup
} \
-body {
    ::sequence::addMonitor db testing $step junk
    set result [::sequence::addMonitor db testing $step trash]
} -result junk

#-----------------------------------------------------------------------------
#  runSequence tests.

tcltest::test runseq_1 {Run an empty sequence - should be successful.} \
-setup {
    commonSetup
    ::sequence::add db testing SHUTDOWN
    proc testing_ended {runner status {text {}}} {
        set ::completion $status
        $runner destroy
    }
} \
-cleanup {
    commonCleanup
} \
-body {
    ::sequence::runSequence db testing testing_ended
    set completion;                  # Immediate completion without event loop
} -result OK
#----------------------------------------------------

proc tcltest::cleanupTestHook {} {
    variable numTests
    set ::exitCode [expr {$numTests(Failed) > 0}]
}


tcltest::cleanupTestHook
tcltest::cleanupTests
exit $::exitCode