#!/bin/sh
# -*- tcl -*-
# The next line is executed by /bin/sh, but not tcl \
exec tclsh "$0" ${1+"$@"}

#    This software is Copyright by the Board of Trustees of Michigan
#    State University (c) Copyright 2014.
#
#    You may use this software under the terms of the GNU public license
#    (GPL).  The terms of this license are described at:
#
#     http://www.gnu.org/licenses/gpl.txt
#
#    Authors:
#             Ron Fox
#             Giordano Cerriza
#	     NSCL
#	     Michigan State University
#	     East Lansing, MI 48824-1321


##
# @file   <filename>
# @brief  <Purpose>
# @author Ron Fox <fox@nscl.msu.edu>
#
package require tcltest
package require containers
package require sqlite3

set dbfile "test-config.db"
proc commonSetup {} {
    tcltest::makeFile [list] $::dbfile
    exec [file join $::env(DAQBIN) mg_mkconfig] $::dbfile
    sqlite3 db $::dbfile -create 1
}
proc commonCleanup {} {
    db close
    tcltest::removeFile $::dbfile
    
}

## Tests for container::add

tcltest::test container_add_1 {Container with no mount points no init script} \
-setup {
    commonSetup
} \
-cleanup {
    commonCleanup
} \
-body {
    ::container::add db test /scratch/nscl-buster.db "" [list]
    set root [db eval {SELECT  container, image_path, init_script FROM container}]
    set count [db eval {SELECT COUNT(*) FROM bindpoint}]
    
    list $root $count
    
} \
-result [list [list test /scratch/nscl-buster.db ""] 0]

tcltest::test container_add_2 {Container with an init script - contents get sucked in} \
-setup {
    commonSetup
    tcltest::makeFile {#!/bin/bash
echo testing}  test_container_init.sh
} \
-cleanup {
    tcltest::removeFile test_container_init.sh
    commonCleanup
    
} \
-body {
    ::container::add db test /scratch/nscl-buster.db [file join [pwd] test_container_init.sh] [list]
    set root [db eval {SELECT init_script FROM container}]
    set root [join $root "\n"]
} -result {#!/bin/bash
echo testing
}

tcltest::test container_add_3 {1 bind point to self.} \
-setup {
    commonSetup
    
} \
-cleanup {
    commonCleanup
} \
-body {
    ::container::add db test ~/minimal.img "" [list /scratch]
    
    db eval {
        SELECT path, mountpoint FROM bindpoint
        INNER JOIN container ON container.id = bindpoint.id
        WHERE container = 'test'
    }

} -result [list /scratch ""]

tcltest::test container_add_4 {A bind point to a different position} \
-setup {
    commonSetup
} \
-cleanup {
    commonCleanup
} \
-body {
    ::container::add db test ~/minimal.img "" [list [list /scratch /test]]
    db eval {
        SELECT path, mountpoint FROM bindpoint
        INNER JOIN container ON container.id = bindpoint.id
        WHERE container = 'test'
    }
    
} -result [list /scratch /test]

tcltest::test container_add_5 {Add bind points to both self and different spots} \
-setup {
    commonSetup
} \
-cleanup {
    commonCleanup
} \
-body {
::container::add db test ~/minimal.img "" [list [list /tmp "" ] [list /scratch /test]]
    db eval {
        SELECT path, mountpoint FROM bindpoint
        INNER JOIN container ON container.id = bindpoint.container_id
        WHERE container = 'test'
    }
} -result [list /tmp "" /scratch /test]

#----------------------------------------------------

proc tcltest::cleanupTestHook {} {
    variable numTests
    set ::exitCode [expr {$numTests(Failed) > 0}]
}


tcltest::cleanupTestHook
tcltest::cleanupTests
exit $::exitCode