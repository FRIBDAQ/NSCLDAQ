#!/bin/sh
# -*- tcl -*-
# The next line is executed by /bin/sh, but not tcl \
exec tclsh "$0" ${1+"$@"}

#    This software is Copyright by the Board of Trustees of Michigan
#    State University (c) Copyright 2014.
#
#    You may use this software under the terms of the GNU public license
#    (GPL).  The terms of this license are described at:
#
#     http://www.gnu.org/licenses/gpl.txt
#
#    Authors:
#             Ron Fox
#             Giordano Cerriza
#	     NSCL
#	     Michigan State University
#	     East Lansing, MI 48824-1321


##
# @file   authtest.test
# @brief  Tests of the auth package./
    

# @author Ron Fox <fox@nscl.msu.edu>
#
package require tcltest
package require auth
package require sqlite3

set dbFile ""
set dbFd   -1
proc commonSetup {} {
    set ::dbFd [file tempfile ::dbFile]
    exec [file join $::env(DAQBIN) mg_mkconfig] $::dbFile
    sqlite3 db $::dbFile


}
proc commonCleanup { } {
    close $::dbFd
    db close
    file delete $::dbFile

}
################################################################################
#  auth::adduser tests.
tcltest::test add_1 {Add makes entry in db .} \
-setup {
    commonSetup
    auth::adduser db fox
} \
-cleanup {
    commonCleanup
} \
-body {
    db eval {SELECT COUNT(*) FROM users}
} \
-result {1}

tcltest::test add_2 {Proper username is added.} \
-setup {
    commonSetup
    auth::adduser db fox
} \
-cleanup {
    commonCleanup
} \
-body {
    db eval {
        SELECT username from users
    }
} -result [list fox]

tcltest::test add_3 {can add several users.} \
-setup {
    commonSetup
    auth::adduser db fox
    auth::adduser db cerizza
    auth::adduser db liddick
    auth::adduser db gade
} \
-cleanup {
    commonCleanup
} \
-body {
    db eval {
        SELECT username FROM users ORDER BY username ASC
    }
} -result [lsort -increasing [list fox cerizza liddick gade]]

tcltest::test add_4 {Adding a duplicate user is an error.} \
-setup {
    commonSetup
    auth::adduser db fox
} \
-cleanup {
    commonCleanup
} \
-body {
    auth::adduser db fox
} -result {There is already a user named: fox} -returnCodes error

###############################################################################
# auth::rmuser   tests

tcltest::test rmuser_1 {Remove nonexistent user is an error} \
-setup {
    commonSetup
    
} \
-cleanup {
    commonCleanup
} \
-body {
    auth::rmuser db fox
} -result {fox is not an existing user and therefore cannot be removed} \
    -returnCodes error

tcltest::test rmuser_2 {rmuser removes one row.} \
-setup {
    commonSetup
    auth::adduser db fox
    auth::adduser db cerizza
    auth::adduser db liddick
    auth::adduser db chester
} \
-cleanup {
    commonCleanup
} \
-body {
    set prior [db eval {SELECT COUNT(*) FROM users}]
    auth::rmuser db liddick
    set now [db eval {SELECT COUNT(*) FROM users}]
    expr {$prior - $now}
} -result 1

tcltest::test rmuser_3 {Remove a user removes the correct user.} \
-setup {
    commonSetup
    auth::adduser db fox
    auth::adduser db cerizza
    auth::adduser db liddick
    auth::adduser db chester
} \
-cleanup {
    commonCleanup
} \
-body {
    auth::rmuser db cerizza
    db eval {
        SELECT username FROM users ORDER BY username ASC
    }
} -result [lsort -increasing [list fox liddick chester]]

#----------------------------------------------------

proc tcltest::cleanupTestHook {} {
    variable numTests
    set ::exitCode [expr {$numTests(Failed) > 0}]
}


tcltest::cleanupTestHook
tcltest::cleanupTests
exit $::exitCode