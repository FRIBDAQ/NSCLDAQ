<!-- manpage 3tcl -->

<refentry id='tcl3.readoutrestclient'>
   <refmeta>
      <refentrytitle id='tcl3.readoutrestclient.title'>ReadoutRESTClient</refentrytitle>
      <manvolnum>3tcl</manvolnum>
   </refmeta>
   <refnamediv>
      <refname>ReadoutRESTClient</refname>
      <refpurpose>Client for Readout REST servers</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <programlisting>
package require ReadoutRESTClient

ReadouRESTClient name ?option value...?
name configure option value ?...?
name begin
name end
name init
name shutdown
name getState
name getTitle
name getRunNumber
name getStatistics
name setTitle new-title-string
name setRunNumber new-run-number
        </programlisting>
    </refsynopsisdiv>
    <refsect1>
             <title>DESCRIPTION</title>
          <para>
            The <literal>ReadoutREST</literal> package provides NSCLDAQ
            based Tcl driven Readout programs a REST server that can be used
            to remotely control and query the Readout.  This facility is normally
            used in conjunction with the NSCLDAQ DAQ manager facility to
            manage Readout programs as critical programs that require attention
            during state transitions.
          </para>
          <para>
            The <literal>ReadoutRESTClient</literal> package, ass the name
            implies, provides a Tcl REST client library for the ReadoutREST
            server.
          </para>
    </refsect1>
    <refsect1>
        <title>OPTIONS</title>
        <para>
            Configuration options control how the REST client connects with the
            server.  Note that each REST operations (public method call),
            performs service discovery, connects with the server, performs the
            request, gets the response and closes the connection.
        </para>
        <para>
            Therefore the pre-defined <methodname>configure</methodname>
            method allows client code to dynamically modify the server
            options.  Furthermore, this strategy supports the
            case when the server exits and restarts, potentially with a different
            server listen port, between requests.
        </para>
        <para>
            Here are the options, their defaults and their meanings:
        </para>
        <variablelist>
            <varlistentry>
               <term><option>-host</option></term>
               <listitem>
                   <para>
                    THe host in which the Readout program we want to communicate
                    with is running.  This defaults to <literal>localhost</literal>.
                    Note, however that the use of <literal>locahost</literal> is not
                    host portable.  Please get in the habit of specifying a real
                    hostname.
                   </para>
                </listitem>
            </varlistentry>
            <varlistentry>
               <term><option>-user</option></term>
               <listitem>
                   <para>
                    The user the Readout program you want to communicate with
                    was run under.  Defaults to the name of the person
                    runing the application.  This, in conjunction with the
                    <option>-service</option> option below is used to
                    translate the Readout's service advertisement into a
                    numeric TCP/IP port number.
                   </para>
                </listitem>
            </varlistentry>
            <varlistentry>
               <term><option>-service</option></term>
               <listitem>
                   <para>
                    The name of the servic advertised by the ReadoutREST
                    package in the Readout we want to communicate with.
                    This defaults to <literal>ReadoutREST</literal> which is
                    the default service name.
                   </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsect1>
    <refsect1>
        <title>PUBLIC METHODS</title>
        <para>
            Each of the public methods below performs a REST transaction with
            the server. This transaction includes service discovery (translating
            the <option>-user</option> and <option>-service</option> values to
            a numeric TCP/IP port number),  connecting with the server to perform
            a REST transaction and unmarshalling any resulting JSON into
            reasonable return values.
        </para>
        <para>
            The methods which are considered public are:
        </para>
        <variablelist>
            <varlistentry>
               <term><methodname>begin</methodname></term>
               <listitem>
                   <para>
                    Attempts to start a new run.  The resulting Readout
                    state is returned.  Note that this is not the same as the
                    DAQ Manager's state.  If a transition to active data taking
                    is not permitted (e.g. data taking is in progress) and
                    error is raised.
                   </para>
                </listitem>
            </varlistentry>
            <varlistentry>
               <term><methodname>end</methodname></term>
               <listitem>
                   <para>
                    Ends active data taking in the Readout program.  Returns
                    the name of the resulting state.
                   </para>
                </listitem>
            </varlistentry>
            <varlistentry>
               <term><methodname>init</methodname></term>
               <listitem>
                   <para>
                    Attempts to initialize the hardsware in the Readout.
                    Not all Readout programs support this.  Those that do not
                    are expected to silently ignore the request.
                    Data taking must not be active.
                   </para>
                </listitem>
            </varlistentry>
            <varlistentry>
               <term><methodname>shutdown</methodname></term>
               <listitem>
                   <para>
                    Requests the Readout program to exit.
                   </para>
                </listitem>
            </varlistentry>
            <varlistentry>
               <term><methodname>getState</methodname></term>
               <listitem>
                   <para>
                    Returns the current Readout program state.
                   </para>
                </listitem>
            </varlistentry>
            <varlistentry>
               <term><methodname>getTitle</methodname></term>
               <listitem>
                   <para>
                    Returns the currently set title.
                   </para>
                </listitem>
            </varlistentry>
            <varlistentry>
               <term><methodname>getRunNumber</methodname></term>
               <listitem>
                   <para>
                    Returns the currently set run number.
                   </para>
                </listitem>
            </varlistentry>
            <varlistentry>
               <term><methodname>getStatistics</methodname></term>
               <listitem>
                   <para>
                    Returns a dict that describes the Readout's statistics.
                    This is a dict with the keys <literal>cumulative</literal>
                    and <literal>perRun</literal>.  The cumulative key contains
                    statistics over the course of the entire readout program while
                    beginning a run clear the counters in the
                    perRun statistics.
                   </para>
                   <para>
                    Each of the keys contains a value that is a dict which is
                    identical, containing the following keys:
                   </para>
                   <variablelist>
                    <varlistentry>
                       <term><literal>triggers</literal></term>
                       <listitem>
                           <para>
                            Number of triggers sent to the Readout.
                           </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                       <term><literal>acceptedTriggers</literal></term>
                       <listitem>
                           <para>Number of
                           triggers that resulted in an event.  This reflects the
                           ability of some hardware (e.g. XIA modules) and some software to reject
                           triggers resulting in no data.
                           </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                       <term><literal>bytes</literal></term>
                       <listitem>
                           <para>
                            Number of bytes read from the hardware.
                           </para>
                        </listitem>
                    </varlistentry>
                   </variablelist>
                </listitem>
            </varlistentry>
            <varlistentry>
               <term><methodname>setTitle</methodname> <parameter>title-string</parameter></term>
               <listitem>
                   <para>
                    Sets the Readout's title to the specified
                    <parameter>title-string</parameter>
                   </para>
                </listitem>
            </varlistentry>
            <varlistentry>
               <term><methodname>setRunNumber5</methodname> <parameter>number</parameter></term>
               <listitem>
                   <para>
                    Sets the new run number to <parameter>number</parameter>.
                   </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsect1>
</refentry>

<refentry id='tcl3.readoutstatistics'>
   <refmeta>
      <refentrytitle id='tcl3.readoutstatistics.title'>ReadoutStatistics</refentrytitle>
      <manvolnum>3tcl</manvolnum>
   </refmeta>
   <refnamediv>
      <refname>ReadoutStatistics</refname>
      <refpurpose>Display readout statistics (VIEW)</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <programlisting>
package require ReadoutRESTUI

ReadoutStatistics name ?optname value...?
name configure option value ?...?

        </programlisting>
    </refsynopsisdiv>
    <refsect1>
             <title>DESCRIPTION</title>
          <para>
            Provides a widget that displays Readout trigger/transfer statistics.
            The widget accepts a single configuration option:
            <option>-data</option> which is a statistics dict such as what might
            be returned from the <methodname>getStatistics</methodname>
            method of
            <link linkend='tcl3.readoutrestclient' endterm='tcl3.readoutrestclient.title' />
          </para>
    </refsect1>
</refentry>

<refentry id='tcl3.readoutparameters'>
   <refmeta>
      <refentrytitle id='tcl3.readoutparameters.title'>ReadoutParameters</refentrytitle>
      <manvolnum>3tcl</manvolnum>
   </refmeta>
   <refnamediv>
      <refname>ReadoutParameters</refname>
      <refpurpose>Display/Set Readout Parametesrs (VIEW)</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <programlisting>
package require ReadoutRESTUI

ReadoutParameters name ?option value ...?
name configure option value ?.,..?
        </programlisting>
    </refsynopsisdiv>
    <refsect1>
             <title>DESCRIPTION</title>
          <para>
            Provides a vew class that lets users see the current run
            parameters and set values for the next one.  This consists of
            readonly displays of a title and run number as well as a pair of
            controls that allow the entry of new run number and title.
          </para>
          <para>
            The interface to the object is totally handled by configuration
            options and the callouts they may specify:
          </para>
          <variablelist>
            <varlistentry>
               <term><option>-title</option></term>
               <listitem>
                   <para>
                    Specifies/gets the value of the current title.
                   </para>
                </listitem>
            </varlistentry>
            <varlistentry>
               <term><option>-run</option></term>
               <listitem>
                   <para>
                    Specifies/gets the value of the current run number.
                   </para>
                </listitem>
            </varlistentry>
            <varlistentry>
               <term><option>-nextrun</option></term>
               <listitem>
                   <para>
                    Specify/retrieve the value of the next run number spinbox.
                   </para>
                </listitem>
            </varlistentry>
            <varlistentry>
               <term><option>-nexttitle</option></term>
               <listitem>
                   <para>
                    Specify/retrieve the vale of the next title text entry.
                   </para>
                </listitem>
            </varlistentry>
            <varlistentry>
               <term><option>-titlecommand</option></term>
               <listitem>
                   <para>
                    Specifies a script that is invoked when the title
                    changes.  The new title is passed as a parameter to the
                    script.
                   </para>
                </listitem>
            </varlistentry>
            <varlistentry>
               <term><option>-runcommand</option></term>
               <listitem>
                   <para>
                    Specifies a script that is invoked when the run number
                     is changed.   The new run number is passed as a parameter
                     to the script.
                   </para>
                </listitem>
            </varlistentry>
          </variablelist>
    </refsect1>
</refentry>

<refentry id='tcl3.readoutstate'>
   <refmeta>
      <refentrytitle id='tcl3.readoutstate.title'>ReadoutState</refentrytitle>
      <manvolnum>3tcl</manvolnum>
   </refmeta>
   <refnamediv>
      <refname>ReadoutState</refname>
      <refpurpose>Show Readout State and Request Transitions (VIEW)</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <programlisting>
package require ReadoutRESTUI

ReadoutState name ?option value ...?
name configure option value ?...?

        </programlisting>
    </refsynopsisdiv>
    <refsect1>
             <title>DESCRIPTION</title>
          <para>
            Provides a view that allows users to see and attempt to modify
            the state of a Readout program.  The view consists of a label
            that shows a programmable state value, and three pushbuttons.  One
            pushbutton has a variable function lable that depends on the
            value of the state display.  The other two can request hardware
            initialization and Readout program shutdown.
          </para>
          <para>
            Two options determine what the user sees and what action is
            performed as a result of clicking a button:
          </para>
          <variablelist>
            <varlistentry>
               <term><option>-state</option></term>
               <listitem>
                   <para>
                    Provides the Readout's current state to the view.  Valid
                    values are the text strings:
                    <literal>idle</literal>, <literal>active</literal>,
                    <literal>paused</literal> and
                    <literal>inconsistent</literal>.  The value of this
                    determines the label and state of the
                    variable purpose button.  
                   </para>
                   <para>
                    Legal values are, for the most part, self explanatory.
                    The <literal>inconsistent</literal> value allows for
                    a case when the view is displaying data from several
                    Readout programs and the states of those programs is
                    momentarily not consistent.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
               <term><option>-command</option></term>
               <listitem>
                   <para>
                    Provides a script that is invoked when any
                    button is clicked.  THe script gets a value passed to it
                    that indicates what the button wanted done.  This value is one of
                    <literal>begin</literal>, <literal>end</literal>,
                    <literal>init</literal> or <literal>shutdown</literal>.
                   </para>
                </listitem>
            </varlistentry>
          </variablelist>
    </refsect1>
</refentry>

<refentry id='tcl3.readoutui'>
   <refmeta>
      <refentrytitle id='tcl3.readoutui.title'>ReadoutUI</refentrytitle>
      <manvolnum>3tcl</manvolnum>
   </refmeta>
   <refnamediv>
      <refname>ReadoutUI</refname>
      <refpurpose>Combined Readout Control Panel (REST VIEW).</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
      <programlisting>
package require ReadoutRESTUI

ReadoutUI name ?option value...?
name configure option value ?...?
set value [name cget option]
      </programlisting>
    </refsynopsisdiv>
    <refsect1>
             <title>DESCRIPTION</title>
          <para>
            This megawidget glues together the
            <link linkend='tcl3.readoutparameters' endterm='tcl3.readoutparameters.title' />,
            <link linkend='tcl3.readoutstatistics' endterm='tcl3.readoutstatistics.title' />
            and
            <link linkend='tcl3.readoutstate' endterm='tcl3.readoutstate.title' />
            views into a single integrated control panel for Readout program(s)
            controlled via their REST interfaces. 
          </para>
          <para>
            As such, this view inherits all of the options of its component
            subviews:
          </para>
          <variablelist>
            <varlistentry>
               <term><option>-title</option></term>
               <listitem>
                   <para>
                     Sets/gets the readonly title label on the paramters
                     part of the view.
                   </para>
                </listitem>
            </varlistentry>
            <varlistentry>
               <term><option>-nexttitle</option></term>
               <listitem>
                   <para>
                     Sets/gets the contents of the entry field that is to
                     hold the title of the next run in the parameters part of
                     the view.
                   </para>
                </listitem>
            </varlistentry>
            <varlistentry>
               <term><option>-run</option></term>
               <listitem>
                   <para>
                     Set/gets the contents of the readonly run number label on
                     the parameters part of the view.
                   </para>
                </listitem>
            </varlistentry>
            <varlistentry>
               <term><option>-nextrun</option></term>
               <listitem>
                   <para>
                     Sets/gets/ the contents of the spinbox that is to hold the
                     next run number in the parameters part of the view.
                   </para>
                </listitem>
            </varlistentry>
            <varlistentry>
               <term><option>-titlecommand</option></term>
               <listitem>
                   <para>
                     Script that will be invoked when the next title entry has been
                     changed in the parameter subview.
                     This script will be passed the new
                     title string.
                   </para>
                </listitem>
            </varlistentry>
            <varlistentry>
               <term><option>-runcommand</option></term>
               <listitem>
                   <para>
                     Specifies a script that is invoked when the run number
                     is changed in the parameter subview's next run number spinboxl
                     The new run number is passed as a parameter
                     to the script.
                   </para>
                </listitem>
            </varlistentry>
            <varlistentry>
               <term><option>-currentstate</option></term>
               <listitem>
                   <para>
                     Sets the current state of the run in the status/state
                     control subview.  This can be
                     one of <literal>idle</literal>, <literal>active</literal>,
                     <literal>paused</literal> or <literal>inconsistent</literal>.
                     This state will appropriately update the label on the
                     variable purpose button.
                   </para>
                </listitem>
            </varlistentry>
            <varlistentry>
               <term><option>-statecommand</option></term>
               <listitem>
                   <para>
                     Sets a script to be 
                     called when a button is clicked in the status/state
                     control/subview.  The script is passed a
                     string value indicating
                     the desired action.  This is one of
                     <literal>begin</literal>, <literal>end</literal>,
                     <literal>init</literal> or
                     <literal>shutdown</literal>.
                   </para>
                </listitem>
            </varlistentry>
            <varlistentry>
               <term><option>-statistics</option></term>
               <listitem>
                   <para>
                     Passes Readout statistics to the
                     statistics display sub-view.
                     The value of this option should be a
                     statistics dict such as what might
                     be returned from the <methodname>getStatistics</methodname>
                     method of
                     <link linkend='tcl3.readoutrestclient' endterm='tcl3.readoutrestclient.title' />
                            </para>
                </listitem>
            </varlistentry>
          </variablelist>
    </refsect1>
</refentry>
<!-- /manpage -->

<!-- manpage 5daq -->

<!-- /manpage -->