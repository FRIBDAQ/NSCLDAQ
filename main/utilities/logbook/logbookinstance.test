#!/bin/sh
# -*- tcl -*-
# The next line is executed by /bin/sh, but not tcl \
exec tclsh "$0" ${1+"$@"}

#    This software is Copyright by the Board of Trustees of Michigan
#    State University (c) Copyright 2014.
#
#    You may use this software under the terms of the GNU public license
#    (GPL).  The terms of this license are described at:
#
#     http://www.gnu.org/licenses/gpl.txt
#
#    Authors:
#             Ron Fox
#             Giordano Cerriza
#	     NSCL
#	     Michigan State University
#	     East Lansing, MI 48824-1321


##
# @file   logbookinstance.test
# @brief  Test logbook instances.
# @author Ron Fox <fox@nscl.msu.edu>
#
package require tcltest
package require logbook
package require sqlite3

# In case there are hanging files:

if {[file exists test.logbook.db]} {
    file delete test.logbookk.db
}

#  Commmon setup/cleanup procs.

set LogbookInstance {}
proc commonSetup {} {
    if {[file exists test.logbook.db]} {file delete test.logbook.db}
    logbook::logbook create test.logbook.db 0400x {Ron Fox} {Logbook Tcl Tests}
    set ::LogbookInstance [logbook::logbook open test.logbook.db]
}
proc commonCleanup {} {
    $::LogbookInstance destroy
    file delete test.logbook.db
}


tcltest::test cmd_exists {Ensure the command exists properly} \
-setup {
    commonSetup
} \
-cleanup {
    commonCleanup
} \
-body {
    expr {[info command $::LogbookInstance] ne ""}
} \
-result 1

#####################

tcltest::test usage_1 { Need to have a subcommand} \
-setup {
    commonSetup
} \
-cleanup {
    commonCleanup
} \
-body {
    catch {$::LogbookInstance}
} -result 1

tcltest::test usage_2 {garbage subcommand is an error} \
-setup {
    commonSetup
} \
-cleanup {
    commonCleanup
} \
-body {
    catch {$::LogbookInstancde junky-subcommand}
} -result 1

#####################

tcltest::test destroy_1 {Destroy makes the command go away} \
-setup {
    commonSetup
} \
-cleanup {
    file delete test.logbook.db
} \
-body {
    $::LogbookInstance destroy
    info command $::LogbookInstance
} -result ""

#########################



tcltest::test addPerson_1 {Add person insufficient parameter count} \
-setup {
    commonSetup
} -cleanup {
    commonCleanup
} -body {
    catch {$::LogbookInstance addPerson lastname-only}
} -result 1

tcltest::test addPerson_2 {Add Person too many parameters} \
-setup {
    commonSetup
} \
-cleanup {
    commonCleanup
} \
-body {
    catch {$::LogbookInstance addPerson lastname firstname salutation estra}
} -result 1


tcltest::test addPerson_3 {Add person with salutation} \
-setup {
    commonSetup
} \
-cleanup {
    commonCleanup
} \
-body {
    set cmd [$::LogbookInstance addPerson Fox Ron Mr.]
    set result [expr {[info command $cmd] ne ""}]
    $cmd destroy    
    set result
    
} -result 1

tcltest::test addPerson_4 {Add Person without salutation} \
-setup {
    commonSetup
} \
-cleanup {
    commonCleanup
} \
-body {
    set cmd [$::LogbookInstance addPerson Fox Ron]
    set result [expr  {[info command $cmd] ne ""}]
    $cmd destroy
    set result
} -result 1


########################################################

tcltest::test findPerson_1 {No people to find} \
-setup {
    commonSetup
} \
-cleanup {
    commonCleanup
} \
-body {
    $::LogbookInstance findPeople
} -result [list]

tcltest::test findPerson_2 {two people to find no conditions} \
-setup {
    commonSetup
} \
-cleanup {
    $giordano destroy
    $fox      destroy
    foreach person $people {$person destroy}
    commonCleanup
} \
-body {
    set fox [$::LogbookInstance addPerson Fox Ron]
    set giordano [$::LogbookInstance addPerson Cerizza Giordano]
    set people [$::LogbookInstance findPeople]
    
    llength $people
} -result 2

tcltest::test find_person_3 {one person due to conditions} \
-setup {
    commonSetup
} \
-cleanup {
    $giordano destroy
    $fox      destroy
    foreach person $people {$person destroy}
    commonCleanup
} \
-body {
    
    set fox [$::LogbookInstance addPerson Fox Ron]
    set giordano [$::LogbookInstance addPerson Cerizza Giordano]
    set people [$::LogbookInstance findPeople {lastname = 'Fox'}]
    llength $people
} -result 1

tcltest::test find_person_4 {Nobody matches the condition} \
-setup {
    commonSetup
} \
-cleanup {
    $giordano destroy
    $fox      destroy
    foreach person $people {$person destroy}
    commonCleanup
} \
-body {
    
    set fox [$::LogbookInstance addPerson Fox Ron]
    set giordano [$::LogbookInstance addPerson Cerizza Giordano]
    set people [$::LogbookInstance findPeople {lastname = 'Fox' AND firstname = 'Giordano'}]
    llength $people
} -result 0

##########################################################

tcltest::test listPeople_1 {Nobody to list} \
-setup { commonSetup } -cleanup {commonCleanup} \
-body {
    set people [$::LogbookInstance listPeople]
    llength $people
} -result 0

tcltest::test listPeople_2 {two people to list} \
-setup {
    commonSetup
} \
-cleanup {
    $giordano destroy
    $fox      destroy
    foreach person $people {$person destroy}
    commonCleanup
} \
-body {
    
    set fox [$::LogbookInstance addPerson Fox Ron]
    set giordano [$::LogbookInstance addPerson Cerizza Giordano]
    set people [$::LogbookInstance listPeople]
    llength $people
} -result 2 

####################################################################

tcltest::test getperson_1 {Not found is an error} \
-setup { commonSetup } -cleanup {commonCleanup} \
-body {
    $::LogbookInstance getPerson 1
} -returnCodes error -result * -match glob

tcltest::test getperson_2 {Found gets a command} \
-setup {
    commonSetup
} \
-cleanup {
    $giordano destroy
    $fox      destroy
    $cmd      destroy
    foreach person $people {$person destroy}
    commonCleanup
} \
-body {
    
    set fox [$::LogbookInstance addPerson Fox Ron]
    set giordano [$::LogbookInstance addPerson Cerizza Giordano]
    
    # Giordano is id  2:
    
    set cmd [$::LogbookInstance  getPerson 2]
    expr {[info command $cmd] ne ""}
} -result 1
######################################################################

tcltest::test newshift_1 {Create a new empty shift} \
-setup { commonSetup } -cleanup {
    $shift destroy
    commonCleanup
} \
-body {
    set shift [$::LogbookInstance createShift shift]
    expr {[info command $shift] ne ""}
} -result 1


tcltest::test newshift_2 {Create a shift with people} \
-setup {
    commonSetup
} \
-cleanup {
    $giordano destroy
    $fox      destroy
    $shift      destroy
    commonCleanup
} \
-body {
    
    set fox [$::LogbookInstance addPerson Fox Ron]
    set giordano [$::LogbookInstance addPerson Cerizza Giordano]
    set shift [$::LogbookInstance createShift shift [list $fox $giordano]]
    
    expr {[info command $shift] ne ""}
} -result 1

tcltest::test newshift_3 {Create a shift but bad person command name} \
-setup {
    commonSetup
} \
-cleanup {
    $giordano destroy
    $fox      destroy
    commonCleanup
} \
-body {
    
    set fox [$::LogbookInstance addPerson Fox Ron]
    set giordano [$::LogbookInstance addPerson Cerizza Giordano]
    
    set shift [$::LogbookInstance  createShift shift $fox giordano]
} -returnCodes error  -result * -match glob


#########################################################################

tcltest::test getShift_1 {No such shift is an error} \
-setup { commonSetup } -cleanup {commonCleanup} \
-body {
    $::LogbookInstance getShift 12
} -returnCodes error -result * -match glob

tcltest::test getShift_2 {Find a shift properly} \
-setup {
    commonSetup
} \
-cleanup {
    $giordano destroy
    $fox      destroy
    $shift    destroy
    $shift1   destroy
    $sh       destroy
    commonCleanup
} \
-body {
    
    set fox [$::LogbookInstance addPerson Fox Ron]
    set giordano [$::LogbookInstance addPerson Cerizza Giordano]
    set shift [$::LogbookInstance createShift shift [list $fox $giordano]]
    set shift1 [$::LogbookInstance createShift shift1]
    
    set sh [$::LogbookInstance getShift 2]
    expr {[info command $sh] ne ""}
} -result 1

#=================================================================

tcltest::test addShiftMember_1 {Bad shift} \
-setup { commonSetup } \
-cleanup {
    $fox destroy
    commonCleanup
} \
-body {
    set fox [$::LogbookInstance addPerson Fox Ron]
    $LogbookInstance addShiftMember ashift $fox
} -returnCodes error -result * -match glob

tcltest::test addShiftMember_2 {Bad Person} \
-setup {
    commonSetup
} \
-cleanup {
    $giordano destroy
    $fox      destroy
    $shift      destroy
    commonCleanup
} \
-body {
    
    set fox [$::LogbookInstance addPerson Fox Ron]
    set giordano [$::LogbookInstance addPerson Cerizza Giordano]
    set shift [$::LogbookInstance createShift shift  $fox]
    $::LogbookInstance addShiftMember giordano;    # Needs to be $giordano
} -returnCodes error -result * -match glob

tcltest::test addShiftMember_3 {good add} \
-setup {
    commonSetup
} \
-cleanup {
    $giordano destroy
    $fox      destroy
    $shift      destroy
    commonCleanup
} \
-body {
    
    set fox [$::LogbookInstance addPerson Fox Ron]
    set giordano [$::LogbookInstance addPerson Cerizza Giordano]
    set shift [$::LogbookInstance createShift shift  $fox]
    set modifiedShift [$::LogbookInstance addShiftMember $shift $giordano]
    expr {$shift == $modifiedShift}
} -result 1

###########################################################################

tcltest::test removeShiftMember_1 {No such shift} \
-setup {commonSetup} -cleanup {
    $fox destroy
    commonCleanup
} \
-body {
    set fox [$::LogbookInstance addPerson Fox Ron]
    $::LogbookInstance removeShiftMember nosuchshift $fox
} -returnCodes error -result * -match glob

tcltest::test removeShiftMember_2 {No such person} \
-setup {commonSetup} -cleanup {
    $shift destroy
    commonCleanup
} \
-body {
    set shift [$::LogbookInstance  createShift ashift]
    $::LogbookInstance removeShiftMember $shift fox
} -returnCodes error -result * -match glob

tcltest::test removeShiftMember_3 {No such person in the shift} \
-setup {commonSetup} -cleanup {
    $fox destroy
    $shift destroy
    commonCleanup
} \
-body {
    set shift [$::LogbookInstance createShift ashift]
    set fox [$::LogbookInstance addPerson Fox Ron]
    $::LogbookInstance removeShiftMember $fox
} -returnCodes error -result * -match glob

tcltest::test removeShiftMember_4 {Good removal} \
-setup {commonSetup} -cleanup {
    $shift destroy
    $fox   destroy
    commonCleanup
} \
-body {
    set fox [$::LogbookInstance addPerson Fox Ron]
    set shift [$::LogbookInstance createShift ashift $fox]
    set oldshift [$::LogbookInstance removeShiftMember $shift $fox]
    
    expr {$oldshift == $shift}
    
} -result 1

###########################################################

tcltest::test listShifts_1   {Nothing to list} \
-setup {commonSetup} -cleanup {commonCleanup} \
-body {
    $::LogbookInstance listShifts
} -result [list]

tcltest::test listShifts_2   {One shift to list} \
-setup {commonSetup} -cleanup {
    $shift destroy
    foreach s $shifts {$s destroy}
    commonCleanup
} \
-body {
    set shift [$::LogbookInstance createShift myshift]
    set shifts [$::LogbookInstance listShifts]
    llength $shifts
} -result 1

tcltest::test listShifts_3   {Several shifts to list} \
-setup {commonSetup} -cleanup {
    foreach s $madeShifts {$s destroy}
    foreach s $shifts {$s destroy}
    commonCleanup
} \
-body {
    set madeShifts [list]
    for {set i 0} {$i < 10} {incr i} {
        lappend madeShifts [$::LogbookInstance createShift shift-$i]
    }
    set shifts [$::LogbookInstance listShifts]
    llength $shifts
} -result 10
#######################################################################

tcltest::test findShift_1 {No such shift} \
-setup {commonSetup} -cleanup {
    $fox destroy
    $shift destroy
    commonCleanup
} \
-body {
    set shift [$::LogbookInstance createShift ashift]
    set fox [$::LogbookInstance addPerson Fox Ron]
    $::LogbookInstance removeShiftMember $fox
} -returnCodes error -result * -match glob



tcltest::test findShift_2 {Find shift }  \
-setup {commonSetup} -cleanup {
    $fox destroy
    $shift destroy
    commonCleanup
} \
-body {
    set shift [$::LogbookInstance createShift ashift]
    set fox [$::LogbookInstance addPerson Fox Ron]
    $::LogbookInstance removeShiftMember $fox
} -returnCodes error -result * -match glob


###########################################################################

tcltest::test setCurrent_1 {No such shift} \
-setup {commonSetup} -cleanup {commonCleanup} \
-body {
    $::LogbookInstance setCurrentShift nosuch
} -returnCodes error -result * -match glob


tcltest::test setCurrent_2 {Correct call} \
-setup {commonSetup} -cleanup {
    $shift1 destroy
    $shift2 destroy
    commonCleanup
} \
-body {
    set shift1 [$::LogbookInstance createShift shift1]
    set shift2 [$::LogbookInstance createShift shift2]
    
    $::LogbookInstance setCurrentShift shift2
    
    sqlite3 db test.logbook.db
    set result [list]
    db eval {SELECT name FROM current_shift
        INNER JOIN shift ON shift.id = current_shift.shift_id} {
        set result $name
    }
    db close
    set result
} -result shift2
#######################################################################

tcltest::test getCurrent_1 {There's no current shift} \
-setup {commonSetup} -cleanup {commonCleanup} \
-body {
    $::LogbookInstance getCurrentShift
} -result ""

tcltest::test getCurrent_2 {There is a current shift}  \
-setup {commonSetup} -cleanup {
    $shift1 destroy
    $shift2 destroy
    $current destroy
    commonCleanup
} \
-body {
    set shift1 [$::LogbookInstance createShift shift1]
    set shift2 [$::LogbookInstance createShift shift2]
    
    $::LogbookInstance setCurrentShift shift2
    
    set current [$::LogbookInstance getCurrentShift]
    expr {$current ne ""}
} -result 1
##############################################################################

tcltest::test begin_1  {There's no current shift}\
-setup {commonSetup} -cleanup {commonCleanup} \
-body {
    $::LogbookInstance begin 1 {This is a title} {This is a remark}
} -returnCodes error -result * -match glob

tcltest::test begin_2  {Good begin} \
-setup {commonSetup} -cleanup {
    $shift destroy
    $run   destroy
    commonCleanup
} \
-body {
    set shift [$::LogbookInstance createShift theshift]
    $::LogbookInstance setCurrentShift theshift
    set run [$::LogbookInstance begin 1 {This is a title} {This is a remark}]
    
    expr {[info command $run] ne ""}
        
} -result 1

tcltest::test begin_3  {existing current run} \
-setup {commonSetup} -cleanup {
    $shift destroy
    $run   destroy
    commonCleanup
} \
-body {
    set shift [$::LogbookInstance createShift theshift]
    $::LogbookInstance setCurrentShift theshift
    set run [$::LogbookInstance begin 1 {This is a title} {This is a remark}]
    $::LogboogkInstance begin 2 {This is a title} {A run is already active!!}
} -returnCodes error -result * -match glob

###########################################################################

tcltest::test end_1 {Successful end} \
-setup {commonSetup} -cleanup {
    $shift destroy
    $run   destroy
    commonCleanup
} \
-body {
    set shift [$::LogbookInstance createShift myshift]
    $::LogbookInstance setCurrentShift myshift
    
    set run [$::LogbookInstance begin 1 {this is a title} {this is a remark}]
    set ended [$::LogbookInstance end $run {End run remark}]
    expr {$ended == $run}
} -result 1


tcltest::test end_2 {Can't end an ended run} \
-setup {commonSetup} -cleanup {
    $shift destroy
    $run   destroy
    commonCleanup
} \
-body {
    set shift [$::LogbookInstance createShift myshift]
    $::LogbookInstance setCurrentShift myshift
    
    set run [$::LogbookInstance begin 1 {this is a title} {this is a remark}]
    set ended [$::LogbookInstance end $run {End run remark}]
    $::LogbookInstance end $run {This run is already ended}
} -returnCodes error -result * -match glob
    
#----------------------------------------------------

proc tcltest::cleanupTestHook {} {
    variable numTests
    set ::exitCode [expr {$numTests(Failed) > 0}]
}


tcltest::cleanupTestHook
tcltest::cleanupTests
exit $::exitCode