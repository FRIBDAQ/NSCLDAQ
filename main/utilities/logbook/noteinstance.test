#!/bin/sh
# -*- tcl -*-
# The next line is executed by /bin/sh, but not tcl \
exec tclsh "$0" ${1+"$@"}

#    This software is Copyright by the Board of Trustees of Michigan
#    State University (c) Copyright 2014.
#
#    You may use this software under the terms of the GNU public license
#    (GPL).  The terms of this license are described at:
#
#     http://www.gnu.org/licenses/gpl.txt
#
#    Authors:
#             Ron Fox
#             Giordano Cerriza
#	     NSCL
#	     Michigan State University
#	     East Lansing, MI 48824-1321


##
# @file   noteinstance.test
# @brief  Test note instance methods.
# @author Ron Fox <fox@nscl.msu.edu>
#
package require tcltest
package require logbook

proc commonSetup {} {
    if {[file exists test.logbook.db]} {file delete test.logbook.db}
    logbook::logbook create test.logbook.db 0400x {Ron Fox} {Testing Tcl bindings}
    set ::logbook [logbook::logbook open  test.logbook.db]
    set ::ron [$::logbook addPerson Fox Ron Mr.]
    set ::giordano [$::logbook addPerson Cerizza Giordano Dr.]
    set ::shift    [$::logbook createShift aShift [list $::ron $::giordano]]
    $::logbook setCurrentShift aShift
    set ::run [$::logbook begin 12 {The run's title} {Begin run remark}]
}

proc commonCleanup { } {
    $::run destroy
    $::shift destroy
    $::ron destroy
    $::giordano destroy
    $::logbook destroy
    file delete test.logbook.db
}


tcltest::test id {Get note id.} \
-setup {
    commonSetup
} \
-cleanup {
    $note destroy
    commonCleanup
} \
-body {
    set note [$logbook createNote $ron {This is note text}]
    $note id
} \
-result 1

tcltest::test run_1 {run method without a run gives empty string} \
-setup {commonSetup} -cleanup {
    $note destroy
    commonCleanup
} \
-body {
    set note [$logbook createNote $ron {This is is a note with no run}]
    $note run
} -result ""

tcltest::test run_2 {Run method wit an associated run gives the correct run} \
-setup {commonSetup} -cleanup {
    $noterun destroy
    $note destroy
    commonCleanup
} \
-body {
    set note [$logbook createNote $ron {This is a note with a run} $run]
    set noterun [$note run]
    $noterun number
} -result 12

tcltest::test author {Correct author name returned} \
-setup {commonSetup} \
-cleanup {
    $author destroy
    $note destroy
    commonCleanup
} \
-body {
    set note [$logbook createNote $giordano {This is the note text}]
    set author [$note author]
    $author firstName
} -result Giordano

## Timestamp - we're going to get clock seconds, make the note
# and only require the note timestamp be within a second of the timestamp we took.

tcltest::test timestamp {correct note creation time} \
-setup {commonSetup} \
-cleanup {
    $note destroy
    commonCleanup
} \
-body {
    set time [clock seconds]
    set note [$logbook createNote $ron {Some note text}]
    set noteTime [$note timestamp]
    expr {($noteTime - $time) <= 1} ;   # Clock could have ticked since clock seconds
} -result 1

tcltest::test contents {Correct note contents} \
-setup {commonSetup} -cleanup {
    $note destroy
    commonCleanup
} \
-body {
    set note [$logbook createNote $giordano {This is giordano's note}]
    $note contents
} -result {This is giordano's note}

tcltest::test images_1  {Note has no images} \
-setup {commonSetup} -cleanup {
    $note destroy
    commonCleanup
} \
-body {
    set note [$logbook createNote $giordano {Some note text}]
    llength [$note images]
} -result 0

tcltest::test images_2.1 {Put a hokey image in the text:1} \
-setup {
    set contents "this is a hokey image"
    commonSetup
    tcltest::makeFile $contents  hokeyimage.img

} \
-cleanup {
    $note destroy
    commonCleanup
    tcltest::removeFile hokeyimage.img
} \
-body {
    set note [$logbook createNote $ron {this is note text} \
              [list hokeyimage.img] [list 5]]
    llength [$note images]
} -result 1
    
tcltest::test images_2.2 {Put a hokey image in the text:2} \
-setup {
    set contents "this is a hokey image"
    commonSetup
    tcltest::makeFile $contents  hokeyimage.img

} \
-cleanup {
    $note destroy
    commonCleanup
    tcltest::removeFile hokeyimage.img
} \
-body {
    set note [$logbook createNote $ron {this is note text} \
              [list hokeyimage.img] [list 5]]
    set image [lindex [$note images] 0]
    dict get $image offset
} -result 5

tcltest::test images_2.3 {Put a hokey image in the text:3} \
-setup {
    set contents "this is a hokey image"
    commonSetup
    tcltest::makeFile $contents  hokeyimage.img

} \
-cleanup {
    $note destroy
    commonCleanup
    tcltest::removeFile hokeyimage.img
} \
-body {
    set note [$logbook createNote $ron {this is note text} \
              [list hokeyimage.img] [list 5]]
    set image [lindex [$note images] 0]
    dict get $image originalFilename
} -result hokeyimage.img

tcltest::test images_2.4 {Put a hokey image in the text:4} \
-setup {
    set contents "this is a hokey image"
    commonSetup
    tcltest::makeFile $contents  hokeyimage.img

} \
-cleanup {
    $note destroy
    commonCleanup
    tcltest::removeFile hokeyimage.img
} \
-body {
    set note [$logbook createNote $ron {this is note text} \
              [list hokeyimage.img] [list 5]]
    set image [lindex [$note images] 0]
    expr {[dict get $image imageLength] == (1+[string length $contents])}
    
} -result 1

tcltest::test images_2.5 {Put a hokey image in the text:5} \
-setup {
    set contents "this is a hokey image"
    commonSetup
    tcltest::makeFile $contents  hokeyimage.img

} \
-cleanup {
    $note destroy
    commonCleanup
    tcltest::removeFile hokeyimage.img
} \
-body {
    set note [$logbook createNote $ron {this is note text} \
              [list hokeyimage.img] [list 5]]
    set image [lindex [$note images] 0]
    dict get $image imageData
} -result "this is a hokey image\n"

tcltest::test substitute_1 {Substitute images with no images does nothing} \
-setup {commonSetup} \
-cleanup {
    $note destroy
    commonCleanup
} \
-body {
    set note [$logbook createNote $ron {Note Contents}]
    $note substituteImages
} -result {Note Contents}

tcltest::test substitue_2 {Substitute images when there's an image} \
-setup {
    set contents "this is a hokey image"
    commonSetup
    tcltest::makeFile $contents  hokeyimage.img

} \
-cleanup {
    $note destroy
    commonCleanup
    tcltest::removeFile hokeyimage.img
} \
-body {
    set note [$logbook createNote $ron {t![](hokeyimage.img)his is note text} \
              [list hokeyimage.img] [list 1]]
    $note substituteImages
} -result "t!\[\]($env(HOME)/.nscl-logbook/note1_image1_hokeyimage.img)his is note text"

#----------------------------------------------------

proc tcltest::cleanupTestHook {} {
    variable numTests
    set ::exitCode [expr {$numTests(Failed) > 0}]
}


tcltest::cleanupTestHook
tcltest::cleanupTests
exit $::exitCode