<!-- manpage 1daq -->

<refentry>
    <refmeta>
        <refentrytitle>offlinereglom</refentrytitle>
        <manvolnum>1daq</manvolnum>
    </refmeta>
    <refnamediv>
        <refname>offlinereglom</refname>
        <refpurpose>Offline event rebuilder.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <cmdsynopsis>
<command>$DAQBIN/offlinereglom</command>
        </cmdsynopsis>
    </refsynopsisdiv>
    <refsect1>
        <title>DESCRIPTION</title>
        <para>
            <command>reglom</command> is a utility that has at least two use cases:
        </para>
        <orderedlist>
            <listitem>
                <para>
                    If you have an event built run with data late conditions,
                    reglom can rebuild the event file with properly ordered data.
                    This can happen with, e.g. DDAS if the <literal>FIFO_THRESHOLD</literal>
                    values are not set properly to allow for differing rates
                    in different readout systems.
                </para>
            </listitem>
            <listitem>
                <para>
                    If you find that you want to rebuild event built data using
                    a different coincidence window, reglom can do that as well.
                </para>
            </listitem>
        </orderedlist>
        <para>
            <command>reglom</command> is actually a script that accepts event
            building parameters, a run to reglom and an output file.  Reglomming
            occurs in two stages:
        </para>
        <orderedlist>
            <listitem>
                <para>
                    The input run is unglommed into event files consisting of data
                    from each of the source ids.  These files are temporary
                    and have names like <filename>sid-</filename><parameter>sid</parameter>
                    where <parameter>sid</parameter> is the input source id of
                    the data in that file.  These files are written in the
                    current working directory.  You must therefore have
                    write access to this directory and sufficient quota
                    to allow these files to be written.
                </para>
            </listitem>
            <listitem>
                <para>
                    The files generated by the unglom stage are then fed as
                    ordered fragments into the NSCLDAQ <command>glom</command>
                    command which produces, as output, the rebuilt event file.
                </para>
            </listitem>
        </orderedlist>
        <para>
            Note that while NSCLDAQ must be installed on the system running
            <command>reglom</command>, it need to be running (that is the
            servers that manage ringbuffers don't have to be running as no
            ring  buffers are created or used).
        </para>
    </refsect1>
    <refsect1>
        <title>The GUI</title>
        <para>
            <command>reglom</command> provides a GUI to steer the reglomming
            process.  The top part of the GUI accepts parameters used by glom,
            specifically the coincidence interval used to build fragments into
            events, the output sourceid and the policy used to provide timestamps
            to the output events.
        </para>
        <para>
            The middle part of the GUI allows you to select the run to reglom.
            If your run is a multi-segmented run,  choose any segment file
            in the run.  All files will be reglommed into a single output
            event file that combines all the event fragments in all segments.
            The values accepted here are saved in the file
            <filename>~/.reglom</filename>.  If that file is present,
            default values are loaded from that file, allowing you to perform
            several reglom operations using the same settings.
        </para>
        <para>
            The bottom part of the GUI allows you to select the output
            event file name.  This is the file created by reglom that will
            contain the rebuilt data.
        </para>
        <para>
            To proceed with the reglom, click the <guibutton>Ok</guibutton>
            button.  To do nothing, click <guibutton>Cancel</guibutton>.
        </para>
        <para>
            As the unglom phase runs, the script shows the size of each of the
            segment files and any messages emitted by the unglom program.
            Similarly, as the glom phase runs, the script shows how the size of the
            output file grows and any messages from the reglom/glom pipeline
        </para>
        
    </refsect1>

</refentry>

<refentry>
    <refmeta>
        <refentrytitle>timecheck</refentrytitle>
        <manvolnum>1daq</manvolnum>
    </refmeta>
    <refnamediv>
        <refname>timecheck</refname>
        <refpurpose>Check for out of order timestamps in event files</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <cmdsynopsis>
<command>$DAQBIN/timecheck <replaceable>uri</replaceable> </command>
        </cmdsynopsis>
    </refsynopsisdiv>
    <refsect1>
        <title>DESCRIPTION</title>
        <para>
            Reports out of order timestamps in an event file.  The event
            file must have timestamps in the body header of its events.
            Note that only ring items of type <literal>PHYSICS_EVENT</literal>
            are checked.
        </para>
        <para>
            <parameter>uri</parameter> is a URI that points to the source
            of data.  This can be a <literal>file</literal> or
            <literal>tcp</literal> URI.  It can also be the special value
            <literal>-</literal> which allows the program to accept data
            on its standard input.
        </para>
    </refsect1>

</refentry>

<!-- /manpage -->

