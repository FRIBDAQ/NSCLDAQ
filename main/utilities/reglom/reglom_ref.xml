<!-- manpage 1daq -->

<refentry>
    <refmeta>
        <refentrytitle>offlinereglom</refentrytitle>
        <manvolnum>1daq</manvolnum>
    </refmeta>
    <refnamediv>
        <refname>offlinereglom</refname>
        <refpurpose>Offline event rebuilder.</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <cmdsynopsis>
<command>$DAQBIN/offlinereglom</command>
        </cmdsynopsis>
    </refsynopsisdiv>
    <refsect1>
        <title>DESCRIPTION</title>
        <para>
            <command>reglom</command> is a utility that has at least two use cases:
        </para>
        <orderedlist>
            <listitem>
                <para>
                    If you have an event built run with data late conditions,
                    reglom can rebuild the event file with properly ordered data.
                    This can happen with, e.g. DDAS if the <literal>FIFO_THRESHOLD</literal>
                    values are not set properly to allow for differing rates
                    in different readout systems.
                </para>
            </listitem>
            <listitem>
                <para>
                    If you find that you want to rebuild event built data using
                    a different coincidence window, reglom can do that as well.
                </para>
            </listitem>
        </orderedlist>
        <para>
            <command>reglom</command> is actually a script that accepts event
            building parameters, a run to reglom and an output file.  Reglomming
            occurs in two stages:
        </para>
        <orderedlist>
            <listitem>
                <para>
                    The input run is unglommed into event files consisting of data
                    from each of the source ids.  These files are temporary
                    and have names like <filename>sid-</filename><parameter>sid</parameter>
                    where <parameter>sid</parameter> is the input source id of
                    the data in that file.  These files are written in the
                    current working directory.  You must therefore have
                    write access to this directory and sufficient quota
                    to allow these files to be written.
                </para>
            </listitem>
            <listitem>
                <para>
                    The files generated by the unglom stage are then fed as
                    ordered fragments into the NSCLDAQ <command>glom</command>
                    command which produces, as output, the rebuilt event file.
                </para>
            </listitem>
        </orderedlist>
        <para>
            Note that while NSCLDAQ must be installed on the system running
            <command>reglom</command>, it need to be running (that is the
            servers that manage ringbuffers don't have to be running as no
            ring  buffers are created or used).
        </para>
    </refsect1>
    <refsect1>
        <title>The GUI</title>
        <para>
            <command>reglom</command> provides a GUI to steer the reglomming
            process.  The top part of the GUI accepts parameters used by glom,
            specifically the coincidence interval used to build fragments into
            events, the output sourceid and the policy used to provide timestamps
            to the output events.
        </para>
        <para>
            The middle part of the GUI allows you to select the run to reglom.
            If your run is a multi-segmented run,  choose any segment file
            in the run.  All files will be reglommed into a single output
            event file that combines all the event fragments in all segments.
            The values accepted here are saved in the file
            <filename>~/.reglom</filename>.  If that file is present,
            default values are loaded from that file, allowing you to perform
            several reglom operations using the same settings.
        </para>
        <para>
            The bottom part of the GUI allows you to select the output
            event file name.  This is the file created by reglom that will
            contain the rebuilt data.
        </para>
        <para>
            To proceed with the reglom, click the <guibutton>Ok</guibutton>
            button.  To do nothing, click <guibutton>Cancel</guibutton>.
        </para>
        <para>
            As the unglom phase runs, the script shows the size of each of the
            segment files and any messages emitted by the unglom program.
            Similarly, as the glom phase runs, the script shows how the size of the
            output file grows and any messages from the reglom/glom pipeline
        </para>
        
    </refsect1>

</refentry>
<refentry>   <!-- Unglom-->
    <refmeta>
        <refentrytitle>Unglom (note capital U)</refentrytitle>
        <manvolnum>1daq</manvolnum>
    </refmeta>
    <refnamediv>
        <refname>Unglom (note captital U)</refname>
        <refpurpose>Break up event file into fragment flie</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <cmdsynopsis><command>
$DAQBIN/Unglom <replaceable>source-URI</replaceable>
        </command></cmdsynopsis>
    </refsynopsisdiv>
    <refsect1>
        <title>DESCRIPTION</title>
        <para>
            This command (not to be confused with
            <command>unglom</command> which you probably should be
            using instead), takes an event file that has been through
            the FRIB event builder and breaks it up into event files
            containing the fragments from each event.  Each source Id
            in the input event file will produce an output file named
            <filename>sid-</filename><replaceable>source-id</replaceable>
            with the fragments from that source id.  These files will
            be written in the current working directory.
        </para>
        <para>
            For example, suppose your events are built from sources
            with ids 1,3,5.  In that case you will get files;
            <filename>sid-1</filename>, <filename>sid-3</filename> and
            <filename>sid-5</filename>. Note the lack of an <filename>.evt</filename>
            file type/extension.
        </para>
    </refsect1>
</refentry>
<refentry>    <!-- reglom non-interactive reference  -->


    <refmeta>
        <refentrytitle>reglom</refentrytitle>
        <manvolnum>1daq</manvolnum>
    </refmeta>
    <refnamediv>
        <refname>reglom</refname>
        <refpurpose>Rebuild events offline</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <cmdsynopsis>
        <command>
$DAQBIN/reglom <option>options...</option> <replaceable>files...</replaceable>
        </command>
        </cmdsynopsis>
    </refsynopsisdiv>
    <refsect1>
        <title>DESCRIPTION</title>
        <para> 
          <command>reglom</command> is a non-GUI program that takes the event file that has
          been through the FRIBDAQ event builder, torn apart into fragment files, and  rebuilds the events using
          a different coincidence window.  This may be needed if later analysis dtermines the
          the coincidence window chosen for online data taking was incorrect.
        </para>
        <para>
            Reglom operates with <command>Unglom</command> (do not confuse this with
            <command>unglom</command> which may be simpler to use than
            <command>Unglom</command> together with <command>reglom</command>
        </para>
        <para>
            The <command>reglom</command> program accepts command line options,
            which will be described in the next section and a list of 
            fragment filenames.  Thes fragment files generally come from
            running <command>Unglom</command> over an event file that has been
            event bult.
        </para>
    </refsect1>
    <refsect1>
        <title>OPTIONS</title>
        <para>
            The options accepted by <command>reglom</command>
            determine how the fragment files are put together
            into an event built event file:
        </para>
        <variablelist>
            <varlistentry>
                <term><option>--help</option></term>
                <listitem><para>
                    Outputs brief help text to stdout and
                    exits without doing anything.
                </para></listitem>
            </varlistentry>
            <varlistentry>
                <term><option>--version</option></term>
                <listitem><para>
                    Outputs the program version string to stdout and
                    exits without doing anything.
                </para></listitem>
            </varlistentry>
            <varlistentry>
                <term><option>--dt</option><replaceable>coincidence-window</replaceable></term>
                <listitem><para>
                    The argument to this option is the number of clock
                    ticks that define the event build window.  This value
                    must be a valid positive, non-zero, integer.  There is no
                    default value.
                </para></listitem>
            </varlistentry>
            <varlistentry>
                <term><option>--timestamp-policy</option><replaceable>policy</replaceable></term>
                <listitem><para>
                    The argument to tis option determines how the timestamps
                    for built events is assigned.  It can be one of
                    <literal>earliest</literal>, <literal>latest</literal>
                    and <literal>average</literal>.  If not supplied, the default
                    value is <literal>earliest</literal>, that is the timestamp
                    of the first fragment in the built event.
                </para></listitem>
            </varlistentry>
            <varlistentry>
                <term><option>--sourceid</option><replaceable>output-source-id</replaceable></term>
                <listitem><para>
                    Defines the source id that will be assigned to output events.
                    This is normally a small counting number. If not
                    provided, the default is <literal>0</literal>
                </para></listitem>
            </varlistentry>
            <varlistentry>
                <term><option>--output</option><replaceable>filename</replaceable></term>
                <listitem><para>
                    Provides the name of the output file to be produced.
                    This has no default value.  Note that unlike event files
                    produced by the <command>eventlog</command> program,
                    output files are a single, unsegmented file.
                    There is no default value for this mandatory option.
                </para></listitem>
            </varlistentry>
        </variablelist>
    </refsect1>
</refentry>
<refentry>
    <refmeta>
        <refentrytitle>timecheck</refentrytitle>
        <manvolnum>1daq</manvolnum>
    </refmeta>
    <refnamediv>
        <refname>timecheck</refname>
        <refpurpose>Check for out of order timestamps in event files</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <cmdsynopsis>
<command>$DAQBIN/timecheck <replaceable>uri</replaceable> </command>
        </cmdsynopsis>
    </refsynopsisdiv>
    <refsect1>
        <title>DESCRIPTION</title>
        <para>
            Reports out of order timestamps in an event file.  The event
            file must have timestamps in the body header of its events.
            Note that only ring items of type <literal>PHYSICS_EVENT</literal>
            are checked.
        </para>
        <para>
            <parameter>uri</parameter> is a URI that points to the source
            of data.  This can be a <literal>file</literal> or
            <literal>tcp</literal> URI.  It can also be the special value
            <literal>-</literal> which allows the program to accept data
            on its standard input.
        </para>
    </refsect1>

</refentry>

<!-- /manpage -->

