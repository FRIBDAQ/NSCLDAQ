<!-- chapter utilities -->

<chapter id='chap.boot'>
    <title id='chap.boot.title'>The Boot utility</title>
    <para>
        The boot utilit is a program that works with the databases created by the
        <link linkend='chap.expconfig' endterm='chap.expconfig.title' /> and the
        <link linkend='chap.statemgr' endterm='chap.statemgr.title' /> to initialize
        the components that make up an experiment's data acquisition system.
        The manager comes into play in managing the transitions from the
        <literal>NotReady</literal> state through the <literal>Booting</literal>
        state and into the <literal>Ready</literal> state, if necessary, failing
        back into the <literal>NotReady</literal> state in case something bad happens.
        To understand what this means, be sure to look at:
        <link linkend='statemgr_statediagram' endterm='statemgr_statediagram_title' />.
    </para>
    <para>
        The boot utility requires the environment variables that are set by the
        <filename>$DAQROOT/daqsetup.bash</filename> script (<literal>$DAQROOT</literal>
        is the location of the top level directory of an installation of NSCLDAQ
        at version 11.0 or greater).  The boot program also requires that you
        can login to target systems via ssh without supplying a password, and
        that the version of NSCLDAQ you are using is installed on target systems
        in the same location as on the system that runs boot.
        For information on how to set up password free logins see:
        <ulink url='http://www.thegeekstuff.com/2008/11/3-steps-to-perform-ssh-login-without-password-using-ssh-keygen-ssh-copy-id/'>
            http://www.thegeekstuff.com/2008/11/3-steps-to-perform-ssh-login-without-password-using-ssh-keygen-ssh-copy-id/
        </ulink> or, if that page is no longer in existence, google for
        <literal>ssh login without password</literal> and you'll get a large
        number of pages that show how to set this up.
    </para>
    <para>
        The boot program accepts the following options:
    </para>
    <variablelist>
        <varlistentry>
            <term><option>--help</option></term>
            <listitem>
                <para>
                    Outputs some program help information.  When
                    <option>--help</option> is specified, the program
                    will exit after outputting the help message.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><option>--server</option>=<replaceable>statemgr-host</replaceable></term>
            <listitem>
                <para>
                    Specifies the host on which the state manager is running.
                    If this optional switch is omitted,the state manager is
                    assumed to be running on <literal>localhost</literal>
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><option>--state-service</option>=<replaceable>service-name</replaceable></term>
            <listitem>
                <para>
                    Specifies the service name the state manager is using to
                    publish its state and transitions.  If not supplied this
                    defaults to <literal>StatePublish</literal>
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><option>--transition-service</option></term>
            <listitem>
                <para>
                    Specifies the service name on which the state manager accepts
                    transition requests.  If not specified, this defaults to
                    <literal>StateRequest</literal>
                </para>
            </listitem>
        </varlistentry>
    </variablelist>
    <para>
        In addition to the options described above, the boot program accepts
        a sequence of experiment configuration databases.  Here's an example
        of a sequence of commands that starts up boot given that NSCLDAQ is installed
        at <filename>/usr/opt/daq/11.0</filename>:
    </para>
    <informalexample>
            <programlisting>
. /usr/opt/daq/11.0/daqsetup.bash
$DAQBIN/boot s800.experiment caesar.experiment s800-ceasar-merge.experiment
            </programlisting>
    </informalexample>
    <para>
        A few points are worth mentioning from this example.
    </para>
    <itemizedlist>
        <listitem><para>boot accepts more than one experiment database.
            This makes it simple to use it to start experiments involving
            several detectors that are merged together as shown in the
            example.
            </para>
        </listitem>
        <listitem><para>
            Boot will start create entities by looking at the databases
            from left to right.  It will destroy entities in a fairly arbitrary
            order.
            </para></listitem>
    </itemizedlist>
    <section>
        <title>Details of operation</title>
        <para>
            This section describes what the boot program actually does.  First
            recall that the experiment configuration database defines  several
            entities:
            <itemizedlist>
                <listitem><para>Hosts - computer systems in which things reside</para></listitem>
                <listitem><para>Rings - Buffers resident in hosts used to transmit
                    data from sources to sinks. 
                    Proxy rings can also be used to extend this data transmission
                    to sinks not resident on the host that contains the ringbuffer.
                </para></listitem>
                <listitem><para>Programs- Software that runs in specific computers</para></listitem>
            </itemizedlist>
            The boot program manages the creation and tear down of Rings and Programs
            at an appropriate time in the experiment.
        </para>
        <para>
            The key state transitions the boot program is interested in are
            transitions to <literal>Booting</literal> from not ready and
            transitions to <literal>NotReady</literal> from any state.
        </para>
        <para>
            The transtion to <literal>Booting</literal> tells the boot manager
            it's time to create the entities required by its experiment
            databases.  Once all entities have been successfully created the boot manager
            requests that the state manager transition to the
            <literal>Ready</literal> state.  A failure to start/create any entity
            results in a request that the state manager transition back to the
            <literal>NotReady</literal>state.
        </para>
        <para>
            The transition to <literal>NotReady</literal> means
            its time to destroy the entities that still exist, ensuring the
            next transition to <literal>Booting</literal> does not carry
            any baggage from the last time around. 
        </para>
        <para>
            Note that the databases are consulted on each start so there's
            no need to restart the boot manager if you reconfigure the experiment.
        </para>
        <section>
            <title>Booting the experiment</title>
            <para>
                When the boot program becomes aware that the state manager is in
                the <literal>Booting</literal> state it iterates over the
                databases that were supplied to its command line twice.  Both
                iterations are from left to right in command line order.
            </para>
            <para>
                In the first iteration, the boot program creates ring buffers as
                defined by the databases.  This comes first because there's an
                assumption that programs may need these rings to exist.  The order
                in which this is done is from left to right on the command line and
                in order of increasing ringbuffer id within each database.  In general,
                the order in which ring buffers are created is not important, however.
                They are the communications infrastructure that tie the experiment
                data flow togehter.  As ring buffers are created they are
                memorized by the boot manager.
            </para>
            <para>
                In the second iteration, the boot program starts the programs
                defined by the experiment configuration databases.
                The databases are again processed from left to right as they
                appear on the command line and within each database, programs
                are started in program id order.  If any program cannot be
                started, the boot manager gives up and initiates a state
                transition back to the <literal>NotReady</literal> state.
                The assumption is that all programs are needed for the system
                to work.
            </para>
            <para>
                Once all programs are successfully started, the boot manager
                initiates a state transition to <literal>Ready</literal>. The
                assumption is that at this time, users can start taking data.
                The boot manager remembers which programs it started, and the
                order in which they were started.
            </para>
        </section>
        <section>
            <title>After the experiment is booted</title>
            <para>
                Each program the boot manager starts is started in a wrapper
                process that is able to know if the program exits (normally
                or abnormally).  If any program exits, the experiment software
                is assumed to be failing and the boot manager initiates
                a transition to <literal>NotReady</literal> (see the next section
                for what this triggers).
            </para>
            <para>
                The initial version of the boot manager is also capturing
                output and error from the processes and displays that (not very nicely)
                to its stdout.
            </para>
        </section>
        <section>
            <title>Shutting down the experiment</title>
            <para>
                When the boot manager detects a transition to <literal>NotReady</literal>,
                for any reason,  it will destroy the remaining entities.  The
                order in which this is done is in the reverse order of entity
                creation.
            </para>
            <para>
                First the boot manager will shut down the programs it started.
                This is done is three steps, each step is performed in the reverse
                order of the startup of the remaining program.
                <orderedlist>
                    <listitem><para>
                        There may be some programs that are aware of the
                        state manager.  The boot manager sleeps for a few
                        seconds to give those programs time to become aware
                        of the state manager's transtion to <literal>NotReady</literal>
                        and to do what they need to cleanly exit.
                        </para></listitem>
                    <listitem><para>
                        Other programs may accept an <command>exit</command> command.
                        This string is pushed into the stdin of all remaining
                        programs and, once more, time is given for them all
                        to exit.
                        </para></listitem>
                    <listitem><para>
                        Finally a <literal>Control-C</literal> interrupt is
                        sent to all remaining programs.  Programs can catch this
                        signal and use that catch to exit gracefully if desired.
                        </para></listitem>
                </orderedlist>
            </para>
        </section>
    </section>
</chapter>
<!-- /chapter -->

<!-- manpage 1daq -->
      <refentry id="daq1_boot">
        <refmeta>
           <refentrytitle id="daq1_boot_title">boot</refentrytitle>
           <manvolnum>1daq</manvolnum>
        </refmeta>
        <refnamediv>
           <refname>boot</refname>
           <refpurpose>Start and stop experiment components.</refpurpose>
        </refnamediv>
        
        <refsynopsisdiv>
          <cmdsynopsis>
              <command>
$DAQBIN/boot <optional>options...</optional> <replaceable>databases....</replaceable>
          </command>
          </cmdsynopsis>

        </refsynopsisdiv>
        <refsect1>
           <title>DESCRIPTION</title>
           <para>
            The boot program works with the state manager and experiment
            configuration editor to
            create and destroy entities that are needed for an experiment's
            data acquisition system.  The <replaceable>databases...</replaceable>
            parameters area  list of experiment databases edited by the
            experiment configuration editor that define the components needed
            by the experiment and in which nodes they should be instantiated.
           </para>
           <para>
            Whenever the state manager declares a transition to the
            <literal>Booting</literal> state, the boot program processes
            databases from left to right on the command line creating the
            components specified in all databases.
            Similarly when the state manager declares a transition to the
            <literal>NotReady</literal> state, the boot program destroys
            the entities that still remain.
           </para>
           <para>
            After creating all entities successfully, the boot program
            requests a transition to the <literal>Ready</literal> state.
            If the creation of any entity failed, the boot program
            requests a transition to <literal>NotReady</literal> which  in turn
            will eventually make the boot program destroy any entities created
            so far.
           </para>
           <para>
            The programs started by the boot program are monitored.  If they
            exit, the boot program declares a state transition to
            <literal>NotReady</literal>.  Once this state has been entered,
            as usual, the boot program will stop all remaining programs.
            and destroy any ringbuffers it created.
           </para>
        </refsect1>
        <refsect1>
           <title>
              OPTIONS
           </title>
           <variablelist>
            <varlistentry>
                <term><option>--help</option>, <option>-h</option></term>
                <listitem>
                    <para>
                        Outputs a help message to stdoput and exits.
                        If this option appears on the command line it is the
                        only one interpreted.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><option>--version</option> <option>-v</option></term>
                <listitem>
                    <para>
                        Outputs the program version and brief usage information
                        on stdout.  If this option is used with others (besides
                        <option>--help</option>), it is the only one interpreted.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><option>--server</option>=<replaceable>host-name</replaceable>,
                    <option>-n</option> <replaceable>host-name</replaceable>
                </term>
                <listitem>
                    <para>
                        Specifies the name of the host in which the state manager
                        is running.   If not provided, the value of this option
                        defaults to <literal>localhost</literal>; the same system
                        that is running boot.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><option>--state-service</option>=<replaceable>StateServiceName</replaceable>,
                <option>-s</option> <replaceable>StateServiceName</replaceable></term>
                <listitem>
                    <para>
                        Specifies the service name the state manager is using
                        to publish state and transition information.  This
                        service name is looked up on the state manager's host
                        using the port manager.  If not provided, this defaults to
                        <literal>StatePublish</literal> which is the default
                        service name used by the state manger.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><option>--transition-service</option>=<replaceable>TransitionRequestServiceName</replaceable>,
                    <option>-t</option> <replaceable>TransitionRequestServiceName</replaceable></term>
                <listitem>
                    <para>
                        Specifies the service name the state manager is using
                        to accept state transition requests.  This service name
                        is looked up using the port manager running in the
                        state manager's host.  If this optional switch is not
                        used, the default value for this service name is
                        <literal>StateRequest</literal> which is the default
                        service name used by the state manager for this
                        function.
                    </para>
                </listitem>
            </varlistentry>
            
           </variablelist>
        </refsect1>

      </refentry>

<!-- /manpage -->