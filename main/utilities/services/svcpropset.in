#!/bin/sh
# -*- tcl -*-
# The next line is executed by /bin/sh, but not tcl \
exec tclsh "$0" ${1+"$@"}

#    This software is Copyright by the Board of Trustees of Michigan
#    State University (c) Copyright 2014.
#
#    You may use this software under the terms of the GNU public license
#    (GPL).  The terms of this license are described at:
#
#     http://www.gnu.org/licenses/gpl.txt
#
#    Authors:
#             Ron Fox
#             Jeromy Tompkins 
#	     NSCL
#	     Michigan State University
#	     East Lansing, MI 48824-1321



##
# @file svcpropset
# @brief Set property values for a service program.
# @author Ron Fox <fox@nscl.msu.edu>
#

##
# Service properties are arbitrary variables that are in the same directory
# as the service itself.  These can be used by the service to parameterize
# its operation.
#
#  Usage:
#     svcpropset uri program-name action params...
#
#  Where:
#     uri          - is the uri defining how the database connection is made.
#     program-name - is the name of an existing service program.
#     action       - is an action verb that is one of: 'create'
#                    (create a property) or 'set' (set the value of an existing
#                     property).
#     params - are additional parameters that depend on the action:
#                     create:  prop-name type ?initial-value?
#                     set:     prop-name new value.
#

lappend auto_path [file join [file dirname [info script]] .. TclLibs]
package require daqservices
package require varmgr
##
# usage
#   Outputs the usage to stderr and exits with failure code.
#
proc usage {} {
    puts stderr "Usage:"
    puts stderr "    svcpropset uri program-name action params..."
    puts stderr "Where:"
    puts stderr "    uri           - is a URI that defines the database connection"
    puts stderr "    program-name  - is the name of the service affected."
    puts stderr "    action        - is the action to perfor: 'create', 'set'"
    puts stderr "create action parameters (create a new property):"
    puts stderr "     prop-name    - name of property (variable)"
    puts stderr "     type         - Data type"
    puts stderr "     ?value?      - If provided the initial value of the property"
    puts stderr "set action parameters (change property value):"
    puts stderr "     prop-name    - Name of the property"
    puts stderr "     value        - New property."
    exit -1
}

##
# create
#   Create a new property.
#   The property goes in Services/programname/prop-name.
#
# @param uri     - Request URI for the database.
# @param program - Program name.
# @param tail    - list containing unconsumed parameters.
#
proc create {uri program tail} {
    if {[llength $tail] < 2} {
        puts stderr "Insufficient parameters for create operation"
        usage
    }
    set propname [lindex $tail 0]
    set proptype [lindex $tail 1]
    set varname   [file join /Services $program $propname]
    set handle [varmgr::open $uri]
    varmgr::var create $handle $varname $proptype
    if {[llength $tail] > 2} {
        set value [lindex $tail 2]
        varmgr::var set $handle $varname $value
    }
    varmgr::close $handle
}

##
# propset
#
#   Set the value of a program property
#
# @param uri     - URI of request db.
# @param program - name of program.
# @param tail    - unconsumed part of command.
#
proc propset {uri program tail} {
    if {[llength $tail] != 2} {
        puts stderr "Insufficient parameters for property set"
        usage
    }
    set propname [lindex $tail 0]
    set value     [lindex $tail 1]
    set handle [varmgr::open $uri]
    
    set varname [file join /Services $program $propname]
    varmgr::var set $handle $varname $value
    
    varmgr::close $handle
}

##
# we need more than 3 parameters:

if {[llength $argv] < 4} {
    usage
}

set uri     [lindex $argv 0]
set program [lindex $argv 1]
set action  [lindex $argv 2]

#  Instantiate the api, check that program exists and that action
#  is legal.


nscldaq::services api $uri
if {$program ni [api listall]} {
    puts stderr "$program does not exist"
    exit -1
}

if {$action ni {create set}} {
    puts stderr "$action must be either 'create' or 'set'"
    exit -1
}

#  Dispatch based on the action:

if {$action eq "create"} {
    create $uri $program [lrange $argv 3 end]
} else {
    propset $uri $program [lrange $argv 3 end]
}