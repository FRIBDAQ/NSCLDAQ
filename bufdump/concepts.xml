<?xml version="1.0" encoding="UTF-8"?>


<chapter id="chap2">
    <title>Introduction to bufdump concepts</title>
    <para>
        This chapter introduces several bits of terminology
        that you will encounter as you read the remainder of the
        bufdump documentation.   If you are pretty sure you
        will understand the program without this explanatory
        chapter, feel free to skip ahead, returning here to clarify
        the meaning of terms that you may not understand.
    </para>
    <para>
        In this chapter you will learn about:
        <itemizedlist>
            <listitem>
                <para>Data sources</para>
            </listitem>
            <listitem>
                <para>Bit patterns</para>
            </listitem>
            <listitem>
                <para>Buffer filters</para>
            </listitem>
            <listitem>
                <para>Search patterns</para>
            </listitem>
            <listitem><para>Packets and packet definition files</para>
            </listitem>
            <listitem><para>Plugins</para></listitem>
        </itemizedlist>
    </para>
    <sect1>
        <title>Data sources</title>
        <para>
            Bufdump must have a source of buffers to format.
            In this manual, sources of buffers will be called
            <firstterm>Data Sources</firstterm>. Event sources can be one of
            the following two types:
            <variablelist>
                <varlistentry>
                    <term><firstterm>Offline</firstterm></term>
                    <listitem>
                        <para>Offline event sources are simply event data
                        files that have been acquired by the NSCL
                        data acquisition system.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><firstterm>Online</firstterm></term>
                    <listitem>
                        <para>Online event sources are computers that
                        are currently taking data.   Note that
                        the time it takes to request a buffer from an
                        online data source will depend on how quickly
                        the readout program is producing buffers.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </para>
        <para>
            Event sources are opened by using the
            <menuchoice>
                <guimenu>File</guimenu>
                <guimenuitem>Open...</guimenuitem>
            </menuchoice>
            command.  This command is described in
            detail in <link linkend="chap3">Chapter 3: The file menu</link>.
        </para>
    </sect1>
    <sect1>
        <title>Bit patterns</title>
        <para>
            Bit patterns are used to specify both <firstterm>filters</firstterm>
            and <firstterm>search patterns</firstterm>.  Both of these
            terms are described later in this chapter.
        </para>
        <para>A bit pattern is 16 bits that can have any of three states:
            <variablelist>
                <varlistentry>
                    <term>1</term>
                    <listitem><para>
                                Requires a matching word to have a 1 in that bit
                                position.
                                </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>0</term>
                    <listitem><para>
                                Requires a matching word to have a 0 in that
                                bit position
                              </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>x</term>
                    <listitem><para>
                                Specifies that you don't care what the value
                                of that bit position is.
                              </para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </para>
        <para>
            Normally bit patterns come in sets.  A bit pattern set can either
            represent a group of bit patterns, any of which can match to trigger
            the filter or search match, or a sequence, which requires a sequence
            of words in the buffer to sequentially match all the
            bit patterns in the set to trigger the filter or
            search.
        </para>
    </sect1>
    <sect1>
        <title>Buffer filters</title>
        <para>
            Buffer filters allow bufdump to skip buffers that don't match
            a desired filter criterion.  The filter criterion is
            defined using the
            <menuchoice>
                <guimenu>Filter</guimenu>
                <guimenuitem>Filter...</guimenuitem>
            </menuchoice>
            command.  This command is described in detail in
            <link linkend="chap4">Chapter 4: the Filter menu</link>
        </para>
        <para>
            Buffer filters can restrict the type of buffer that is
            processed, as well as require a bit pattern match to occur
            in the body of a buffer.  If you think of bufdump as a logic
            analyzer for NSCL DAQ buffers, you can think of the
            buffer filter criterion as the trigger for that logic analyzer.
        </para>
    </sect1>
    <sect1>
        <title>Search patterns</title>
        <para>
            Search patterns and buffer filters are closely related.
            Both are used to limit the amount of data you must wade through
            to locate the data you are interested in.
        </para>
        <para>
            While buffer filters prevent you from seeing buffers that don't match
            the filter criterion, search patterns enable you to locate patterns
            in buffers that have matched the filter.  Search strings can be
            either textual or bit patterns.
            Search patterns are established with the
            <menuchoice>
                <guimenu>Filter</guimenu>
                <guimenuitem>Search...</guimenuitem>
            </menuchoice> command, and once established, can be executed
            again using the
            <menuchoice>
                <guimenu>Filter</guimenu>
                <guimenuitem>Next</guimenuitem>
            </menuchoice>
            command.
        </para>
        <para>
            Text search patterns can search for exact string matches in the
            data that is displayed by bufdump.  They can also match
            <emphasis>regular expressions</emphasis>.  A regular expression
            is a string that can itself specify a wide variety of matching
            conditions.  The syntax of regular expressions is powerful and
            complex.  A discussion of regular expression syntax is beyond the
            scope of this manual.  Look at either the
            unix man page regex(7), or Tcl book
            sections describing the regexp Tcl command for more information
            about the structure of regular expressions.
        </para>
        <para>
            Bit pattern searches can be a collectionof bit patterns, any of which
            may cause a match or a sequence of bit patterns, all of which must
            be matched in the order specified.
        </para>
    </sect1>
    <sect1>
        <title>Packets and packet definition files</title>
        <para>
            The NSCL Data acquisition system must often incorporate
            data from several supported devices into a single event.
            In order to allow the maintainers of these devices to
            independently build and maintain data acquisition and analysis
            software for their devices, the NSCL has adopted a self describing
            format for the body of an event that allows code to recognize the
            sections of an event it is responsible for and ignore sections of
            the event it does not know about.
        </para>
        <para>
            The core of this self describing structure is the
            <firstterm>packet</firstterm>
            structure.  A packet is a segment of an event that is created
            by a logical part of the readout program and can be analyzed
            independently by an event processor registered in SpecTcl.
            The format of a packet is shown below:
            <informaltable>
                <tgroup cols="2">
                    <thead>
                        <row>
                            <entry>Word</entry>
                            <entry>Contents</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>Size</entry>
                            <entry>Self inclusive packet word count</entry>
                        </row>
                        <row>
                            <entry>Id</entry>
                            <entry>Describes what packet contains</entry>
                        </row>
                        <row>
                            <entry><replaceable>Body</replaceable></entry>
                            <entry><replaceable>Body - 2</replaceable> words of
                                    packet data</entry>
                        </row>
                    </tbody>
                </tgroup>
            </informaltable>
        </para>
        <para>
            The <firstterm>id</firstterm> of a packet identifies what the packet
            body contains (e.g. data from the Segmented Germanium Array SeGA).
            Daniel Bazin <email>bazin@nscl.msu.edu</email> maintains
            a registry of these ids.  If you want to allocate a new id
            for a device you are constructing, contact him.  The current
            id registry is available online at at
            <ulink url="http://groups.nscl.msu.edu/userinfo/daq/nscltags.html">
            the NSCL user information website </ulink> where they are
            referred to as <firstterm>tags</firstterm>
        </para>
        <para>
            As far as bufdump is concerned, the significance of this packet
            structure is that if it knows the packet id assignments, it can
            represent the body of each event as a series of packets.
            This representation can identify by name the packets
            in each event.
        </para>
        <para>
            Bufdump
            uses three mechanisms to learn about the packet id assignments:
            <itemizedlist>
                <listitem><para>A system wide packet definition file
                            describes the packet id assignments known at the
                            time the program is distributed.  This file
                            is automatically read in by bufdump when it starts.
                          </para></listitem>
                <listitem><para>If an event file was written using the
                            production readout skeleton, and the author(s)
                            of the readout program used the
                            <classname>CDocumentedPacket</classname> class to
                            manage the production of their event packets,
                            the event file will contain additional documentation
                            buffers which describe the packets used.  If bufdump
                            encounters one of these, in addition to formatting the
                            buffer, it adds any packet definitions that are not
                            already known to its internal database of packet
                            types.
                          </para></listitem>
                <listitem><para>User written packet definition files can be
                            manually read in by the program.  The format
                            of these files is described in
                            <link linkend="chap6">Chapter 6: Extending bufdump
                            </link>.  How to read them in is described
                            in <link linkend="chap3">Chapter 3: The File menu
                            </link>.
                          </para>
                </listitem>
            </itemizedlist>
        </para>
    </sect1>
    <sect1>
        <title>Plugins</title>
        <para>
            Plugins are a concept that is closely related to packets and
            packet definition files desribed in the previous section.
            When bufdump encounters a known packet, it displays a formatted
            version of the header that give the packet id, packet size, and
            the name of the device the packet came from.  By default, however,
            the body of the packet is dumped as just a set of hexadecimal
            numbers.
        </para>
        <para>
            Since the body of each packets type is
            by the physicist that produced its readout code,
            bufdump cannot know how to format packet bodies.  Device physicsts,
            however may write plugins that can produce a meaningful
            formatted dump of the packet.
            Plugins are Tcl code which, when integrated with bufdump,  allow
            it to display the body of a known packet in a more
            meaningful format.
            <link linkend="chap3">Chapter 3: The File menu
            </link> describes
            how to incorporate a plugin in to bufdump.  If you
            want to write a plugin refer to:
            <link linkend="chap6">Chapter 6: Extending bufdump</link>.
        </para>
    </sect1>
</chapter>
