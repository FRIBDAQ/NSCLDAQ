
# Process this file with autoconf to produce a configure script.
AC_PREREQ(2.59)

AC_INIT(CVMUSB.h)
AC_CONFIG_AUX_DIR(config)
AM_CONFIG_HEADER(config.h)

#    Separate device libraries.

AM_INIT_AUTOMAKE(vmusb, 1.0)  

#
#   The variable below should track the
#   version number above to ensure that
#   all the .so's get appropriately versioned:
#
SOVERSION="1:0"


#  Checks for parameters:

#  Compute the system type:
#  We can only build on linux-gnu  
#  We also have restrictions  on the versions for the drivers.
#


AC_MSG_CHECKING([operating system ])

AC_CANONICAL_HOST

if test "$host_os" == "linux-gnu"
then
   kernel_full_version="$(uname -r)"
   kernel_version="$(echo $kernel_full_version | cut -f1,2 -d.)"
   AC_MSG_RESULT([Building on $host_os kernel $kernel_version])   
else
   AC_MSG_ERROR([This software can only be built on linux-gnu not $host_os])
fi



# Checks for programs.
AC_PROG_AWK
AC_PROG_CXX
AC_PROG_CC
AC_PROG_CPP
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_LIBTOOL
AC_PATH_PROG(DOXYGEN, doxygen, echo)

# Documentation tools:

AC_PROG_LN_S
AC_PATH_PROG(HCDOCBOOK,   docbook2dvi,  echo)
AC_PATH_PROG(HTMLDOCBOOK, docbook2html, echo)
AC_PATH_PROG(DVIPDF,      dvipdf,       echo)
AC_PATH_PROG(MANDOCBOOK,  xmlto,        echo)



#  Needed components for hyperlatex


AC_PATH_PROG(MANDB, mandb, echo)
AC_PATH_PROG(HYPERLATEX, hyperlatex, echo)	
AC_CHECK_PROG(HAVELATEX,  latex, yes, no)		
AC_CHECK_PROG(HAVEDVIPS,  dvips, yes, no)		
AC_CHECK_PROG(HAVEKPATHSEA, kpsewhich, yes, no)	


AC_PROG_GCC_TRADITIONAL

# Checks for header files.

AC_HEADER_STDC
AC_CHECK_HEADERS([stdint.h string.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_OFF_T
AC_TYPE_SIZE_T

# Checks for library functions.

AC_CHECK_FUNCS([strerror])



#  We now look for cppunit.  This is needed to build c++ tests
#  If it is available, we'll define the following:
#  CPPUNIT   - Indicating to the Makefiles to enable building the tests.
#  CPPUNIT_INCLUDES - Any switches needed at compile time for cppunit.
#  CPPUNIT_LDFLAGS  - Any switches needed at link time for cppunit.
#
#

	AC_LANG_PUSH(C++)
	AC_MSG_CHECKING([for cppunit unit testing framework])

	AC_CHECK_HEADERS([cppunit/Test.h], [havecppunit="yes"], [havecppunit="no"])
	AC_MSG_RESULT([$havecppunit])
	if test "$havecppunit" == "yes"
	then
		CPPUNIT_INCLUDES=""
		CPPUNIT_LDFLAGS="-lcppunit -ldl"
		AC_SUBST(CPPUNIT_INCLUDES)
		AC_SUBST(CPPUNIT_LDFLAGS)
         fi
         AC_LANG_POP(C++)


#  We require an installation of libusb.... we'll
#  hunt in the following locations:
#   Headers:   /usr/include /usr/local/include --with-usb-headerdir=xxxx
#   Library:   /lib /usr/lib /usr/local/lib     --with-usb-libdir=xxxx
#  
#  If we don't fail, this will result in
#     USBSWITCHES
#     USB_LIBS
#
#  Where USBSWITCHES will be added to STD_DEFINES_AND_INCLUDES.
#
headerdirs="/usr/include /usr/local/include"
libdirs="/lib /usr/lib /usr/local/lib"

usbheaderdir=""
usblibdir=""

AC_MSG_CHECKING([for libusb headers])
AC_ARG_WITH(usb-headerdir,
	[   --with-usb-headerdir=Path to usb.h],
	[usbheaderdir=$withval],[])

if test "$usbheaderdir" == ""
then
   for dir in $headerdirs
   do
      if test "$usbheaderdir" == ""
      then
         AC_CHECK_FILE([$dir/usb.h],
	               [usbheaderdir=$dir])
      fi
   done
fi

if test "$usbheaderdir" != ""
then
	USBSWITCHES="-I${usbheaderdir}"
	AC_MSG_RESULT([found in $usbheaderdir])
else
	AC_MSG_ERROR([Can't find usb.h install libusb development or try using --with-tcl-header-dir to help me find it])
fi

AC_MSG_CHECKING([for libusb library]) 
AC_ARG_WITH(usb-libdir,
	[   --with-usb-libdir=Path to libusb.a],
	[usblibdir=$withval],[])

if test "$usblibdir" == ""
then	
   for dir in $libdirs
   do	
      if test "$usblibdir" == ""
      then
         AC_CHECK_FILE([$dir/libusb.a],
		       [usblibdir=$dir])
      fi
   done
fi

if test "$usblibdir" != "" 
then
   USB_LIBS="-L${usblibdir} -lusb"
   AC_MSG_RESULT([found in $usblibdir])
else
   AC_MSG_ERROR([Can't find libusb.a install libusb or try using --with-usb-libdir to tell me where to find it])
fi



# define substitutions:

  # libusb:

AC_SUBST(USBSWITCHES)
AC_SUBST(USB_LIBS)

	# Hyperlatex:

AC_SUBST(HYPERLATEX)
AC_SUBST(LATEX)
AC_SUBST(DVIPS)


#   The base part of the .so version:

AC_SUBST(SOVERSION)

# Documentation tools

AC_SUBST(HCDOCBOOK)
AC_SUBST(DVIPDF)
AC_SUBST(MANDOCBOOK)
AC_SUBST(HTMLDOCBOOK)

# CPPUNIT testing:

AC_SUBST(CPPUNIT_INCLUDES)
AC_SUBST(CPPUNIT_LDFLAGS)


#  Create output files:

AC_OUTPUT( Makefile)
