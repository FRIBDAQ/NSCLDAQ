<!-- manpage 3daq -->

<refentry id="daq3_cvardbeventbuilder">
  <refentryinfo>
    <author>
        <personname>
            <firstname>Ron</firstname>
            <surname>Fox</surname>
        </personname>
    </author>
    <productname>NSCLDAQ</productname>
    <productnumber></productnumber>
  </refentryinfo>
  <refmeta>
     <refentrytitle id="daq3_cvardbeventbuilder_title">CVardbEventBuilder</refentrytitle>
     <manvolnum>3daq</manvolnum>
         <refmiscinfo class='empty'></refmiscinfo>
  </refmeta>
  <refnamediv>
     <refname>CVardbEventBuilder</refname>
     <refpurpose>C++ API to variable database description of event builder/sources</refpurpose>
  </refnamediv>
  
  <refsynopsisdiv>
   <synopsis>
#include &lt;CVardbEventBuilder.h&gt;
class <ooclass><classname>CVardbEventBuilder</classname></ooclass>
{
public:
    typedef enum _TimestampPolicy {
        earliest, latest, average
    } TimestampPolicy;
    
    typedef struct _EvbDescription {
        std::string     s_name;
        std::string     s_host;
        unsigned        s_coincidenceInterval;
        std::string     s_servicePrefix;
        std::string     s_serviceSuffix;
        bool            s_build;
        unsigned        s_sourceId;
        TimestampPolicy s_timestampPolicy;
        
    } EvbDescription, *pEvbDescription;
    
    typedef struct _DsDescription {
        std::string   s_name;
        std::string   s_host;
        std::string   s_path;
        std::string   s_info;
        std::vector&lt;unsigned&gt; s_ids;
        std::string   s_ringUri;
        bool          s_expectBodyheaders;
        unsigned      s_defaultId;
        std::string   s_timestampExtractor;
        
    } DsDescription, *pDsDescription;
    

public:
<constructorsynopsis>
   <methodname>CVardbEventBuilder</methodname>
   <methodparam>
    <modifier>const </modifier><type>char* </type>
        <parameter>uri</parameter>
   </methodparam>
</constructorsynopsis>
<methodsynopsis>
    <modifier></modifier>
    <type>bool </type>
    <methodname>schemaExists</methodname>
    <void />
</methodsynopsis>  
<methodsynopsis>
    <modifier></modifier>
    <type>void </type>
    <methodname>createSchema</methodname>
    <void />
</methodsynopsis>  
<methodsynopsis>
    <modifier></modifier>
    <type> void </type>
    <methodname>createEventBuilder</methodname>
    <methodparam>
        <modifier>const </modifier><type>char*</type>
            <parameter> name</parameter>
    </methodparam>
    <methodparam>
        <modifier>const</modifier><type> char* </type>
            <parameter>host</parameter>
    </methodparam>
    <methodparam>
        <modifier></modifier><type>unsigned </type>
            <parameter>coincidenceInterval</parameter>
    </methodparam>
    <methodparam>
      <modifier>const</modifier><type>char*</type>
        <parameter>outRing</parameter>
    </methodparam>
    <methodparam>
        <modifier></modifier><type>unsigned </type>
            <parameter>outputSourceId</parameter>
            <initializer> 0</initializer>
    </methodparam>
    <methodparam>
        <modifier>const </modifier><type>char* </type>
            <parameter>servicePrefix </parameter>
            <initializer>"ORDERER"</initializer>
    </methodparam>
    <methodparam>
        <modifier></modifier><type>bool </type>
            <parameter>build </parameter>
            <initializer>true</initializer>
    </methodparam>
    <methodparam>
        <modifier></modifier><type>TimestampPolicy </type>
            <parameter>tsPolicy </parameter>
            <initializer> earliest</initializer>
    </methodparam>
    <methodparam>
        <modifier>const </modifier><type>char* </type>
            <parameter>serviceSuffix</parameter>
            <initializer>""</initializer>
    </methodparam>
    <modifier></modifier>
</methodsynopsis>
<methodsynopsis>
    <modifier></modifier>
    <type>void </type>
    <methodname>evbSetEditorPosition</methodname>
    <methodparam>
      <modifier>const </modifier><type>char* </type>
        <parameter>name</parameter>
    </methodparam>
    <methodparam>
      <modifier></modifier><type>int </type>
        <parameter>x</parameter>
    </methodparam>
    <methodparam>
      <modifier></modifier><type>int </type>
        <parameter>y</parameter>
    </methodparam>
    <modifier></modifier>
</methodsynopsis>  
<methodsynopsis>
    <modifier></modifier>
    <type>int </type>
    <methodname>evbGetEditorXPosition</methodname>
    <methodparam>
      <modifier>const </modifier><type>char* </type>
        <parameter>name</parameter>
    </methodparam>
    <modifier></modifier>
</methodsynopsis>      
<methodsynopsis>
    <modifier></modifier>
    <type>int </type>
    <methodname>evbGetEditorYPosition</methodname>
    <methodparam>
      <modifier>const </modifier><type>char*</type>
        <parameter> name</parameter>
    </methodparam>
    <modifier></modifier>
</methodsynopsis>      
    

<methodsynopsis>
    <modifier></modifier>
    <type>void </type>
    <methodname>evbSetHost</methodname>
    <methodparam>
        <modifier>const </modifier><type>char* </type>
            <parameter>name</parameter>
    </methodparam>
    <methodparam>
        <modifier>const </modifier><type>char* </type>
            <parameter>newHost</parameter>
    </methodparam>
    <modifier></modifier>
</methodsynopsis>  
<methodsynopsis>
    <modifier></modifier>
    <type>void </type>
    <methodname>evbSetCoincidenceInterval</methodname>
    <methodparam>
        <modifier>const </modifier><type>char* </type>
            <parameter>name</parameter>
    </methodparam>
    <methodparam>
        <modifier></modifier><type>unsigned </type>
            <parameter>newInterval</parameter>
    </methodparam>
    <modifier></modifier>
</methodsynopsis>
<methodsynopsis>
    <modifier></modifier>
    <type>void</type>
    <methodname>evbSetRing</methodname>
    <methodparam>
      <modifier>const</modifier><type>char*</type>
        <parameter>name</parameter>
    </methodparam>
    <methodparam>
      <modifier>const</modifier><type>char*</type>
        <parameter>ring</parameter>
    </methodparam>
    <modifier></modifier>
</methodsynopsis>  
<methodsynopsis>
    <modifier></modifier>
    <type>void </type>
    <methodname>evbSetSourceId</methodname>
    <methodparam>
        <modifier>const </modifier><type>char* </type>
            <parameter>name</parameter>
    </methodparam>
    <methodparam>
        <modifier></modifier><type>unsigned </type>
            <parameter>newSourceId</parameter>
    </methodparam>
    <modifier></modifier>
</methodsynopsis>  
<methodsynopsis>
    <modifier></modifier>
    <type>void </type>
    <methodname>evbSetServicePrefix</methodname>
    <methodparam>
        <modifier>const </modifier><type>char* </type>
            <parameter>name</parameter>
    </methodparam>
    <methodparam>
        <modifier>const </modifier><type>char* </type>
            <parameter>newPrefix</parameter>
    </methodparam>
    <modifier></modifier>
</methodsynopsis>  
<methodsynopsis>
    <modifier></modifier>
    <type>void </type>
    <methodname>evbEnableBuild</methodname>
    <methodparam>
        <modifier>const </modifier><type>char* </type>
            <parameter>name</parameter>
    </methodparam>
    <modifier></modifier>
</methodsynopsis>
<methodsynopsis>
    <modifier></modifier>
    <type>void </type>
    <methodname>evbDisableBuild</methodname>
    <methodparam>
        <modifier>const </modifier><type>char* </type>
            <parameter>name</parameter>
    </methodparam>
    <modifier></modifier>
</methodsynopsis>  
<methodsynopsis>
    <modifier></modifier>
    <type>void </type>
    <methodname>evbSetTimestampPolicy</methodname>
    <methodparam>
        <modifier>const </modifier><type>char* </type>
            <parameter>name</parameter>
    </methodparam>
    <methodparam>
        <modifier></modifier><type>TimestampPolicy </type>
            <parameter>newPolicy</parameter>
    </methodparam>
    <modifier></modifier>
</methodsynopsis>
<methodsynopsis>
    <modifier></modifier>
    <type>void </type>
    <methodname>evbSetServiceSuffix</methodname>
    <methodparam>
        <modifier>const </modifier><type>char* </type>
            <parameter>name</parameter>
    </methodparam>
    <methodparam>
        <modifier>const </modifier><type>char* </type>
            <parameter>newSuffix</parameter>
    </methodparam>
    <modifier></modifier>
</methodsynopsis>  
<methodsynopsis>
    <modifier></modifier>
    <type>void </type>
    <methodname>rmEventBuilder</methodname>
    <methodparam>
        <modifier>const </modifier><type>char* </type>
            <parameter>name</parameter>
    </methodparam>
    <modifier></modifier>
</methodsynopsis>  
<methodsynopsis>
    <modifier></modifier>
    <type>EvbDescription </type>
    <methodname>evbInfo</methodname>
    <methodparam>
        <modifier>const </modifier><type>char* </type>
            <parameter>name</parameter>
    </methodparam>
    <modifier></modifier>
</methodsynopsis>  
<methodsynopsis>
    <modifier></modifier>
    <type>std::vector&lt;EvbDescription&gt; </type>
    <methodname>listEventBuilders</methodname>
    <void />
    <modifier></modifier>
</methodsynopsis>  
<methodsynopsis>
    <modifier></modifier>
    <type>void </type>
    <methodname>addDataSource</methodname>
    <methodparam>
        <modifier>const </modifier><type>char* </type>
            <parameter>evbName</parameter>
    </methodparam>
    <methodparam>
        <modifier>const </modifier><type>char* </type>
            <parameter>srcName</parameter>
    </methodparam>
    <methodparam>
        <modifier> const </modifier><type>char* </type>
            <parameter>host</parameter>
    </methodparam>
    <methodparam>
        <modifier> const </modifier><type>char* </type>
            <parameter>path</parameter>
    </methodparam>
    <methodparam>
        <modifier>const</modifier><type> char* </type>
            <parameter>ringUri</parameter>
    </methodparam>
    <methodparam>
        <modifier></modifier><type>std::vector&lt;unsigned&gt; </type>
            <parameter>ids</parameter>
    </methodparam>
    <methodparam>
        <modifier>const </modifier><type>char* </type>
            <parameter>info</parameter>
            <initializer>""</initializer>
    </methodparam>
    <methodparam>
        <modifier></modifier><type>bool </type>
            <parameter>expectBodyHeaders</parameter>
            <initializer>  true</initializer>
    </methodparam>
    <methodparam>
        <modifier></modifier><type>unsigned </type>
            <parameter>defaultId </parameter>
            <initializer>0</initializer>
    </methodparam>
    <methodparam>
        <modifier>const </modifier><type>char*</type>
            <parameter> timestampExtractor</parameter>
            <initializer>""</initializer>
    </methodparam>
    <modifier></modifier>
</methodsynopsis>      
<methodsynopsis>
    <modifier></modifier>
    <type>void </type>
    <methodname>dsSetHost</methodname>
    <methodparam>
        <modifier>const </modifier><type>char* </type>
            <parameter>evbName</parameter>
    </methodparam>
    <methodparam>
        <modifier>const </modifier><type>char*</type>
            <parameter> srcName</parameter>
    </methodparam>
    <methodparam>
        <modifier>const </modifier><type>char* </type>
            <parameter>host</parameter>
    </methodparam>
    <modifier></modifier>
</methodsynopsis>  
<methodsynopsis>
    <modifier></modifier>
    <type>void </type>
    <methodname>dsSetPath</methodname>
    <methodparam>
        <modifier>const </modifier><type>char*</type>
            <parameter> evbName</parameter>
    </methodparam>
    <methodparam>
        <modifier>const </modifier><type>char* </type>
            <parameter>srcName</parameter>
    </methodparam>
    <methodparam>
        <modifier>const</modifier><type> char* </type>
            <parameter>path</parameter>
    </methodparam>
    <modifier></modifier>
</methodsynopsis>  
<methodsynopsis>
    <modifier></modifier>
    <type> void </type>
    <methodname>dsSetRingUri</methodname>
    <methodparam>
        <modifier>const </modifier><type>char* </type>
            <parameter>evbName</parameter>
    </methodparam>
    <methodparam>
        <modifier>const </modifier><type>char* </type>
            <parameter>srcName</parameter>
    </methodparam>
    <methodparam>
        <modifier>const </modifier><type>char* </type>
            <parameter>ringUri</parameter>
    </methodparam>
    <modifier></modifier>
</methodsynopsis>      

<methodsynopsis>
    <modifier></modifier>
    <type>void </type>
    <methodname>dsSetIds</methodname>
    <methodparam>
        <modifier>const </modifier><type>char*</type>
            <parameter> evbName</parameter>
    </methodparam>
    <methodparam>
        <modifier>const </modifier><type>char* </type>
            <parameter>srcName</parameter>
    </methodparam>
    <methodparam>
        <modifier></modifier><type>std::vector&lt;unsigned&gt; </type>
            <parameter>ids</parameter>
    </methodparam>
    <modifier></modifier>
</methodsynopsis>  
<methodsynopsis>
    <modifier></modifier>
    <type>void </type>
    <methodname>dsSetInfo</methodname>
    <methodparam>
        <modifier>const </modifier><type>char* </type>
            <parameter>evbName</parameter>
    </methodparam>
    <methodparam>
        <modifier>const</modifier><type> char* </type>
            <parameter>srcName</parameter>
    </methodparam>
    <methodparam>
        <modifier>const </modifier><type>char* </type>
            <parameter>info</parameter>
    </methodparam>
    <modifier></modifier>
</methodsynopsis>
<methodsynopsis>
    <modifier></modifier>
    <type>void </type>
    <methodname>dsSetDefaultId</methodname>
    <methodparam>
        <modifier>const </modifier><type>char* </type>
            <parameter>evbName</parameter>
    </methodparam>
    <methodparam>
        <modifier>const </modifier><type>char* srcName, unsigned id</type>
            <parameter></parameter>
    </methodparam>
    <modifier></modifier>
</methodsynopsis>  
<methodsynopsis>
    <modifier></modifier>
    <type>void </type>
    <methodname>dsExpectBodyHeaders</methodname>
    <methodparam>
        <modifier>const </modifier><type>char* </type>
            <parameter>evbName</parameter>
    </methodparam>
    <methodparam>
        <modifier>const </modifier><type>char* </type>
            <parameter>srcName</parameter>
    </methodparam>
    <modifier></modifier>
</methodsynopsis>  
<methodsynopsis>
    <modifier></modifier>
    <type>void </type>
    <methodname>dsDontExpectBodyHeaders</methodname>
    <methodparam>
        <modifier>const</modifier><type> char* </type>
            <parameter>evbName</parameter>
    </methodparam>
    <methodparam>
        <modifier>const </modifier><type>char* </type>
            <parameter>srcName</parameter>
    </methodparam>
    <modifier></modifier>
</methodsynopsis>  
<methodsynopsis>
    <modifier></modifier>
    <type>void </type>
    <methodname>dsSetTimestampExtractor</methodname>
    <methodparam>
        <modifier>const </modifier><type>char* </type>
            <parameter>evbName</parameter>
    </methodparam>
    <methodparam>
        <modifier>const </modifier><type>char* </type>
            <parameter>srcName</parameter>
    </methodparam>
    <methodparam>
        <modifier>const </modifier><type>char*</type>
            <parameter> path</parameter>
    </methodparam>
    <modifier></modifier>
</methodsynopsis>
<methodsynopsis>
    <modifier></modifier>
    <type>void </type>
    <methodname>dsSetEditorPosition</methodname>
    <methodparam>
      <modifier>const </modifier><type>char* </type>
        <parameter>evbName</parameter>
    </methodparam>
    <methodparam>
      <modifier>const </modifier><type>char* </type>
        <parameter>srcName</parameter>
    </methodparam>
    <methodparam>
      <modifier></modifier><type> int </type>
        <parameter>x</parameter>
    </methodparam>
    <methodparam>
      <modifier></modifier><type>int</type>
        <parameter>y</parameter>
    </methodparam>
    <modifier></modifier>
</methodsynopsis>  
<methodsynopsis>
    <modifier></modifier>
    <type>int </type>
    <methodname>dsGetEditorXPosition</methodname>
    <methodparam>
      <modifier>const </modifier><type>char* </type>
        <parameter>evbName</parameter>
    </methodparam>
    <methodparam>
      <modifier>const </modifier><type>char* </type>
        <parameter>srcName</parameter>
    </methodparam>
    <modifier></modifier>
</methodsynopsis>  
<methodsynopsis>
    <modifier></modifier>
    <type>int </type>
    <methodname>dsGetEditorYPosition</methodname>
    <methodparam>
      <modifier>const </modifier><type>char* </type>
        <parameter>evbName</parameter>
    </methodparam>
    <methodparam>
      <modifier>const </modifier><type>char* </type>
        <parameter>srcName</parameter>
    </methodparam>
    <modifier></modifier>
</methodsynopsis>      
    

<methodsynopsis>
    <modifier></modifier>
    <type>DsDescription </type>
    <methodname>dsInfo</methodname>
    <methodparam>
        <modifier>const </modifier><type>char* </type>
            <parameter>evb</parameter>
    </methodparam>
    <methodparam>
        <modifier>const </modifier><type>char* </type>
            <parameter>ds</parameter>
    </methodparam>
    <modifier></modifier>
</methodsynopsis>  
<methodsynopsis>
    <modifier></modifier>
    <type>std::vector&lt;DsDescription&gt; </type>
    <methodname>listDataSources</methodname>
    <methodparam>
        <modifier>const </modifier><type>char* </type>
            <parameter>evb</parameter>
    </methodparam>
    <modifier></modifier>
</methodsynopsis>  
<methodsynopsis>
    <modifier></modifier>
    <type>void </type>
    <methodname>rmDataSource</methodname>
    <methodparam>
        <modifier>const </modifier><type>char* </type>
            <parameter>evb</parameter>
    </methodparam>
    <methodparam>
        <modifier>const </modifier><type>char*</type>
            <parameter> ds</parameter>
    </methodparam>
    <modifier></modifier>
</methodsynopsis>  

};
   </synopsis>
  </refsynopsisdiv>
  <refsect1>
     <title>DESCRIPTION</title>
     <para>
        This class provides a C++ API to the variable database section dedicated
        to describing event builders and their data sources. Each object of type
        <classname>CVardbEventBuilder</classname> represents a connection to a
        single experiment variable database file and its associated variables for
        configuring event builders and their data sources.
     </para>
  </refsect1>
  <refsect1>
     <title>
    METHODS
     </title>
     <variablelist>
        <varlistentry>
            <term>
                <constructorsynopsis>
                   <methodname>CVardbEventBuilder</methodname>
                   <methodparam>
                    <modifier>const </modifier><type>char* </type>
                        <parameter>uri</parameter>
                   </methodparam>
                </constructorsynopsis>
            </term>
            <listitem>
                <para>
                    When constructing a <classname>CVardbEventBuilder</classname>
                    object you must specify the database connection.  This is
                    done by supplying a <parameter>uri</parameter>.  If the
                    <parameter>uri</parameter> specifies the <literal>file:</literal>
                    protocol, the path is a path to the database file which
                    is directory opened.  If the uri specifies the
                    <literal>tcp:</literal> protocol the path specifies a database
                    server connection and all operations will be performed
                    through that server.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term>
                <methodsynopsis>
                    <modifier></modifier>
                    <type>bool </type>
                    <methodname>schemaExists</methodname>
                    <void />
                </methodsynopsis>  
            </term>
            <listitem>
                <para>
                    In order to specify event builders and their sources
                    a directory structure must be in place. This methods
                    tests to see if that struture exists.  If so
                    <literal>true</literal> is returned, if not,
                    <literal>false</literal>.
                </para>
                <para>
                    See <methodname>createSchema below as well.</methodname>
                </para>
            </listitem>
        </varlistentry>        
        <varlistentry>
            <term>
                <methodsynopsis>
                    <modifier></modifier>
                    <type>void </type>
                    <methodname>createSchema</methodname>
                    <void />
                </methodsynopsis>  
            </term>
            <listitem>
                <para>
                    Creates the empty skeleton for representing event builders
                    and their sources.   If that framework of directories
                    already exists, this function silently does nothing.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term>
                <methodsynopsis>
                    <modifier></modifier>
                    <type> void </type>
                    <methodname>createEventBuilder</methodname>
                    <methodparam>
                        <modifier>const </modifier><type>char*</type>
                            <parameter> name</parameter>
                    </methodparam>
                    <methodparam>
                        <modifier>const</modifier><type> char* </type>
                            <parameter>host</parameter>
                    </methodparam>
                    <methodparam>
                        <modifier></modifier><type>unsigned </type>
                            <parameter>coincidenceInterval</parameter>
                    </methodparam>
                    <methodparam>
                      <modifier>const</modifier><type>char*</type>
                        <parameter>outRing</parameter>
                    </methodparam>
                    <methodparam>
                        <modifier></modifier><type>unsigned </type>
                            <parameter>outputSourceId</parameter>
                            <initializer> 0</initializer>
                    </methodparam>
                    <methodparam>
                        <modifier>const </modifier><type>char* </type>
                            <parameter>servicePrefix </parameter>
                            <initializer>"ORDERER"</initializer>
                    </methodparam>
                    <methodparam>
                        <modifier></modifier><type>bool </type>
                            <parameter>build </parameter>
                            <initializer>true</initializer>
                    </methodparam>
                    <methodparam>
                        <modifier></modifier><type>TimestampPolicy </type>
                            <parameter>tsPolicy </parameter>
                            <initializer> earliest</initializer>
                    </methodparam>
                    <methodparam>
                        <modifier>const </modifier><type>char* </type>
                            <parameter>serviceSuffix</parameter>
                            <initializer>""</initializer>
                    </methodparam>
                    <modifier></modifier>
                </methodsynopsis>      
            </term>
            <listitem>
                <para>
                    Creates a new event builder definition.  Note that no actual
                    event builder is started.  This method only describes
                    an event builder for the next start pass of the boot manager
                    to start.
                </para>
                <para>
                    This method has quite a few parameters, however very few are
                    required and the order of the optional parametesr is
                    chosen in order of perceived decreasing frequency of use:
                </para>
                <variablelist>
                    <varlistentry>
                        <term><parameter>name</parameter></term>
                        <listitem>
                            <para>
                                The name to be given to the event builder.
                                This is used in all methods that must select
                                an event builder on which to operate.
                                Event builder names must be unique.
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><parameter>host</parameter></term>
                        <listitem>
                            <para>
                                Specifies the system in which the event builder
                                runs.  This can be either an unambiguous
                                DNS name or the IP address of the host.
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><parameter>coincidenceInterval</parameter></term>
                        <listitem>
                            <para>
                                When event building (glomming) is enabled, this
                                value is the number of timestamp ticks in an
                                event coincidence interval.  Event fragments that
                                are within <parameter>coincidenceInterval</parameter>
                                of a first fragment are glommed onto the same
                                output event.
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><parameter>ring</parameter></term>
                        <listitem>
                            <para>
                              Name of the ringbuffer into which the ouptut events
                              or ordered fragments (see <parameter>build</parameter>
                              below) will be put.  Note that since the event
                              builder is a producer this must be a ring name
                              not a ring URI.
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><parameter>outputSourceId</parameter></term>
                        <listitem>
                            <para>
                                Specifies the source id output events are
                                tagged with.  This is used when this event builder
                                is not the top level event builder in a hieararchical
                                event builder system.  This value should normally
                                be distinct from all source ids in the system
                                including not only raw data sources but the
                                outputs of other event builders.
                            </para>
                            <para>
                                This parameter is optional and defaults to
                                <literal>0</literal>
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><parameter>servicePrefix</parameter></term>
                        <listitem>
                            <para>
                                The event builder is fed data via a set
                                of data sources that connect via TCP/IP to the
                                event builder's ordering stage.  The event builder
                                uses the NSCLDAQ port manager to advertise itself
                                to the data sources.  
                            </para>
                            <para>
                                In constructing its service name is glues
                                together the running users's name with a
                                prefix and a suffix.  This parameter allows you
                                to override the default prefix of
                                <literal>ORDERER</literal>.
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><parameter>build</parameter></term>
                        <listitem>
                            <para>
                                The event builder normally runs in build mode.
                                In this mode, a stage called the
                                <literal>glommer</literal> pastes event fragments
                                that have timestamps with the coincidence
                                interval from a first fragment into output
                                events.
                            </para>
                            <para>
                                It is also possible to disable the glomming
                                together of output events and only emit a
                                stream of totally ordered event fragments.
                                This is done by passing this parameter with
                                a <literal>false</literal> value.
                            </para>
                            <para>
                                The default value for this parameter is
                                <literal>true</literal> which enables
                                glomming.
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><parameter>tsPolicy</parameter></term>
                        <listitem>
                            <para>
                                Glommed output events are assigned a timestamp
                                so that they can participated in downstream
                                event building.  This parameter determines how
                                that timestamp is computed.
                            </para>
                            <para>
                                The parameter has one of three values:
                                <literal>earliest</literal> - the default, the earliest
                                timestamp in the event is used.
                                <literal>latest</literal> - the latest timestamp
                                in the event is used.
                                <literal>average</literal> - the average of all
                                timestamps in the event is computed and used.
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><parameter>serviceSuffix</parameter></term>
                        <listitem>
                            <para>
                                See <parameter>servicePrefix</parameter> for
                                information about this.  This parameter supplies
                                the suffix for the service advertised by the
                                event builder.
                            </para>
                        </listitem>
                    </varlistentry>
                </variablelist>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term>
                <methodsynopsis>
                    <modifier></modifier>
                    <type>void </type>
                    <methodname>evbSetHost</methodname>
                    <methodparam>
                        <modifier>const </modifier><type>char* </type>
                            <parameter>name</parameter>
                    </methodparam>
                    <methodparam>
                        <modifier>const </modifier><type>char* </type>
                            <parameter>newHost</parameter>
                    </methodparam>
                    <modifier></modifier>
                </methodsynopsis> 
            </term>
            <listitem>
                <para>
                    Given an existing event builder named <parameter>name</parameter>,
                    changes the host in which this event builder will next
                    be started to <parameter>host</parameter>.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term>
                <methodsynopsis>
                    <modifier></modifier>
                    <type>void </type>
                    <methodname>evbSetCoincidenceInterval</methodname>
                    <methodparam>
                        <modifier>const </modifier><type>char* </type>
                            <parameter>name</parameter>
                    </methodparam>
                    <methodparam>
                        <modifier></modifier><type>unsigned </type>
                            <parameter>newInterval</parameter>
                    </methodparam>
                    <modifier></modifier>
                </methodsynopsis>
            </term>
            <listitem>
                <para>
                    Sets the coincidence interval for an existing
                    event builder named <parameter>name</parameter> to
                    <parameter>newInterval</parameter>.  See
                    <methodname>createEventBuilder</methodname> for a
                    detailed discussion of the meaning of the coincidence
                    interval.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term>
              <methodsynopsis>
                  <modifier></modifier>
                  <type>void</type>
                  <methodname>evbSetRing</methodname>
                  <methodparam>
                    <modifier>const</modifier><type>char*</type>
                      <parameter>name</parameter>
                  </methodparam>
                  <methodparam>
                    <modifier>const</modifier><type>char*</type>
                      <parameter>ring</parameter>
                  </methodparam>
                  <modifier></modifier>
              </methodsynopsis>  

            </term>
            <listitem>
                <para>
                  Modifies the name of the output ring for the event
                  builder <parameter>name</parameter> to
                  <parameter>ring</parameter>.  Note that since event builders
                  are producers, this must be the name of a ring in the host
                  in which the event builder will run.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term>
                <methodsynopsis>
                    <modifier></modifier>
                    <type>void </type>
                    <methodname>evbSetSourceId</methodname>
                    <methodparam>
                        <modifier>const </modifier><type>char* </type>
                            <parameter>name</parameter>
                    </methodparam>
                    <methodparam>
                        <modifier></modifier><type>unsigned </type>
                            <parameter>newSourceId</parameter>
                    </methodparam>
                    <modifier></modifier>
                </methodsynopsis>  
            </term>
            <listitem>
                <para>
                    Sets the output event source id to <parameter>newSourceId</parameter>
                    for the event builder <parameter>name</parameter>.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term>
                <methodsynopsis>
                    <modifier></modifier>
                    <type>void </type>
                    <methodname>evbSetServicePrefix</methodname>
                    <methodparam>
                        <modifier>const </modifier><type>char* </type>
                            <parameter>name</parameter>
                    </methodparam>
                    <methodparam>
                        <modifier>const </modifier><type>char* </type>
                            <parameter>newPrefix</parameter>
                    </methodparam>
                    <modifier></modifier>
                </methodsynopsis>  
            </term>
            <listitem>
                <para>
                    Sets the service name prefix for the event builder
                     <parameter>name</parameter> to <parameter>newPrefix</parameter>.
                     See <methodname>createEventBuilder</methodname> for more
                     information about the service name prefix.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term>
                <methodsynopsis>
                    <modifier></modifier>
                    <type>void </type>
                    <methodname>evbEnableBuild</methodname>
                    <methodparam>
                        <modifier>const </modifier><type>char* </type>
                            <parameter>name</parameter>
                    </methodparam>
                    <modifier></modifier>
                </methodsynopsis>
            </term>
            <listitem>
                <para>
                    If event building for the event builder
                    <parameter>name</parameter> is disabled, this turns it on.
                    If event building is already enabled, this method is a
                    silent no-op.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term>
                <methodsynopsis>
                    <modifier></modifier>
                    <type>void </type>
                    <methodname>evbDisableBuild</methodname>
                    <methodparam>
                        <modifier>const </modifier><type>char* </type>
                            <parameter>name</parameter>
                    </methodparam>
                    <modifier></modifier>
                </methodsynopsis>  
            </term>
            <listitem>
                <para>
                    If event building for the event builder <parameter>name</parameter>
                    is enabled this call disables it.  If event building is
                    already disabled, this method is a silent no-op.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term>
                <methodsynopsis>
                    <modifier></modifier>
                    <type>void </type>
                    <methodname>evbSetTimestampPolicy</methodname>
                    <methodparam>
                        <modifier>const </modifier><type>char* </type>
                            <parameter>name</parameter>
                    </methodparam>
                    <methodparam>
                        <modifier></modifier><type>TimestampPolicy </type>
                            <parameter>newPolicy</parameter>
                    </methodparam>
                    <modifier></modifier>
                </methodsynopsis>
            </term>
            <listitem>
                <para>
                    Sets a new timestamp policy for the event builder
                    <parameter>name</parameter> to <parameter>newPolicy</parameter>.
                    See <literal>PUBLIC VARIABLES, TYPES AND CONSTANTS</literal>
                    below for information about legal values, and their meanings
                    for <parameter>newPolicy</parameter>.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term>
                <methodsynopsis>
                    <modifier></modifier>
                    <type>void </type>
                    <methodname>evbSetServiceSuffix</methodname>
                    <methodparam>
                        <modifier>const </modifier><type>char* </type>
                            <parameter>name</parameter>
                    </methodparam>
                    <methodparam>
                        <modifier>const </modifier><type>char* </type>
                            <parameter>newSuffix</parameter>
                    </methodparam>
                    <modifier></modifier>
                </methodsynopsis>  
            </term>
            <listitem>
                <para>
                    Sets the event builder <parameter>name</parameter>'s
                    service suffix to <parameter>newSuffix</parameter>.
                    See <methodname>createEventBuilder</methodname> for more
                    information about the role of the service name
                    suffix.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term>
              <methodsynopsis>
                  <modifier></modifier>
                  <type>void </type>
                  <methodname>evbSetEditorPosition</methodname>
                  <methodparam>
                    <modifier>const </modifier><type>char* </type>
                      <parameter>name</parameter>
                  </methodparam>
                  <methodparam>
                    <modifier></modifier><type>int </type>
                      <parameter>x</parameter>
                  </methodparam>
                  <methodparam>
                    <modifier></modifier><type>int </type>
                      <parameter>y</parameter>
                  </methodparam>
                  <modifier></modifier>
              </methodsynopsis>  
            </term>
            <listitem>
                <para>
                  Associates the position
                  <parameter>x</parameter>, <parameter>y</parameter> with the
                  event builder <parameter>name</parameter>.  This position
                  is used by the experiment editor to restore the diagram
                  layout when restoring an experiment configuration for further
                  editing/viewing.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term>
              <methodsynopsis>
                  <modifier></modifier>
                  <type>int </type>
                  <methodname>evbGetEditorXPosition</methodname>
                  <methodparam>
                    <modifier>const </modifier><type>char* </type>
                      <parameter>name</parameter>
                  </methodparam>
                  <modifier></modifier>
              </methodsynopsis>        
            </term>
            <listitem>
                <para>
                  Returns the X coordinate of the editor position for
                  the event builder <parameter>name</parameter> last saved by
                  e.g. <methodname>evbSetEditorPosition</methodname>.
                </para>
            </listitem>
        </varlistentry>      
        <varlistentry>
            <term>
              <methodsynopsis>
                  <modifier></modifier>
                  <type>int </type>
                  <methodname>evbGetEditorYPosition</methodname>
                  <methodparam>
                    <modifier>const </modifier><type>char*</type>
                      <parameter> name</parameter>
                  </methodparam>
                  <modifier></modifier>
              </methodsynopsis>      
            </term>
            <listitem>
                <para>
                  Returns the Y coordinate of the editor position for
                  the event builder <parameter>name</parameter> last saved by
                  e.g. <methodname>evbSetEditorPosition</methodname>.
                </para>
            </listitem>
        </varlistentry>      
              
        <varlistentry>
            <term>
                <methodsynopsis>
                    <modifier></modifier>
                    <type>void </type>
                    <methodname>rmEventBuilder</methodname>
                    <methodparam>
                        <modifier>const </modifier><type>char* </type>
                            <parameter>name</parameter>
                    </methodparam>
                    <modifier></modifier>
                </methodsynopsis>  
            </term>
            <listitem>
                <para>
                    Destroys the definition for the event builder
                    <parameter>name</parameter>.   Event builder
                    <parameter>name</parameter> must exist or an
                    <classname>std::exception</classname> will be thrown.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term>
                <methodsynopsis>
                    <modifier></modifier>
                    <type>EvbDescription </type>
                    <methodname>evbInfo</methodname>
                    <methodparam>
                        <modifier>const </modifier><type>char* </type>
                            <parameter>name</parameter>
                    </methodparam>
                    <modifier></modifier>
                </methodsynopsis>  
            </term>
            <listitem>
                <para>
                    Returns detailed information about the event builder
                    <parameter>name</parameter>.  See
                    <literal>PUBLIC VARIABLES, TYPES AND CONSTANTS</literal>
                    below for information about the
                    <type>CVardbEventBuilder::EvbDescription</type>
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term>
                <methodsynopsis>
                    <modifier></modifier>
                    <type>std::vector&lt;EvbDescription&gt; </type>
                    <methodname>listEventBuilders</methodname>
                    <void />
                    <modifier></modifier>
                </methodsynopsis>  
            </term>
            <listitem>
                <para>
                    Returns a vector of <type>CVardbEventBuilder::EvbDescription</type>
                     structs that describe <emphasis>all</emphasis> defined
                     event builders.  See
                    <literal>PUBLIC VARIABLES, TYPES AND CONSTANTS</literal>
                    for information about the
                    <type>CVardbEventBuilder::EvbDescription</type> structure
                    and its fields.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term>
                <methodsynopsis>
                    <modifier></modifier>
                    <type>void </type>
                    <methodname>addDataSource</methodname>
                    <methodparam>
                        <modifier>const </modifier><type>char* </type>
                            <parameter>evbName</parameter>
                    </methodparam>
                    <methodparam>
                        <modifier>const </modifier><type>char* </type>
                            <parameter>srcName</parameter>
                    </methodparam>
                    <methodparam>
                        <modifier> const </modifier><type>char* </type>
                            <parameter>host</parameter>
                    </methodparam>
                    <methodparam>
                        <modifier> const </modifier><type>char* </type>
                            <parameter>path</parameter>
                    </methodparam>
                    <methodparam>
                        <modifier>const</modifier><type> char* </type>
                            <parameter>ringUri</parameter>
                    </methodparam>
                    <methodparam>
                        <modifier></modifier><type>std::vector&lt;unsigned&gt; </type>
                            <parameter>ids</parameter>
                    </methodparam>
                    <methodparam>
                        <modifier>const </modifier><type>char* </type>
                            <parameter>info</parameter>
                            <initializer>""</initializer>
                    </methodparam>
                    <methodparam>
                        <modifier></modifier><type>bool </type>
                            <parameter>expectBodyHeaders</parameter>
                            <initializer>  true</initializer>
                    </methodparam>
                    <methodparam>
                        <modifier></modifier><type>unsigned </type>
                            <parameter>defaultId </parameter>
                            <initializer>0</initializer>
                    </methodparam>
                    <methodparam>
                        <modifier>const </modifier><type>char*</type>
                            <parameter> timestampExtractor</parameter>
                            <initializer>""</initializer>
                    </methodparam>
                    <modifier></modifier>
                </methodsynopsis>                      
            </term>
            <listitem>
                <para>
                    Adds a data source (<parameter>srcName</parameter>)
                    definition to the event builder <parameter>evbName</parameter>.
                    The program specified is assumed to transmit event fragments
                    to the event builder.
                </para>
                <para>
                    There are a large number of parameters however, as with
                    <methodname>createEventBuilder</methodname>, an effort
                    has ben made to make as many of theses as possible optional
                    with reasonable default values.
                </para>
                <para>
                    Here's the set of parameters the method accepts:
                </para>
                <variablelist>
                    <varlistentry>
                        <term><parameter>evbName</parameter></term>
                        <listitem>
                            <para>
                                Name of the event builder to which this
                                source will transmit fragments.
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><parameter>srcName</parameter></term>
                        <listitem>
                            <para>
                                Data source name.  The data source name must
                                be unique within the data source names for the
                                event builder.  
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><parameter>host</parameter></term>
                        <listitem>
                            <para>
                                The system in which the data source program
                                will run.   This can be either an unambiguour
                                DNS name or a dotted IP address string.
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><parameter>path</parameter></term>
                        <listitem>
                            <para>
                                The path to the data source program. Normally
                                this will be something like
                                <literal>$DAQBIN/ringFragmentSource</literal>
                                where <literal>$DAQBIN</literal> is the binary
                                directory of the selected version of NSCLDAQ.
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><parameter>ringUri</parameter></term>
                        <listitem>
                            <para>
                                The URI of the ring buffer from which fragments
                                will be taken.  
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><parameter>ids</parameter></term>
                        <listitem>
                            <para>
                                When the source connects to the event builder
                                it must provide a list of the source ids of the
                                data sources it will be transmitting.  This vector
                                must be initialized to that set of ids.
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><parameter>info</parameter></term>
                        <listitem>
                            <para>
                                Optional parameter that defaults to an empty
                                string.  If provided, this is the information
                                string that will be used to document the purpose
                                of the event source on the event builder GUI.
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><parameter>expectBodyHeaders</parameter></term>
                        <listitem>
                            <para>
                                Optional parameter that defaults to <literal>true</literal>.
                                When <literal>true</literal>, the source expects
                                that all fragments will have body headers from
                                which the timestamp and the data source id
                                can be gotten.
                            </para>
                            <para>
                                If this is <literal>true</literal> and a fragment
                                arrives without a body header that is an error.
                                If <literal>false</literal>, you must also provide
                                a meaningful default source id and a
                                timestamp extractor shared library that will
                                be used to set the data source and decode the
                                timestamp for events that don't have body headers.
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><parameter>defaultId</parameter></term>
                        <listitem>
                            <para>
                                When <parameter>expectBodyHeaders</parameter> is
                                <literal>false</literal>, this value is
                                used as the source id for any fragment that does
                                not have a body header.  If
                                <parameter>expectBodyHeaders</parameter> is
                                <literal>true</literal>, this parameter is
                                ignored as data source ids will be taken from
                                the body headers of ring items.
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><parameter>timestampExtractor</parameter></term>
                        <listitem>
                            <para>
                                If <parameter>expectBodyHeaders</parameter> is
                                <literal>false</literal>, this string must be
                                provided and is the filesystem path to a
                                shared library that will be used to extract
                                timestamps from the bodies of ring items that
                                don't have body headers.
                            </para>
                            <para>
                                If <parameter>expectBodyHeaders</parameter> is
                                <literal>true</literal>, a timestamp extractor
                                is not necessary as the timestamps will be
                                provided by the body headers of each ring
                                item.
                            </para>
                        </listitem>
                    </varlistentry>
                </variablelist>
            </listitem>
        </varlistentry>        
        <varlistentry>
            <term>
                <methodsynopsis>
                    <modifier></modifier>
                    <type>void </type>
                    <methodname>dsSetHost</methodname>
                    <methodparam>
                        <modifier>const </modifier><type>char* </type>
                            <parameter>evbName</parameter>
                    </methodparam>
                    <methodparam>
                        <modifier>const </modifier><type>char*</type>
                            <parameter> srcName</parameter>
                    </methodparam>
                    <methodparam>
                        <modifier>const </modifier><type>char* </type>
                            <parameter>host</parameter>
                    </methodparam>
                    <modifier></modifier>
                </methodsynopsis>  
            </term>
            <listitem>
                <para>
                    Changes the <parameter>host</parameter> in which the
                    data source named <parameter>srcName</parameter> for
                    the event builder <parameter>evbName</parameter>
                    will be run.
                </para>
            </listitem>
        </varlistentry>        
        <varlistentry>
            <term>
                <methodsynopsis>
                    <modifier></modifier>
                    <type>void </type>
                    <methodname>dsSetPath</methodname>
                    <methodparam>
                        <modifier>const </modifier><type>char*</type>
                            <parameter> evbName</parameter>
                    </methodparam>
                    <methodparam>
                        <modifier>const </modifier><type>char* </type>
                            <parameter>srcName</parameter>
                    </methodparam>
                    <methodparam>
                        <modifier>const</modifier><type> char* </type>
                            <parameter>path</parameter>
                    </methodparam>
                    <modifier></modifier>
                </methodsynopsis>  
            </term>
            <listitem>
                <para>
                    Sets the path to the program that will be run as the
                    data source program <parameter>srcName</parameter>
                    for the event builder <parameter>evbName</parameter>to
                    <parameter>path</parameter>.
                </para>
            </listitem>
        </varlistentry>        
        <varlistentry>
            <term>
                <methodsynopsis>
                    <modifier></modifier>
                    <type> void </type>
                    <methodname>dsSetRingUri</methodname>
                    <methodparam>
                        <modifier>const </modifier><type>char* </type>
                            <parameter>evbName</parameter>
                    </methodparam>
                    <methodparam>
                        <modifier>const </modifier><type>char* </type>
                            <parameter>srcName</parameter>
                    </methodparam>
                    <methodparam>
                        <modifier>const </modifier><type>char* </type>
                            <parameter>ringUri</parameter>
                    </methodparam>
                    <modifier></modifier>
                </methodsynopsis>      
            </term>
            <listitem>
                <para>
                    Sets a new URI for the ringbuffer from which
                    the data source <parameter>srcName</parameter> for the
                    event builder <parameter>evbName</parameter> will
                    take data from to <parameter>ringUri</parameter>
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term>
                <methodsynopsis>
                    <modifier></modifier>
                    <type>void </type>
                    <methodname>dsSetIds</methodname>
                    <methodparam>
                        <modifier>const </modifier><type>char*</type>
                            <parameter> evbName</parameter>
                    </methodparam>
                    <methodparam>
                        <modifier>const </modifier><type>char* </type>
                            <parameter>srcName</parameter>
                    </methodparam>
                    <methodparam>
                        <modifier></modifier><type>std::vector&lt;unsigned&gt; </type>
                            <parameter>ids</parameter>
                    </methodparam>
                    <modifier></modifier>
                </methodsynopsis>  
            </term>
            <listitem>
                <para>
                    Provides a new set of data source ids, <parameter>ids</parameter>,
                    for the data source <parameter>srcName</parameter> to the
                    event builder <parameter>evbName</parameter>.
                </para>
            </listitem>
        </varlistentry>        
        <varlistentry>
            <term>
                <methodsynopsis>
                    <modifier></modifier>
                    <type>void </type>
                    <methodname>dsSetInfo</methodname>
                    <methodparam>
                        <modifier>const </modifier><type>char* </type>
                            <parameter>evbName</parameter>
                    </methodparam>
                    <methodparam>
                        <modifier>const</modifier><type> char* </type>
                            <parameter>srcName</parameter>
                    </methodparam>
                    <methodparam>
                        <modifier>const </modifier><type>char* </type>
                            <parameter>info</parameter>
                    </methodparam>
                    <modifier></modifier>
                </methodsynopsis>
            </term>
            <listitem>
                <para>
                    
                </para>
            </listitem>
        </varlistentry>        
        <varlistentry>
            <term>
                <methodsynopsis>
                    <modifier></modifier>
                    <type>void </type>
                    <methodname>dsSetDefaultId</methodname>
                    <methodparam>
                        <modifier>const </modifier><type>char* </type>
                            <parameter>evbName</parameter>
                    </methodparam>
                    <methodparam>
                        <modifier>const </modifier><type>char* srcName, unsigned id</type>
                            <parameter></parameter>
                    </methodparam>
                    <modifier></modifier>
                </methodsynopsis>  
            </term>
            <listitem>
                <para>
                    Modifies the default data source id to <parameter>id</parameter>
                    for the data source <parameter>srcName</parameter> in the
                    event builder <parameter>evbName</parameter>.
                </para>
            </listitem>
        </varlistentry>        
        <varlistentry>
            <term>
                <methodsynopsis>
                    <modifier></modifier>
                    <type>void </type>
                    <methodname>dsExpectBodyHeaders</methodname>
                    <methodparam>
                        <modifier>const </modifier><type>char* </type>
                            <parameter>evbName</parameter>
                    </methodparam>
                    <methodparam>
                        <modifier>const </modifier><type>char* </type>
                            <parameter>srcName</parameter>
                    </methodparam>
                    <modifier></modifier>
                </methodsynopsis>  
            </term>
            <listitem>
                <para>
                    Tells the data source named <parameter>srcName</parameter>
                    for the event builder <parameter>evbName</parameter> that its
                    ring items will all have body headers.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term>
                <methodsynopsis>
                    <modifier></modifier>
                    <type>void </type>
                    <methodname>dsDontExpectBodyHeaders</methodname>
                    <methodparam>
                        <modifier>const</modifier><type> char* </type>
                            <parameter>evbName</parameter>
                    </methodparam>
                    <methodparam>
                        <modifier>const </modifier><type>char* </type>
                            <parameter>srcName</parameter>
                    </methodparam>
                    <modifier></modifier>
                </methodsynopsis>  
            </term>
            <listitem>
                <para>
                    Tells the data source named <parameter>srcName</parameter>
                    for the event builder <parameter>evbName</parameter>
                    that is ring items may not all have body headers.
                </para>
            </listitem>
        </varlistentry>        
        <varlistentry>
            <term>
                <methodsynopsis>
                    <modifier></modifier>
                    <type>void </type>
                    <methodname>dsSetTimestampExtractor</methodname>
                    <methodparam>
                        <modifier>const </modifier><type>char* </type>
                            <parameter>evbName</parameter>
                    </methodparam>
                    <methodparam>
                        <modifier>const </modifier><type>char* </type>
                            <parameter>srcName</parameter>
                    </methodparam>
                    <methodparam>
                        <modifier>const </modifier><type>char*</type>
                            <parameter> path</parameter>
                    </methodparam>
                    <modifier></modifier>
                </methodsynopsis>  
            </term>
            <listitem>
                <para>
                    Sets the timestamp extractor shared library path for
                    the data source <parameter>srcName</parameter> for the
                    event builder <parameter>evbName</parameter> to be
                    <parameter>path</parameter>.  This must be a path
                    to a shared object that will be called upon to pull
                    timestamps out of ring items that don't have body headers.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term>
              <methodsynopsis>
                  <modifier></modifier>
                  <type>void </type>
                  <methodname>dsSetEditorPosition</methodname>
                  <methodparam>
                    <modifier>const </modifier><type>char* </type>
                      <parameter>evbName</parameter>
                  </methodparam>
                  <methodparam>
                    <modifier>const </modifier><type>char* </type>
                      <parameter>srcName</parameter>
                  </methodparam>
                  <methodparam>
                    <modifier></modifier><type> int </type>
                      <parameter>x</parameter>
                  </methodparam>
                  <methodparam>
                    <modifier></modifier><type>int</type>
                      <parameter>y</parameter>
                  </methodparam>
                  <modifier></modifier>
              </methodsynopsis>  
            </term>
            <listitem>
                <para>
                  Associates the position
                  <parameter>x</parameter>, <parameter>y</parameter> with the
                  data source <parameter>srcNamwe</parameter> that sends data
                  to the event builder <parameter>evbName</parameter>.  This position
                  is used by the experiment editor to save  the
                  canvas position of the data source so that when a configuration
                  is restored into the editor, it can restore the
                  experiment diagram's layout.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term>
              <methodsynopsis>
                  <modifier></modifier>
                  <type>int </type>
                  <methodname>dsGetEditorXPosition</methodname>
                  <methodparam>
                    <modifier>const </modifier><type>char* </type>
                      <parameter>evbName</parameter>
                  </methodparam>
                  <methodparam>
                    <modifier>const </modifier><type>char* </type>
                      <parameter>srcName</parameter>
                  </methodparam>
                  <modifier></modifier>
              </methodsynopsis>  
            </term>
            <listitem>
                <para>
                  Returns the x coordinate of the last saved editor position
                  (via e.g. <methodname>dsSetEditorPosition</methodname>) for
                  the data source <parameter>srcName</parameter> that sends data
                  to <parameter>evbName</parameter>.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term>
              <methodsynopsis>
                  <modifier></modifier>
                  <type>int </type>
                  <methodname>dsGetEditorYPosition</methodname>
                  <methodparam>
                    <modifier>const </modifier><type>char* </type>
                      <parameter>evbName</parameter>
                  </methodparam>
                  <methodparam>
                    <modifier>const </modifier><type>char* </type>
                      <parameter>srcName</parameter>
                  </methodparam>
                  <modifier></modifier>
              </methodsynopsis>      
            </term>
            <listitem>
                <para>
                  Returns the y coordinate of the last saved editor position
                  (via e.g. <methodname>dsSetEditorPosition</methodname>) for
                  the data source <parameter>srcName</parameter> that sends data
                  to <parameter>evbName</parameter>.
                </para>
            </listitem>
        </varlistentry>      
              
                  

        <varlistentry>
            <term>
                <methodsynopsis>
                    <modifier></modifier>
                    <type>DsDescription </type>
                    <methodname>dsInfo</methodname>
                    <methodparam>
                        <modifier>const </modifier><type>char* </type>
                            <parameter>evb</parameter>
                    </methodparam>
                    <methodparam>
                        <modifier>const </modifier><type>char* </type>
                            <parameter>ds</parameter>
                    </methodparam>
                    <modifier></modifier>
                </methodsynopsis>  
            </term>
            <listitem>
                <para>
                    Returns a description of the data source specified by
                    <parameter>ds</parameter> and event builder <parameter>evb</parameter>.
                    For information about the fields in the data structure
                    <type>CVardbEventBuilder::DsDescription</type>, see
                    <literal>PUBLIC VARIABLES, TYPES and CONSTANTS</literal>
                </para>
            </listitem>
        </varlistentry>        
        <varlistentry>
            <term>
                <methodsynopsis>
                    <modifier></modifier>
                    <type>std::vector&lt;DsDescription&gt; </type>
                    <methodname>listDataSources</methodname>
                    <methodparam>
                        <modifier>const </modifier><type>char* </type>
                            <parameter>evb</parameter>
                    </methodparam>
                    <modifier></modifier>
                </methodsynopsis>  
            </term>
            <listitem>
                <para>
                    Returns a vector of
                    <type>CVardbEventBuilder::DsDescription</type> describing
                    all data sources for the event builder <parameter>evb</parameter>.
                    For information about the fields in the data structure
                    <type>CVardbEventBuilder::DsDescription</type>, see
                    <literal>PUBLIC VARIABLES, TYPES and CONSTANTS</literal>
                </para>
            </listitem>
        </varlistentry>        
        <varlistentry>
            <term>
                <methodsynopsis>
                    <modifier></modifier>
                    <type>void </type>
                    <methodname>rmDataSource</methodname>
                    <methodparam>
                        <modifier>const </modifier><type>char* </type>
                            <parameter>evb</parameter>
                    </methodparam>
                    <methodparam>
                        <modifier>const </modifier><type>char*</type>
                            <parameter> ds</parameter>
                    </methodparam>
                    <modifier></modifier>
                </methodsynopsis>  
            </term>
            <listitem>
                <para>
                    Remove the data source definition specified by the
                    source <parameter>ds</parameter> and event builder
                    <parameter>evb</parameter>
                </para>
            </listitem>
        </varlistentry>        
                
                

     </variablelist>
  </refsect1>
   <refsect1>
      <title>PUBLIC VARIABLES, TYPES and CONSTANTS</title>
      <refsect2>
        <title><type>CVardbEventBuilder::TimestampPolicy</type></title>
        <para>
            This type is an enumerated type that defines the manner in which
            event builder output fragments are computed from the fragments that
            make up a glommed event.  Values are:
        </para>
        <variablelist>
            <varlistentry>
                <term>
                    <literal>CVardbEventBuilder::earliest</literal>
                </term>
                <listitem>
                    <para>
                        The output timestamp is the earliest (oldest) in the
                        list of fragments in the event.  Note that if the
                        timestamp wraps in the middle of the event, this value
                        may not be the lowest timestamp value.  It will, however
                        always be the timestamp of the first fragment in the
                        event.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>CVardbEventBuilder::latest</literal></term>
                <listitem>
                    <para>
                        The output timestamp is the latest (newest) in the
                        list of fragments in the event.   This will be the
                        timestamp for the last fragment in the event.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>CVardbEventBuilder::average</literal></term>
                <listitem>
                    <para>
                        The output timestamp is computed by averaging
                        all timestamps in the event.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
      </refsect2>
      <refsect2>
        <title><type>CVardbEventBuilder::EvbDescription</type></title>
        <para>
            Provides a description of an event builder.  Note that the type
            <type>CVardbEventBuilder:pEvbDescription</type> is a pointer to
            this struct.
        </para>
        <para>
            The struct has the following fields:
        </para>
        <variablelist>
            <varlistentry>
                <term>
                    <type>std::string     </type><structfield>s_name</structfield>
                </term>
                <listitem>
                    <para>
                        Contains the name of the event builder.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>
                    <type>std::string     </type><structfield>s_host</structfield>
                </term>
                <listitem>
                    <para>
                        Contains the host in which the event builder will be run.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>
                    <type>unsigned        </type><structfield>s_coincidenceInterval</structfield>
                </term>
                <listitem>
                    <para>
                        Contains the event builder's glom coincidence interval.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>
                    <type>std::string     </type><structfield>s_servicePrefix</structfield>
                </term>
                <listitem>
                    <para>
                        Contains the prefix for the advertised service.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>
                    <type>std::string     </type><structfield>s_serviceSuffix</structfield>
                </term>
                <listitem>
                    <para>
                        Contains the suffix for the advertised service.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>
                    <type>bool            </type><structfield>s_build</structfield>
                </term>
                <listitem>
                    <para>
                        <literal>true</literal> if the event builder will
                        produced glommed events and <literal>false</literal>
                        if it will not.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>
                    <type>unsigned        </type><structfield>s_sourceId</structfield>
                </term>
                <listitem>
                    <para>
                        Contains the source id that will be put in glommed
                        output events.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>
                    <type>CVardbEventBuilder::TimestampPolicy </type><structfield>s_timestampPolicy</structfield>
                </term>
                <listitem>
                    <para>
                        Contains the mechanism that will be used to compute the
                        timestamp of the glommed events that are output.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
      </refsect2>    
      <refsect2>
        <title><type>CVardbEventBuilder::DsDescription</type></title>
        <para>
            This type
            is a struct that
            describes event sources.  Note that whenever it is
            returned it is always with respect to some event builder.
            The type <type>CVardbEventBuilder::pDsDescription</type> is also
            defined as a pointer to this struct.
        </para>
        <para>
            The struct has the following fields:
        </para>
        <variablelist>
            <varlistentry>
                <term>
                    <type>std::string   </type><structfield>s_name</structfield>
                </term>
                <listitem>
                    <para>
                        Name of the data source.  Note that the name of the
                        event builder is implied by the call that produced
                        this struct.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>
                    <type>std::string   </type><structfield>s_host</structfield>
                </term>
                <listitem>
                    <para>
                        Host in which the data source will be run.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>
                    <type>std::string   </type><structfield>s_path</structfield>
                </term>
                <listitem>
                    <para>
                        Path to the data source program.  Normally this will be
                        a path to a <application>ringFragmentSource</application>.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>
                    <type>std::string   </type><structfield>s_info</structfield>
                </term>
                <listitem>
                    <para>
                        Contains an information string that is sent to the
                        event builder when this data source connects. The
                        string is displayed verbatim on the Event Builder user
                        interface to help identify the purpose of the data source.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>
                    <type>std::vector&lt;unsigned&gt; </type><structfield>s_ids</structfield>
                </term>
                <listitem>
                    <para>
                        Vector of the ids that the data source can send to the
                        event builder.  Note that this is a vector taken from
                        the variables whose names start with <literal>id</literal>.
                        The order of the variables is alphabetical by variable
                        name. 
                    </para>
                    <para>
                        The order is not important to the data source or to the
                        event builder.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>
                    <type>std::string   </type><structfield>s_ringUri</structfield>
                </term>
                <listitem>
                    <para>
                        The URI that specifies the ring buffer from which the
                        data source will get its fragments.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>
                    <type> bool          </type><structfield>s_expectBodyheaders</structfield>
                </term>
                <listitem>
                    <para>
                        If <literal>true</literal>, the data source can assume
                        that all items fromt he source ring will have body headers.
                        if <literal>false</literal>, this assumption cannot be
                        made and items without body headers will require a
                        reasonable value for <structfield>s_defaultId</structfield>
                        to provide a source id for such items and a time stamp
                        extraction library specified by <structfield>s_timestampExtractor</structfield>.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>
                    <type>unsigned      </type><structfield>s_defaultId</structfield>
                </term>
                <listitem>
                    <para>
                        This variable is only important if
                        <structfield>s_expectBodyheaders</structfield> is
                        <literal>false</literal>.  In this case, items can
                        be encountered that don't have body headers.  For
                        items without body headers, the value of this
                        field will be set as the source id for that item.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>
                    <type>std::string   </type><structfield>s_timestampExtractor</structfield>
                </term>
                <listitem>
                    <para>
                        If <structfield>s_expectBodyheaders</structfield> is
                        false, this supplied a path to a shared library which will
                        be used to extract timestamps from the items that don't
                        have body headers.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsect2>      
   </refsect1>
</refentry>
<!-- /manpage -->

<!-- manpage 3tcl -->
<refentry id="tcl3_vardbevb">
  <refentryinfo>
    <author>
            <personname>
                    <firstname>Ron</firstname>
                    <surname>Fox</surname>
            </personname>
    </author>
    <productname>NSCLDAQ</productname>
    <productnumber></productnumber>
  </refentryinfo>
  <refmeta>
     <refentrytitle id='tcl3_vardbevb_title'>vardbEventBuilder</refentrytitle>
     <manvolnum>3tcl</manvolnum>
     <refmiscinfo class='empty'></refmiscinfo>
  </refmeta>
  <refnamediv>
     <refname>vardbEventBuilder</refname>
     <refpurpose>Tcl API to variable database event builder definitions.</refpurpose>
  </refnamediv>
  
  <refsynopsisdiv>
    <cmdsynopsis>
  <command>
package require vardbEventBuilder
  </command>
  <command>
::nscldaq::evb create <replaceable>name dburi</replaceable>
  </command>
  <command>
<replaceable>name subcommand parameter....</replaceable>
  </command>
  <command>
::nscldaq::evb destroy <replaceable>name</replaceable>
  </command>
</cmdsynopsis>

  </refsynopsisdiv>
  <refsect1>
     <title>DESCRIPTION</title>
     <para>
      Provides an object oriented API to the variable data base descriptions
      of event builders and their data sources.  The package provides
      a constructor and a destructor for a command ensemble that represents
      a connection to a database and its description of event builders and
      their data sources.
     </para>
     <para>
      <command>::nscldaq::evb  create</command> is the constructor.  Its first
      parameter is the base name of the command ensemble that will be generated.
      Its second parameter is the database URI. 
     </para>
     <para>
      <command>::nscldaq::evb destroy</command> is the destructor.  It takes
      the name of a command that was created via
      <command>::nscldaq::evb create</command>.  On successful completion that
      command no longer exists.
     </para>
     <para>
      The section <literal>OBJECT METHODS</literal> below describes the
      subcommands of the command ensembles generated by
      <command>::nscldaq::evb create</command> as well as their parameters..
     </para>
  </refsect1>
  <refsect1>
     <title>
        OBJECT METHODS
     </title>
     <variablelist>
      <varlistentry>
          <term><command>haveSchema</command></term>
          <listitem>
              <para>
                Returns a boolean true value if the database the object is
                connected to has the framework for defining event builders
                and their sources.  If not, returns a boolean false.
                See <command>createSchema</command> below for more information.
              </para>
          </listitem>
      </varlistentry>
      <varlistentry>
          <term><command>createSchema</command></term>
          <listitem>
              <para>
                Creates the variable database infrastructure needed to represent
                event builders and their data sources.  Since it is a silent
                no-op to run this command if that infrastructure already exists,
                it's a good idea to either invoke this command immediately after
                creating the object or to have code like:
              </para>
              <informalexample>
                <programlisting>
::nscldaq::evb create api tcp://some/data/base
if {! [api haveSchema]} {
  api createSchema
}
                </programlisting>
              </informalexample>
          </listitem>
      </varlistentry>
      <varlistentry>
          <term>
            <command>createEventBuilder</command> <replaceable>name host ring ?option-dict?</replaceable>
          </term>
          <listitem>
              <para>
                Creates a new event builder definition.  Three mandatory and one
                optional parameter are required.  The mandatory
                <parameter>name</parameter>
                parameter provides a name for the new event builder. This name
                must be unique amongst all event builders defined in the database.
                The <parameter>host</parameter> parameter is a DNS name
                or dotted IP address describing where the event builder will run.
                Finally <parameter>ring</parameter> provides the name of the
                ring buffer into which the event builder will put its output.
                Since the event builder is a producer, this must be the name
                of a ring buffer that is located in <parameter>host</parameter>
                rather than a URI.
              </para>
              <para>
                The optional <parameter>option-dict</parameter> parameter is a
                dict that provides additional parameters that have reasonable
                defaults.  The keys recognized are described below.  Additional
                keys not shown below are ignored:
              </para>
              <variablelist>
                <varlistentry>
                    <term><literal>dt</literal></term>
                    <listitem>
                        <para>
                          Sets the number of timestamp ticks that define
                          the coincidence interval for building events.  If this
                          is absent the value defaults to <literal>1</literal>
                          tick.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><literal>sourceId</literal></term>
                    <listitem>
                        <para>
                          Defines the source id that is used to identify the
                          events output by the event builder.  If absent, this
                          defaults to <literal>0</literal>.  Note that the
                          source Id should be unique amongst, not only all
                          event builders, but all raw data sources as well.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><literal>prefix</literal></term>
                    <listitem>
                        <para>
                          The event builder advertises itself as a service through
                          the DAQ portmanager.  The service name advertised is
                          constructed from a prefix, a suffix and the username
                          under which the event builder is run.  This sets the
                          prefix.  If not provided, the prefix defaults to
                          <literal>ORDERER</literal>.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><literal>suffix</literal></term>
                    <listitem>
                        <para>
                          Overrides the servide name suffix from its default
                          value of an empty string.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>build</term>
                    <listitem>
                        <para>
                          The event builder can either build events from fragments
                          that fall within its coincidence window or it can
                          emit a stream of ordered fragments.  By default it
                          builds events, if the value of this key is not a true
                          boolean, it wil, instead emit ordered fragments.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>tspolicy</term>
                    <listitem>
                        <para>
                          Sets the timestamp policy.  Built events emitted by the
                          event builder have a timestamp.  This timestamp allows
                          for hierarchical event building.  The timestamp policy
                          determines how this timestamp is produced fromt the
                          timestamps of the fragment that makes up the event.
                        </para>
                        <para>
                          This dict key can take the values <literal>earliest</literal>,
                          in which case the oldest fragment timestamp is used,
                          <literal>latest</literal>, in which case the newest
                          timestamp fragment is used, or <literal>average</literal>
                          in which case the timestamp is produced from the
                          average of all the fragments in the event.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>ring</term>
                    <listitem>
                        <para>
                          Ring buffer into which the event builder pipeline will
                          put its data.
                        </para>
                    </listitem>
                </varlistentry>
              </variablelist>
          </listitem>
      </varlistentry>
      <varlistentry>
          <term><command>evbSetHost</command> <replaceable>evbname newhost</replaceable></term>
          <listitem>
              <para>
                Given an event builder with the name <parameter>evbname</parameter>,
                sets the host in which this event builder shouild run to
                <parameter>newhost</parameter>.
              </para>
          </listitem>
      </varlistentry>
      <varlistentry>
          <term><command>evbSetCoincidenceInterval</command> <replaceable>evbname dt</replaceable></term>
          <listitem>
              <para>
                For an existing event buidler <parameter>evbname</parameter>
                sets a new coincidence interval to <parameter>dt</parameter>.
              </para>
          </listitem>
      </varlistentry>
      <varlistentry>
          <term><command>evbSetRing</command> <replaceable>name ring</replaceable></term>
          <listitem>
              <para>
                Sets a new output <parameter>ring</parameter> for the event
                builder named <parameter>name</parameter>.
              </para>
          </listitem>
      </varlistentry>
      <varlistentry>
          <term><command>evbSetSourceId</command> <replaceable>evbname id</replaceable></term>
          <listitem>
              <para>
                Sets the source id for events that will be produced by
                <parameter>evbname</parameter> to <parameter>id</parameter>.
              </para>
          </listitem>
      </varlistentry>
      <varlistentry>
          <term><command>evbSetServicePrefix</command> <replaceable>evbname prefix</replaceable></term>
          <listitem>
              <para>
                Sets the service name prefix to <parameter>prefix</parameter> for
                the event builder <parameter>evbname</parameter>
              </para>
          </listitem>
      </varlistentry>
      <varlistentry>
          <term><command>evbDisableBuild</command> <replaceable>evbname</replaceable></term>
          <listitem>
              <para>
                Turns off event building for the event builder named
                <parameter>evbname</parameter>. With event building turned off,
                the event builder will simply emit an ordered stream of event
                fragments.
              </para>
          </listitem>
      </varlistentry>
      <varlistentry>
          <term><command>evbEnableBuild</command> <replaceable>evbname</replaceable></term>
          <listitem>
              <para>
                Turns on event building for <parameter>evbname</parameter>
                see <command>evbDisableBuild</command> above for more
                information.
              </para>
          </listitem>
      </varlistentry>
      <varlistentry>
          <term><command>evbSetTimestampPolicy</command> <replaceable>evbname earliest|latest|average</replaceable></term>
          <listitem>
              <para>
                Sets the new timestamp policy for <parameter>evbname</parameter>.
                The timestamp policy determines how timestamps of output events
                are computed.  See <command>createEventBuilder</command> above
                for more information about the timstamp policy.
              </para>
          </listitem>
      </varlistentry>
      <varlistentry>
          <term>
            <command>evbSetEditorPosition</command> <replaceable>name x y</replaceable>
          </term>
          <listitem>
              <para>
                Associates the position <parameter>x</parameter>, <parameter>y</parameter>
                with the event builder <parameter>name</parameter>.  This position
                is saved by the experiment editor and used to restore the
                layout of the experiment diagram when restoring a configuration
                for later editing.
              </para>
          </listitem>
      </varlistentry>
      <varlistentry>
          <term>
            <command>evbGetEditorX</command> <replaceable>name</replaceable>
          </term>
          <listitem>
              <para>
                Returns the X coordinate of the current editor position.
              </para>
          </listitem>
      </varlistentry>
      <varlistentry>
          <term>
            <command>evbGetEditorY</command> <replaceable>name</replaceable>
          </term>
          <listitem>
              <para>
                Returns the Y coordinate of the current editor position.
              </para>
          </listitem>
      </varlistentry>
      <varlistentry>
          <term><command>evbSetServiceSuffix</command> <parameter>evbname suffix</parameter></term>
          <listitem>
              <para>
                Sets the new service name <parameter>suffix</parameter> for the
                event builder <parameter>evbname</parameter>
              </para>
          </listitem>
      </varlistentry>
      <varlistentry>
          <term><command>rmevb</command> <parameter>evbname</parameter></term>
          <listitem>
              <para>
                Removes the event builder definition for <parameter>evbname</parameter>.
                Note that this also removes the data source definitions for that
                event builder.
              </para>
          </listitem>
      </varlistentry>
      <varlistentry>
          <term><command>evbInfo</command> <parameter>evbname</parameter></term>
          <listitem>
              <para>
                Returns a dict that contains a description of the event builder
                <parameter>evbname</parameter>.  The dict has the following keys:
              </para>
              <variablelist>
                <varlistentry>
                    <term><literal>name</literal></term>
                    <listitem>
                        <para>
                          The name of the event builder.  This should be the
                          same as <parameter>evbname</parameter>.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><literal>host</literal></term>
                    <listitem>
                        <para>
                          The host in which the event builder will run.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><literal>dt</literal></term>
                    <listitem>
                        <para>
                          The coincidence interval that will be used to build
                          events.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><literal>prefix</literal></term>
                    <listitem>
                        <para>
                          The service name prefix for the event builder.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><literal>suffix</literal></term>
                    <listitem>
                        <para>
                          The service name suffix for the event builder.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><literal>build</literal></term>
                    <listitem>
                        <para>
                          Boolean true if event building is enabled an false
                          if not.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><literal>sourceid</literal></term>
                    <listitem>
                        <para>
                          The source id to be associated with output events.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><literal>tspolicy</literal></term>
                    <listitem>
                        <para>
                          The textual representation of the timestamp policy;
                          one of <literal>earliest</literal>, <literal>latest</literal>
                          or <literal>average</literal>.
                        </para>
                    </listitem>
                </varlistentry>
              </variablelist>
          </listitem>
      </varlistentry>
      <varlistentry>
          <term><command>evbList</command></term>
          <listitem>
              <para>
                Returns a (possibly empty) list of dicts that describe the
                known event builders.  See <command>evbInfo</command> above
                for a description of the dicts..
              </para>
          </listitem>
      </varlistentry>
       <varlistentry>
           <term><command>addSource</command> <replaceable>evbname srcname host path ring ids ?options-dict?</replaceable></term>
           <listitem>
               <para>
                Adds a data source program to the event builder
                <parameter>evbname</parameter>.  The source is specified by its
                name; <parameter>srcname</parameter>, the program location in the
                file system;
                <parameter>path</parameter>, the URI of the ring buffer from
                which it takes data items; <parameter>ring</parameter>, and
                an optional dict that provides the values for less
                frequently specified options.  Note that the combination of
                <parameter>evbname</parameter> and <parameter>srcname</parameter>
                must be unique.
               </para>
               <para>
                The <parameter>ids</parameter> parameter is a list of integers
                that will be the set of source ids the data source will
                transmit to the event builder.
               </para>
               <para>
                The specification is intended for use with ring fragment sources,
                however it can naturally work for any data source program
                that is compatible with that program's command line
                options.
               </para>
               <para>
                The optional dict will be probed for the keys described below.
                Any additional keys are silently ignored.  Keys which do matter
                provide values for parameters that have been given reasonable
                default values:
               </para>
               <variablelist>
                <varlistentry>
                    <term><literal>info</literal></term>
                    <listitem>
                        <para>
                          Provides an information string that is passed to the
                          event builder and displayed on the event builder's GUI.
                          This string is normally used to provide a description of
                          the data source and its purpose.  This defaults to
                          an empty string.
                        </para>
                    </listitem>
                </varlistentry>
               </variablelist>
           </listitem>
       </varlistentry>
       <varlistentry>
           <term><literal>expectBodyHeaders</literal></term>
           <listitem>
               <para>
                NSCLDAQ-11.0 ring items can either have headers that provide a timestamp
                and data source id or they may omit this information.  If it is
                known in advance that all ring items will have body headers,
                this value should be <literal>true</literal>.  If some items
                may not have body headers, the data source will need help
                assigning data source ids and timestamps via the
                <literal>defaultId</literal> and <literal>timestampExtractor</literal>
                parameters described below.
               </para>
           </listitem>
       </varlistentry>
       <varlistentry>
           <term><literal>defaultId</literal></term>
           <listitem>
               <para>
                If a ring item does not have a body header, this parameter provides
                the value to be used.  The default value is <literal>0</literal>
                and that only has to be overidden if <literal>expectBodyHeaders</literal>
                is a boolean <literal>false</literal>.
               </para>
           </listitem>
       </varlistentry>
       <varlistentry>
           <term><literal>timestampExtractor</literal></term>
           <listitem>
               <para>
                Provides the filesystem path to a shared library with code that
                knows how to extract timestamps from item that don't have
                body headers.  This is only needed if <literal>expectBodyHeaders</literal>
                is <literal>false</literal> as otherwise the body header timestamp
                is used.
               </para>
           </listitem>
       </varlistentry>
       <varlistentry>
           <term><command>dsSetHost</command> <replaceable>evbname srcname host</replaceable></term>
           <listitem>
               <para>
                Changes the <parameter>host</parameter> in which the data source
                <parameter>srcname</parameter> for the event builder
                <parameter>evbname</parameter> runs.
               </para>
           </listitem>
       </varlistentry>
      <varlistentry>
          <term><command>dsSetPath</command> <replaceable>evbname srcname path</replaceable></term>
          <listitem>
              <para>
               Changes the  file system <parameter>path</parameter> of the event
               source specified by the event builder <parameter>evbname</parameter>
               and its source <parameter>srcname</parameter>.
              </para>
          </listitem>
      </varlistentry>
      <varlistentry>
          <term><command>dsSetRingUri</command> <replaceable>evbname srcname uri</replaceable></term>
          <listitem>
              <para>
               Changes the input ring buffer of the data source identified by
               <parameter>evbname</parameter> and <parameter>srcname</parameter>
               to the Ring identifed by the <parameter>uri</parameter>.
              </para>
          </listitem>
      </varlistentry>
      <varlistentry>
          <term><command>dsSetIds</command> <replaceable>evbname scrname ids</replaceable></term>
          <listitem>
              <para>
               The list of integers <parameter>ids</parameter> will become
               the set of data source Ids that will be transmitted by the
               event source <parameter>evbname</parameter>,
               <parameter>srcname</parameter>
              </para>
          </listitem>
      </varlistentry>
      <varlistentry>
          <term><command>dsSetInfo</command> <replaceable>evbname srcname info</replaceable></term>
          <listitem>
              <para>
               Replaces the information string for the data source identified
               by <parameter>evbname</parameter> and <parameter>srcname</parameter>
               with the contents of the <parameter>info</parameter> parameter...
              </para>
          </listitem>
      </varlistentry>
      <varlistentry>
          <term><command>dsSetDefaultId</command> <replaceable>evbname srcname id</replaceable></term>
          <listitem>
              <para>
                Replaces the source id that the data source identified by
                <parameter>evbname</parameter>, <parameter>srcname</parameter>
                uses for items with no body header with the value of
                <parameter>info</parameter>.  <parameter>info</parameter>
                must be a positive integer.
              </para>
          </listitem>
      </varlistentry>
      <varlistentry>
          <term><command>dsExpectBodyHeaders</command> <replaceable>evbname srcname</replaceable></term>
          <listitem>
              <para>
                Configures the data source identified by <parameter>evbname</parameter>,
                <parameter>srcname</parameter> to accept only data with full
                body headers.  Items without full body headers will result in an
                error if encountered.
              </para>
          </listitem>
      </varlistentry>
      <varlistentry>
          <term><command>dsDontExpectBodyHeaders</command> <replaceable>evbname srcname</replaceable></term>
          <listitem>
              <para>
                Indicates the event source <parameter>evbname</parameter>,
                <parameter>srcname</parameter> may have to process items that
                don't have body headers.  See <command>dssetDefaultId</command>
                and <command>dsSetTimestampExtractor</command> for information
                about how those items will be processed.
              </para>
          </listitem>
      </varlistentry>
      <varlistentry>
          <term><command>dsSetTimestampExtractor</command> <parameter>evbname dsname libpath</parameter></term>
          <listitem>
              <para>
                If a data source encounters an item that has no body header it
                cannot automatically extract the timestamp or source id from the
                item.  If the data source,
                <parameter>evbname</parameter>, <parameter>dsname</parameter> has been enabled to process
                items witout a body header this method specifies
                <parameter>libpath</parameter> as the shared library containing
                code to extract timestamps from events.
              </para>
          </listitem>
      </varlistentry>
      <varlistentry>
          <term>
            <command>dsSetEditorPosition</command> <replaceable>evbname dsname x y</replaceable>
          </term>
          <listitem>
              <para>
                Associates a canvas position of <parameter>x</parameter>, <parameter>y</parameter>
                with the data source <parameter>dsname</parameter> that sends data
                to the event builder <parameter>evbname</parameter>.
              </para>
          </listitem>
      </varlistentry>
      <varlistentry>
          <term>
            <command>dsGetEditorXPosition</command> <replaceable>evbname dsname</replaceable>
          </term>
          <listitem>
              <para>
                Returns the X coordinate of the editor position last set for the
                data source <parameter>dsname</parameter> that sends data to
                <parameter>evbname</parameter>.
              </para>
          </listitem>
      </varlistentry>
      <varlistentry>
          <term>
            <command>dsGetEditorYPosition</command> <replaceable>evbname dsname</replaceable>
          </term>
          <listitem>
              <para>
                Returns the Y coordinate of the editor position last set for the
                data source <parameter>dsname</parameter> that sends data to
                <parameter>evbname</parameter>.
              </para>
          </listitem>
      </varlistentry>
      <varlistentry>
          <term><command>dsInfo</command> <replaceable>evbname dsname</replaceable></term>
          <listitem>
              <para>
                Returns a dict that describes the configuration of the data source
                <parameter>evbname</parameter>, <parameter>dsname</parameter>.
                The dict contains the following keys:
              </para>
              <variablelist>
                <varlistentry>
                    <term><literal>name</literal></term>
                    <listitem>
                        <para>
                          Name of the event source.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><literal>host</literal></term>
                    <listitem>
                        <para>
                          Name, or IP address of the host that will run the
                          data source program.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><literal>path</literal></term>
                    <listitem>
                        <para>
                          Filesystem path (in <literal>host</literal>) to the
                          program that is the dta source.
                        </para>
                    </listitem>
                </varlistentry>
                  <varlistentry>
                      <term><literal>info</literal></term>
                      <listitem>
                          <para>
                            Information string displayed in the event builder GUI
                            for this source when it is connected.
                          </para>
                      </listitem>
                  </varlistentry>
                  <varlistentry>
                      <term><literal>ring</literal></term>
                      <listitem>
                          <para>
                            Contains the URI of the ringbuffer from which the program
                            accepts input items.
                          </para>
                      </listitem>
                  </varlistentry>
                  <varlistentry>
                      <term><literal>ids</literal></term>
                      <listitem>
                          <para>
                            Contains a list of ids the data source can transmit to the
                            event builder.
                          </para>
                      </listitem>
                  </varlistentry>
                  <varlistentry>
                      <term><literal>defaultId</literal></term>
                      <listitem>
                          <para>
                            The id the data source will assign to items that don't have
                            body headers.
                          </para>
                      </listitem>
                  </varlistentry>
                  <varlistentry>
                      <term><literal>timestampExtractor</literal></term>
                      <listitem>
                          <para>
                            Filesystem path to a shared library that contains code
                            that knows how to extract a timestamp from items that don't
                            have body headers.
                          </para>
                      </listitem>
                  </varlistentry>
                  <varlistentry>
                      <term><literal>expectBodyHeaders</literal></term>
                      <listitem>
                          <para>
                            Boolean true if the data source will only accept events
                            that contain body headers.  False otherwise and
                            <literal>defaultId</literal> and <literal>timestampExtractotr</literal>
                            must make sense.
                          </para>
                      </listitem>
                  </varlistentry>
              </variablelist>
            </listitem>
          </varlistentry>
        <varlistentry>
            <term><literal>listSources</literal> <replaceable>evbname</replaceable></term>
            <listitem>
                <para>
                  Returns a list of dicts describing the data sources defined
                  for the event builder <parameter>evbname</parameter>.  The
                  dict is described above in <command>dsInfo</command>.
                </para>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><command>rmSource</command> <replaceable>evbName dsName</replaceable></term>
            <listitem>
                <para>
                  Removes the definition of the event source described by
                  <parameter>evbName</parameter>, <parameter>dsName</parameter>
                </para>
            </listitem>
        </varlistentry>
     </variablelist>
    
  </refsect1>

</refentry>
<!-- /manpage -->
<!-- manpage 3python -->

<refentry id="python3_vardbevb">
  <refentryinfo>
    <author>
        <personname>
            <firstname>Ron</firstname>
            <surname>Fox</surname>
        </personname>
    </author>
    <productname>NSCLDAQ</productname>
    <productnumber></productnumber>
  </refentryinfo>
  <refmeta>
   <refentrytitle id='python3_vardbevb_title'>VardbEvb</refentrytitle>
   <manvolnum>3python</manvolnum>
         <refmiscinfo class='empty'></refmiscinfo>
  </refmeta>
  <refnamediv>
   <refname>VardbEvb</refname>
   <refpurpose>Python bindings to the Variable Database event builder definitions</refpurpose>
  </refnamediv>
  
  <refsynopsisdiv>
   <synopsis>
    <cmdsynopsis>
      <command>
from nscldaq.vardb import VardbEvb
      </command>
    </cmdsynopsis>
    <cmdsynopsis>
      <command>
api = VardbEvb.VardbEvb(dbUri)
      </command>
    </cmdsynopsis>
    <cmdsynopsis>
      <command>
api.schemaExists()
      </command>
      <command>
api.createSchema()
      </command>
      <command>
api.createEventBuilder(name, host, dt, ring[, keyword-params])
      </command>
      <command>
api.setEvbHost(evbName, host)
      </command>
      <command>
api.setEvbCoincidenceLevel(name, dt)        
      </command>
      <command>
api.setEvbRing(name, ring)
      </command>
      <command>
api.setEvbSourceId(evbName, id)
      </command>
      <command>
api.setEvbServicePrefix(evbName, prefix)
      </command>
      <command>
api.disableEvbBuild(evbName)
      </command>
      <command>
api.enableEvbBuild(evbName)
      </command>
      <command>
api.setEvbTimestampPolicy(evbName, policy)
      </command>
      <command>
api.setEvbServiceSuffix(evbName, suffix)
      </command>
      <command>
api.setEditorPosition(evbName, x, y)        
      </command>
      <command>
api.getEditorXPosition(evbName)
      </command>
      <command>
api.getEditorYPosition(evbName)
      </command>
      <command>
api.rmEventBuilder(evbName)
      </command>
      <command>
info = api.evbInfo(evbName)
      </command>
      <command>
infoList = api.listEventBuilders()
      </command>
    </cmdsynopsis>
    <cmdsynopsis>
      <command>
api.addDataSource(evbName, srcName, host, path, ring ids[, option-dict])
      </command>
      <command>
api.dsSetHost(evbName, srcName, host)
      </command>
      <command>
api.dsSetPath(evbName, srcName, path)
      </command>
      <command>
api.dsSetRingUri(evbName, srcName, uri)
      </command>
      <command>
api.dsSetInfo(evbName, srcName, info)
      </command>
      <command>
api.dsSetDefaultId(evbName, srcName, id)
      </command>
      <command>
api.dsExpectBodyHeaders(evbName, srcName)
      </command>
      <command>
api.dsDontExpectBodyHeaders(evbName, srcName)
      </command>
      <command>
api.dsSetTimestampExtractor(evbName, srcName, libPath)
      </command>
      <command>
api.dsSetEditorPosition(evbName, srcName, x, y)    
      </command>
      <command>
api.dsGetEditorXPosition(evbName, srcName)
      </command>
      <command>
api.dsGetEditorYPosition(evbName, srcName)
      </command>
      <command>
info = api.dsInfo(evbName, srcName)
      </command>
      <command>
infoList = api.listDataSources(evbName)
      </command>
      <command>
api.rmDataSource(evbName, srcName)
      </command>
    </cmdsynopsis>
    
    
   </synopsis>
  </refsynopsisdiv>
  <refsect1>
   <title>DESCRIPTION</title>
   <para>
    This module provides Python bindings to the API that describes event builders
    and their source in the variable database.  The module allows you to
    construct an API object that is bound to a specified variable database via
    a <parameter>dbUri</parameter>. Once constructed, methods of that object
    allow you to maniuplate and query the database at a relativel high level
    of abstraction.
   </para>
   <para>
    The <literal>METHODS</literal> section below describes the methods
    that are available on the api object.
   </para>
  </refsect1>
  <refsect1>
   <title>
  METHODS
   </title>
   <variablelist>
    <varlistentry>
        <term>
          <cmdsynopsis>
            <command>
      api.schemaExists()
            </command>
          </cmdsynopsis>  
        </term>
        <listitem>
            <para>
              Returns <literal>True</literal> if the database already has
              the structures in place to represent event builder and data source
              definitions.  See <methodname>createSchema</methodname> below
              for what to do if these strutures don't already exist.
            </para>
        </listitem>
    </varlistentry>    
    <varlistentry>
        <term>
          <cmdsynopsis>
            <command>
      api.createSchema()
            </command>
          </cmdsynopsis>  
        </term>
        <listitem>
            <para>
              Creates the structures needed to represent event builders
              and their data sources.  If those structures already exist,
              this is a silent No_op.   When creating an Api object it is
              therefore best to either create the schema immediately or to
              invoke <methodname>createSchema</methodname> if
              <methodname>schemaExists</methodname> returns
              <literal>False</literal>
            </para>
        </listitem>
    </varlistentry>      
     <varlistentry>
         <term>
          <cmdsynopsis>
            <command>
      api.createEventBuilder(name, host, dt[, keyword-params])
            </command>
          </cmdsynopsis>          
         </term>
         <listitem>
             <para>
              Creates a new event builder definition.  <parameter>name</parameter>
              is the name of the definition.  The event buidler will be
              run in the <parameter>host</parameter> system.  The <parameter>host</parameter>
              can either be an unambiguous DNS name or a dotted IP address.
              <parameter>dt</parameter> is the number of ticks in the coincidence
              interval used to build events.
             </para>
             <para>
              The optional <parameter>keyword-params</parameter> are keyword
              parameters the allow more control over the event builder definition.
              Allowed keywords are:
             </para>
             <variablelist>
              <varlistentry>
                  <term><literal>sourceId</literal></term>
                  <listitem>
                      <para>
                        Specifies the output source id.  By default this is
                        <literal>0</literal>.  The source id must be unique
                        over the entire data acquisition system.  The source
                        id is only relevent if the event builder's
                        <literal>build</literal> parameter is <literal>true</literal>,
                        see below.
                      </para>
                  </listitem>
              </varlistentry>
              <varlistentry>
                  <term><literal>servicePrefix</literal></term>
                  <listitem>
                      <para>
                        Specifies the prefix of the service name the event builder
                        advertises with the port manager. The service is used
                        by event sources to connect with and send event fragments
                        to the event builder.  Defaults to <literal>ORDERER</literal>
                      </para>
                  </listitem>
              </varlistentry>
              <varlistentry>
                  <term><literal>build</literal></term>
                  <listitem>
                      <para>
                        Boolean parameter that, when <literal>true</literal>
                        specifies that the event builder will build fragments
                        together into events formed from fragments that are
                        within  <parameter>dt</parameter> ticks of the first
                        fragment in a run of fragments.  If <literal>false</literal>,
                        the event builder will simply output totally ordered fragments.
                      </para>
                  </listitem>
              </varlistentry>
              <varlistentry>
                  <term><literal>tsPolicy</literal></term>
                  <listitem>
                      <para>
                        Specifies the policy that describes how the timestamp
                        of built events is computed.  This can be one of:
                        <literal>"earliest"</literal>, the timestamp of the first
                        fragment in the events will be used, <literal>"latest"</literal>,
                        the timestamp in the last fragment in an event will be used,
                        or <literal>average</literal>, the average of all timestamps
                        in the fragments in an event will be used.
                      </para>
                  </listitem>
              </varlistentry>
              <varlistentry>
                  <term><literal>serviceSuffix</literal></term>
                  <listitem>
                      <para>
                        Specifies the suffix of the service name the event builder
                        advertises with the port manager.
                      </para>
                  </listitem>
              </varlistentry>
             </variablelist>
         </listitem>
     </varlistentry>     
     <varlistentry>
         <term>
          <cmdsynopsis>
            <command>
      api.setEvbHost(evbName, host)
            </command>
          </cmdsynopsis>
         </term>
         <listitem>
             <para>
              Changes the <parameter>host</parameter> in which an event builder
              named <parameter>evbName</parameter> will run.
             </para>
         </listitem>
     </varlistentry>
     <varlistentry>
         <term>
          <cmdsynopsis>
            <command>
      api.setEvbSourceId(evbName, id)
            </command>
          </cmdsynopsis>
         </term>
         <listitem>
             <para>
              Sets the source id of the event buidler named
              <parameter>evbName</parameter> to <parameter>id</parameter>.
             </para>
         </listitem>
     </varlistentry>
     <varlistentry>
         <term>
            <command>
        api.setEvbCoincidenceLevel(name, dt)        
          </command>
         </term>
         <listitem>
             <para>
              Sets the coincidence interval for the event builder
              <parameter>name</parameter> to be <parameter>dt</parameter>
              timestamp ticks.
             </para>
         </listitem>
     </varlistentry>
     <varlistentry>
         <term>
            <command>
        api.setEvbRing(name, ring)
            </command>
         </term>
         <listitem>
             <para>
              Sets the name of the output ring buffer for the event builder
              <parameter>name</parameter> to <parameter>ring</parameter>.
             </para>
         </listitem>
     </varlistentry>
     <varlistentry>
         <term>
          <cmdsynopsis>
            <command>
      api.setEvbServicePrefix(evbName, prefix)
            </command>
          </cmdsynopsis>
         </term>
         <listitem>
             <para>
              Sets the service name prefix for the event builder
              <parameter>evbName</parameter> to <parameter>prefix</parameter>.
             </para>
         </listitem>
     </varlistentry>     
     <varlistentry>
         <term>
          <cmdsynopsis>
            <command>
      api.disableEvbBuild(evbName)
            </command>
          </cmdsynopsis>
         </term>
         <listitem>
             <para>
              Turns off event building for the event builder
              <parameter>evbName</parameter>.  This means that event builder
              will only output ordered fragments rather than events built
              from those fragments.
             </para>
         </listitem>
     </varlistentry>     
     <varlistentry>
         <term>
          <cmdsynopsis>
            <command>
      api.enableEvbBuild(evbName)
            </command>
          </cmdsynopsis>
         </term>
         <listitem>
             <para>
              Enables event building for the event builder
              <parameter>evbName</parameter>.  This means that the
              event buidler will emit events built from runs of event fragments
              that are within <parameter>dt</parameter> of the first fragment
              in the run.
             </para>
         </listitem>
     </varlistentry>     
     <varlistentry>
         <term>
          <cmdsynopsis>
            <command>
      api.setEvbTimestampPolicy(evbName, policy)
            </command>
          </cmdsynopsis>
         </term>
         <listitem>
             <para>
              Updates the timestamp policy of the event builder
              <parameter>evbName</parameter> to <parameter>policy</parameter>.
              <parameter>policy</parameter> is a string that describes one of the
              following timestamp policies
             </para>
             <variablelist>
              <varlistentry>
                  <term><literal>"earliest"</literal></term>
                  <listitem>
                      <para>
                        Output events are assigned the timestamp from the first
                        event fragment in the run of fragments that comprise it.
                      </para>
                  </listitem>
              </varlistentry>
              <varlistentry>
                  <term><literal>"latest"</literal></term>
                  <listitem>
                      <para>
                        Output events are assigned the timestamp from the last
                        event fragment in the run of fragments that comprise it.
                      </para>
                  </listitem>
              </varlistentry>
              <varlistentry>
                  <term><literal>"average"</literal></term>
                  <listitem>
                      <para>
                        Output events are assigned a timestamp computed from the
                        average timestamp of the fragments that comprise it.
                      </para>
                  </listitem>
              </varlistentry>
             </variablelist>
         </listitem>
     </varlistentry>     
     <varlistentry>
         <term>
          <cmdsynopsis>
            <command>
      api.setEvbServiceSuffix(evbName, suffix)
            </command>
          </cmdsynopsis>
         </term>
         <listitem>
             <para>
              Sets the service name suffix for the event builder
              <parameter>evbName</parameter> to the string <parameter>suffix</parameter>.
             </para>
         </listitem>
     </varlistentry>
     <varlistentry>
         <term>
          <command>
    api.setEditorPosition(evbName, x, y)        
          </command> 
         </term>
         <listitem>
             <para>
              Associate the position <parameter>x</parameter>, <parameter>y</parameter>
              with the event builder <parameter>evbName</parameter>.  This position
              is used by the experiment editor to restore the graphical
              representation of the event builder to its original position
              on the canvas when the configuration is restored.
             </para>
         </listitem>
     </varlistentry>
     <varlistentry>
         <term>
          <command>
    api.getEditorXPosition(evbName)
          </command>
         </term>
         <listitem>
             <para>
              Return the X coordinate of the editor position (set with
              e.g. <methodname>setEditorPosition</methodname>).
             </para>
         </listitem>
     </varlistentry>     
     <varlistentry>
         <term>
          <command>
    api.getEditorYPosition(evbName)
          </command>
         </term>
         <listitem>
             <para>
              Returns the Y coordinate of the editor position (set with e.g.
              <methodname>setEditorPosition</methodname>).
             </para>
         </listitem>
     </varlistentry>     
     <varlistentry>
         <term>
          <cmdsynopsis>
            <command>
      api.rmEventBuilder(evbName)
            </command>
          </cmdsynopsis>
         </term>
         <listitem>
             <para>
              Removes the definition for the event builder
              <parameter>evbName</parameter> from the database.  Note that this
              also removes any data source definitions for that event builder.
             </para>
         </listitem>
     </varlistentry>     
     <varlistentry>
         <term>
          <cmdsynopsis>
            <command>
      info = api.evbInfo(evbName)
            </command>
          </cmdsynopsis>
         </term>
         <listitem>
             <para>
              Returns a dict that describes the event builder
              <parameter>evbName</parameter>.  The dict has the following
              key/value pairs:
             </para>
             <variablelist>
              <varlistentry>
                  <term><literal>'name'</literal></term>
                  <listitem>
                      <para>
                        The name of the event builder.  This will be the same
                        as <parameter>evbName</parameter>, and is therefore
                        redundant in this usage, however necessary in the
                        dicts returned by <methodname>listEventBuilders</methodname>
                        described below.
                      </para>
                  </listitem>
              </varlistentry>
              <varlistentry>
                  <term>'host'</term>
                  <listitem>
                      <para>
                        The host in which the event builder will run. Note that
                        this value has not been processed in any way from the
                        value passed when the event builder was created/configured.
                        Therefore this can be either a dotted IP address or
                        an unambiguous DNS name.
                      </para>
                  </listitem>
              </varlistentry>
              <varlistentry>
                  <term>'coincidenceInterval'</term>
                  <listitem>
                      <para>
                        The number of ticks in the event building coincidence
                        interval.  This will be an integer.
                      </para>
                  </listitem>
              </varlistentry>
              <varlistentry>
                  <term>'servicePrefix'</term>
                  <listitem>
                      <para>
                        The prefix of the service name the event builder
                        will use to advertise itself via the port manager.
                      </para>
                  </listitem>
              </varlistentry>
              <varlistentry>
                  <term>'serviceSuffix'</term>
                  <listitem>
                      <para>
                        The suffix of the service the event builder will
                        use to advertise iteself via the port manager.
                      </para>
                  </listitem>
              </varlistentry>
              <varlistentry>
                  <term>'build'</term>
                  <listitem>
                      <para>
                        This will a boolean.  The value will be
                        <literal>True</literal> if event building is enabled
                        or <literal>False</literal> if not.
                      </para>
                  </listitem>
              </varlistentry>
              <varlistentry>
                  <term>'timestampPolicy'</term>
                  <listitem>
                      <para>
                        This will be the stringized timestamp policy; one of the
                        strings <literal>'earliest'</literal>,
                        <literal>'latest'</literal> or <literal>'average'</literal>.
                      </para>
                  </listitem>
              </varlistentry>
             </variablelist>
         </listitem>
     </varlistentry>     
     <varlistentry>
         <term>
          <cmdsynopsis>
            <command>
      infoList = api.listEventBuilders()
            </command>
          </cmdsynopsis>
         </term>
         <listitem>
             <para>
              Returns a list of dicts that describe all event builder definitions.
              See <methodname>evbInfor</methodname> above for a description of the
              keys each dict will have.
             </para>
         </listitem>
     </varlistentry>     
     <varlistentry>
         <term>
          <cmdsynopsis>
            <command>
      api.addDataSource(evbName, srcName, host, path, ring ids[, options])
            </command>
          </cmdsynopsis>
         </term>
         <listitem>
             <para>
              Adds a new data source to the event builder
              <parameter>evbName</parameter>.  <parameter>srcName</parameter>
              will be the name of the new source which will run the program
              <parameter>path</parameter> in the computer <parameter>host</parameter>.
              The data source will accept fragments from the ring buffer
              specified by the <parameter>ringUri</parameter> URI.  It
              will emit fragments with ids in the iterable object
              <parameter>ids</parameter>.
             </para>
             <para>
              The optional parameters <parameter>options</parameter> are keyword
              parameters that can further specify the initial configuration
              of the data source.  Recognized keywords are:
             </para>
             <variablelist>
              <varlistentry>
                  <term><literal>info</literal></term>
                  <listitem>
                      <para>
                        Data sources can place an information string on the
                        event builder GUI.  The <literal>info</literal>
                        keyword value is the string this data source places.
                        Normally this is a description of what the data source
                        provides (e.g. <literal>S800 event data</literal>).
                        This parameter defaults to the empty string.
                      </para>
                  </listitem>
              </varlistentry>
              <varlistentry>
                  <term><literal>bodyHeaders</literal></term>
                  <listitem>
                      <para>
                        Specifies whether the data source will expect all items
                        to have body headers.  Body headers provide a payload
                        independent data structure that, among other things,
                        contains the timestamp and source id of an event fragment.
                      </para>
                      <para>
                        When this is boolean is <literal>True</literal>, it is
                        not necessary to provide additional information/code
                        to extract this information from the fragment payload
                        itself.  When <literal>False</literal>, a timestamp
                        extractor and default source id must be provided
                        to help out when fragments don't have body headers.
                      </para>
                  </listitem>
              </varlistentry>
              <varlistentry>
                  <term><literal>defaultId</literal></term>
                  <listitem>
                      <para>
                        Provides the default source id.  This id is used to
                        tag ring fragments that don't have body headers.
                      </para>
                  </listitem>
              </varlistentry>
              <varlistentry>
                  <term><literal>tsExtractor</literal></term>
                  <listitem>
                      <para>
                        Specifies the path to a shared object library that contains
                        code that can extract timestamps from items that don't
                        have body headers.
                      </para>
                  </listitem>
              </varlistentry>
             </variablelist>
         </listitem>
     </varlistentry>     
     <varlistentry>
         <term>
          <cmdsynopsis>
            <command>
      api.dsSetHost(evbName, srcName, host)
            </command>
          </cmdsynopsis>
         </term>
         <listitem>
             <para>
              Set the host in which a data source will be run to
              <parameter>host</parameter>.  The <parameter>host</parameter>
              parameter can be either an unambiguous DNS name or a dotted IP
              address.  The data source is selected by the
              <parameter>evbName</parameter> (event builder name) and
              <parameter>srcName</parameter> (name of source for
              <parameter>evbName</parameter>).
             </para>
         </listitem>
     </varlistentry>     
     <varlistentry>
         <term>
          <cmdsynopsis>
            <command>
      api.dsSetPath(evbName, srcName, path)
            </command>
          </cmdsynopsis>
         </term>
         <listitem>
             <para>
              Sets the path to the program that will be run to <parameter>path</parameter>.
              This is normally used to select a <application>ringFragmentSource</application>
              from a different installation version or when hosts in the system
              have NSCLDAQ installed in different places.  It can also be used
              to select a different data source program that follows the same
              command line parameterization as the
              <application>ringFragmentSource</application> program.
             </para>
             <para>
              The data source is selected by the
              <parameter>evbName</parameter> (event builder name) and
              <parameter>srcName</parameter> (name of source for
              <parameter>evbName</parameter>).
             </para>
         </listitem>
     </varlistentry>     
     <varlistentry>
         <term>
          <cmdsynopsis>
            <command>
      api.dsSetRingUri(evbName, srcName, uri)
            </command>
          </cmdsynopsis>
         </term>
         <listitem>
             <para>
              Sets the URI of the ring from which the data source takes
              fragments to <parameter>uri</parameter>.
             </para>
             <para>
              The data source is selected by the
              <parameter>evbName</parameter> (event builder name) and
              <parameter>srcName</parameter> (name of source for
              <parameter>evbName</parameter>).
             </para>
         </listitem>
     </varlistentry>     
     <varlistentry>
         <term>
          <cmdsynopsis>
            <command>
      api.dsSetInfo(evbName, srcName, info)
            </command>
          </cmdsynopsis>
         </term>
         <listitem>
             <para>
              Sets the info string for a data source to
              <parameter>info</parameter>
             </para>
             <para>
              The data source is selected by the
              <parameter>evbName</parameter> (event builder name) and
              <parameter>srcName</parameter> (name of source for
              <parameter>evbName</parameter>).
             </para>
         </listitem>
     </varlistentry>     
     <varlistentry>
         <term>
          <cmdsynopsis>
            <command>
      api.dsSetDefaultId(evbName, srcName, id)
            </command>
          </cmdsynopsis>
         </term>
         <listitem>
             <para>
              Sets the default source id of a data source to
              <parameter>id</parameter>.  The default source id is the one assigned
              to fragments that come from ring items that don't have a bodyheader.
             </para>
             <para>
              The data source is selected by the
              <parameter>evbName</parameter> (event builder name) and
              <parameter>srcName</parameter> (name of source for
              <parameter>evbName</parameter>).
             </para>
         </listitem>
     </varlistentry>     
     <varlistentry>
         <term>
          <cmdsynopsis>
            <command>
      api.dsExpectBodyHeaders(evbName, srcName)
            </command>
          </cmdsynopsis>
         </term>
         <listitem>
             <para>
              Tells a data source that all of its ring items will have body
              headers.  When this is <literal>True</literal>, there is no need
              to specify a timestamp extractor or a default source id.
             </para>
             <para>
              The data source is selected by the
              <parameter>evbName</parameter> (event builder name) and
              <parameter>srcName</parameter> (name of source for
              <parameter>evbName</parameter>).
             </para>
         </listitem>
     </varlistentry>     
     <varlistentry>
         <term>
          <cmdsynopsis>
            <command>
      api.dsDontExpectBodyHeaders(evbName, srcName)
            </command>
          </cmdsynopsis>
         </term>
         <listitem>
             <para>
              Tells a data source that not all of its ring items will have body
              headers.  When this is the case, a timestamp extractor and
              default source Id must be specified.
             </para>
             <para>
              The data source is selected by the
              <parameter>evbName</parameter> (event builder name) and
              <parameter>srcName</parameter> (name of source for
              <parameter>evbName</parameter>).
             </para>
         </listitem>
     </varlistentry>     
     <varlistentry>
         <term>
          <cmdsynopsis>
            <command>
      api.dsSetTimestampExtractor(evbName, srcName, libPath)
            </command>
          </cmdsynopsis>
         </term>
         <listitem>
             <para>
              Sets a timestamp extractor shared library for a data source
              to <parameter>libPath</parameter>.  The code in this library
              is used to extract a timestamp from fragment payloads of
              ring items that don't have body headers.
             </para>
             <para>
              The data source is selected by the
              <parameter>evbName</parameter> (event builder name) and
              <parameter>srcName</parameter> (name of source for
              <parameter>evbName</parameter>).
             </para>
         </listitem>
     </varlistentry>
     <varlistentry>
         <term>
          <command>
    api.dsSetEditorPosition(evbName, srcName, x, y)    
          </command>
         </term>
         <listitem>
             <para>
              Associates a position; <parameter>x</parameter>, <parameter>y</parameter>
              with the data source for <parameter>evbName</parameter> named
              <parameter>srcName</parameter>.  The experiment uses this position
              to restore the graphical representation of that event builder data
              source to its previous position on the editor canvas when restoring
              a configuration into the editor.
             </para>
         </listitem>
     </varlistentry>
     <varlistentry>
         <term>
          <command>
    api.dsGetEditorXPosition(evbName, srcName)
          </command>
         </term>
         <listitem>
             <para>
              Returns the X coordinate of the position associated with the
              data source named <parameter>srcName</parameter> that sends
              data to <parameter>evbName</parameter>.  This position was
              set with e.g. <methodname>dsSetEditorPosition</methodname>.
             </para>
         </listitem>
     </varlistentry>     
     <varlistentry>
         <term>
          <command>
    api.dsGetEditorYPosition(evbName, srcName)
          </command>
         </term>
         <listitem>
             <para>
              Returns the Y coordinate of the position associated with the
              data source named <parameter>srcName</parameter> that sends
              data to <parameter>evbName</parameter>.  This position was
              set with e.g. <methodname>dsSetEditorPosition</methodname>.
             </para>
         </listitem>
     </varlistentry>     
          

     <varlistentry>
         <term>
          <cmdsynopsis>
            <command>
      info = api.dsInfo(evbName, srcName)
            </command>
          </cmdsynopsis>
         </term>
         <listitem>
             <para>
              Returns information about the data source selected by the
              <parameter>evbName</parameter> (event builder name) and
              <parameter>srcName</parameter> (name of source for
              <parameter>evbName</parameter>).
             </para>
             <para>
              The information is returned as a dict. The dict contains
              the following key/value pairs:
             </para>
             <variablelist>
              <varlistentry>
                  <term><literal>'name'</literal></term>
                  <listitem>
                      <para>
                        Name of the data source.  This should be the same as
                        <parameter>srcName</parameter>.
                      </para>
                  </listitem>
              </varlistentry>
              <varlistentry>
                  <term><literal>'host'</literal></term>
                  <listitem>
                      <para>
                        Host in which the data source will run.  This is the
                        host provided when defining/configuring the data source.
                        The host is not processed in any way and therefore
                        could be a DNS hostname or a dotted IP address.
                      </para>
                  </listitem>
              </varlistentry>
              <varlistentry>
                  <term><literal>'path'</literal></term>
                  <listitem>
                      <para>
                        The path to the event builder data source program.
                        This is normally the path to a
                        <application>ringFragmentSource</application> in an
                        NSCLDAQQ installation.
                      </para>
                  </listitem>
              </varlistentry>
              <varlistentry>
                  <term><literal>'info'</literal></term>
                  <listitem>
                      <para>
                        The information string displayed to describe the data
                        source on the event builder's GUI.
                      </para>
                  </listitem>
              </varlistentry>
              <varlistentry>
                  <term><literal>'ids'</literal></term>
                  <listitem>
                      <para>
                        This will be a list of ids that can be produced
                        by the event source.
                      </para>
                  </listitem>
              </varlistentry>
              <varlistentry>
                  <term><literal>'ring'</literal></term>
                  <listitem>
                      <para>
                        The URI of the ring buffer from which the data source
                        will transmit fragments.
                      </para>
                  </listitem>
              </varlistentry>
              <varlistentry>
                  <term><literal>'bodyheaders'</literal></term>
                  <listitem>
                      <para>
                        A boolean that indicates whether or not the data source
                        will only have to deal with items that have body headers
                        (<literal>True</literal>) or if it will have to also
                        deal with items that have no body header (<literal>False</literal>).
                      </para>
                  </listitem>
              </varlistentry>
              <varlistentry>
                  <term><literal>'defaultId'</literal></term>
                  <listitem>
                      <para>
                        Only meaningful if <literal>bodyheaders</literal> is
                        <literal>False</literal>.  In that case, this is the
                        data source Id that will be assigned to items that
                        don't have a body header.
                      </para>
                  </listitem>
              </varlistentry>
              <varlistentry>
                  <term><literal>'tsextractor'</literal></term>
                  <listitem>
                      <para>
                        Only meaningful if <literal>bodyheaders</literal>
                        is <literal>False</literal>.  In that case, this is
                        the path to the shared object library that has code
                        that will extract timestamps from items that don't have
                        a body header.
                      </para>
                  </listitem>
              </varlistentry>
             </variablelist>
         </listitem>
     </varlistentry>     
     <varlistentry>
         <term>
          <cmdsynopsis>
            <command>
      infoList = api.listDataSources(evbName)
            </command>
          </cmdsynopsis>
         </term>
         <listitem>
             <para>
              Returns a list of all data sources for the event builder
              <parameter>evbName</parameter>.  Elements of ths list are
              dicts with the same form as those returned from
              <methodname>dsInfo</methodname> above.
             </para>
         </listitem>
     </varlistentry>     
     <varlistentry>
         <term>
          <cmdsynopsis>
            <command>
      api.rmDataSource(evbName, srcName)
            </command>
          </cmdsynopsis>
         </term>
         <listitem>
             <para>
              Removes a data source definition for the event builder
              <parameter>evbName</parameter> named <parameter>srcName</parameter>.
             </para>
         </listitem>
     </varlistentry>     
          

   </variablelist>
  </refsect1>
</refentry>

<!-- /manpage -->