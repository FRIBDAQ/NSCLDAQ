#!/bin/sh
# -*- tcl -*-
# The next line is executed by /bin/sh, but not tcl \
exec tclsh "$0" ${1+"$@"}

#    This software is Copyright by the Board of Trustees of Michigan
#    State University (c) Copyright 2014.
#
#    You may use this software under the terms of the GNU public license
#    (GPL).  The terms of this license are described at:
#
#     http://www.gnu.org/licenses/gpl.txt
#
#    Authors:
#             Ron Fox
#             Jeromy Tompkins 
#	     NSCL
#	     Michigan State University
#	     East Lansing, MI 48824-1321



##
# @file tclpkgtests.tcl.tcl
# @brief <brief purpose>
# @author Ron Fox <fox@nscl.msu.edu>
#

package require tcltest
package require vardb

#-----------------------------------------------------------------
# Utility functions:

proc createDbFile {} {
    set dir [tcltest::configure -tmpdir]
    set path [tcltest::makeFile {} test.db $dir]
    vardb::create $path    
    return $path
}

proc destroyDbFile path {
    file delete -force $path
}

#-----------------------------------------------------------------
# The tests

tcltest::test pkgexists {The package can be loaded} \
-body {
    catch {package require vardbEventBuilder}
} -result 0

tcltest::test cmdexists {The command ensemble base command exists.}\
-setup {
    package require vardbEventBuilder
} \
-body {
    info commands ::nscldaq::evb
} -result ::nscldaq::evb
 

tcltest::test create-1 {need sufficent parameters} \
-setup {
    package require vardbEventBuilder
    set testdir [tcltest::configure -tmpdir]
} \
-body {
    set stat0 [catch {nscldaq::evb create}]
    set stat1 [catch {::nscldaq::evb create file://$testdir/junk.db}]

    list $stat0 $stat1    
} -result [list 1 1]

tcltest::test create-2 {Connect on bad database fails} \
-setup {
    package require vardbEventBuilder
    set testdir [tcltest::configure -tmpdir]
} \
-body {
    catch {::nscldaq::evb create testing file://$testdir/this-does-not-exist.db}
    
} -result 1

tcltest::test create-3 {Connct on a good database works} \
-setup {
    package require vardbEventBuilder
    set file [createDbFile]
    
} \
-cleanup {
    ::nscldaq::evb destroy testing
    destroyDbFile $file
    
} \
-body {
    catch {::nscldaq::evb create testing file://$file}
    
} -result 0

tcltest::test create-4 {Test for command creation and destruction} \
-setup {
    package require vardbEventBuilder
    set file [createDbFile]
    
} \
-cleanup {
    destroyDbFile $file
    
} \
-body {
    ::nscldaq::evb create mytest file://$file
    set cmd [info command mytest]
    
    ::nscldaq::evb destroy mytest
    set nocmd [info command mytest]
    
    list $cmd $nocmd
} -result [list mytest ""]


tcltest::test check-schema-1 {Initially created db has no evb schema} \
-setup {
    package require vardbEventBuilder
    set file [createDbFile]
    ::nscldaq::evb create evb file://$file
} \
-cleanup {
    ::nscldaq::evb destroy evb
    destroyDbFile $file
    
} \
-body {
    evb haveSchema
} -result 0
    
tcltest::test make-schema {Create database schema}  \
-setup {
    package require vardbEventBuilder
    set file [createDbFile]
    ::nscldaq::evb create evb file://$file
} \
-cleanup {
    ::nscldaq::evb destroy evb
    destroyDbFile $file
    
} \
-body {
    evb createSchema
    evb haveSchema
} -result 1

tcltest::test create-evb-1 {create event builder with defaults} \
-setup {
    package require vardbEventBuilder
    set file [createDbFile]
    ::nscldaq::evb create evb file://$file
    evb createSchema
    
    set h [::vardb::open $file]
} \
-cleanup {
    ::nscldaq::evb destroy evb
    ::vardb::close $h
    destroyDbFile $file
    
} \
-body {
    evb createEventBuilder test charlie fox
    
    ::vardb::cd $h /EventBuilder/test
    set info [list]
    lappend info [::vardb::var get $h host]
    lappend info [::vardb::var get $h servicePrefix]
    lappend info [::vardb::var get $h serviceSuffix]
    lappend info [::vardb::var get $h coincidenceInterval]
    lappend info [::vardb::var get $h ring]
    lappend info [::vardb::var get $h build]
    lappend info [::vardb::var get $h timestampPolicy]
    lappend info [::vardb::var get $h sourceId]
    
} -result [list charlie ORDERER "" 1 fox true earliest 0]

tcltest::test create-evb-2 {Create event builder with defaults overriden} \
-setup {
    package require vardbEventBuilder
    set file [createDbFile]
    ::nscldaq::evb create evb file://$file
    evb createSchema
    
    set h [::vardb::open $file]
} \
-cleanup {
    ::nscldaq::evb destroy evb
    ::vardb::close $h
    destroyDbFile $file
    
} \
-body {
    evb createEventBuilder test charlie fox [dict create \
        dt 1234 sourceId 5 prefix Foxy build false suffix yxoF tspolicy average
    ]
    
    
    ::vardb::cd $h /EventBuilder/test
    set info [list]
    lappend info [::vardb::var get $h host]
    lappend info [::vardb::var get $h servicePrefix]
    lappend info [::vardb::var get $h serviceSuffix]
    lappend info [::vardb::var get $h coincidenceInterval]
    lappend info [::vardb::var get $h build]
    lappend info [::vardb::var get $h timestampPolicy]
    lappend info [::vardb::var get $h sourceId]
    
} -result [list charlie Foxy yxoF 1234 false average 5]

tcltest::test sethost-1 {Set new host for existing eventbuilder } \
-setup {
    package require vardbEventBuilder
    set file [createDbFile]
    ::nscldaq::evb create evb file://$file
    evb createSchema
    
    evb createEventBuilder test charlie fox
    
    set h [::vardb::open $file]
} \
-cleanup {
    ::nscldaq::evb destroy evb
    ::vardb::close $h
    destroyDbFile $file
    
} \
-body {
    evb evbSetHost test spdaq20
    
    ::vardb::var get $h /EventBuilder/test/host
} -result spdaq20
    
tcltest::test setdt-1 {Set a new coincidence interval for existing event bulder} \
-setup {
    package require vardbEventBuilder
    set file [createDbFile]
    ::nscldaq::evb create evb file://$file
    evb createSchema
    
    evb createEventBuilder test charlie fox
    
    set h [::vardb::open $file]
} \
-cleanup {
    ::nscldaq::evb destroy evb
    ::vardb::close $h
    destroyDbFile $file
    
} \
-body {
    evb evbSetCoincidenceInterval test 12
    ::vardb::var get $h /EventBuilder/test/coincidenceInterval
} -result 12

tcltest::test setRing-1 {Change the outpur ring} \
-setup {
    package require vardbEventBuilder
    set file [createDbFile]
    ::nscldaq::evb create evb file://$file
    evb createSchema
    
    evb createEventBuilder test charlie fox
    
    set h [::vardb::open $file]
} \
-cleanup {
    ::nscldaq::evb destroy evb
    ::vardb::close $h
    destroyDbFile $file
    
} \
-body {
    evb evbSetRing test wolf
    ::vardb::var get $h /EventBuilder/test/ring
} -result wolf

tcltest::test setId-1 {set source id for existing event builder} \
-setup {
    package require vardbEventBuilder
    set file [createDbFile]
    ::nscldaq::evb create evb file://$file
    evb createSchema
    
    evb createEventBuilder test charlie fox
    
    set h [::vardb::open $file]
} \
-cleanup {
    ::nscldaq::evb destroy evb
    ::vardb::close $h
    destroyDbFile $file
    
} \
-body {
    evb evbSetSourceId test 66
    ::vardb::var get $h /EventBuilder/test/sourceId
} -result 66

tcltest::test setservprefix-1 {Set service prefix for existing event builder} \
-setup {
    package require vardbEventBuilder
    set file [createDbFile]
    ::nscldaq::evb create evb file://$file
    evb createSchema
    
    evb createEventBuilder test charlie fox
    
    set h [::vardb::open $file]
} \
-cleanup {
    ::nscldaq::evb destroy evb
    ::vardb::close $h
    destroyDbFile $file
    
} \
-body {
    evb evbSetServicePrefix test "MyPrefix"
    ::vardb::var get $h /EventBuilder/test/servicePrefix
} -result MyPrefix

tcltest::test disablebuild-1 {Disable event building in an existing evb} \
-setup {
    package require vardbEventBuilder
    set file [createDbFile]
    ::nscldaq::evb create evb file://$file
    evb createSchema
    
    evb createEventBuilder test charlie fox
    
    set h [::vardb::open $file]
} \
-cleanup {
    ::nscldaq::evb destroy evb
    ::vardb::close $h
    destroyDbFile $file
    
} \
-body {
    evb evbDisableBuild test
    ::vardb::var get $h /EventBuilder/test/build
} -result false

tcltest::test enablebuild-1 {Enable event building in an existing evb} \
-setup {
    package require vardbEventBuilder
    set file [createDbFile]
    ::nscldaq::evb create evb file://$file
    evb createSchema
    
    evb createEventBuilder test charlie fox [dict create build false]
    
    set h [::vardb::open $file]
} \
-cleanup {
    ::nscldaq::evb destroy evb
    ::vardb::close $h
    destroyDbFile $file
    
} \
-body {
    evb evbEnableBuild test
 ::vardb::var get $h /EventBuilder/test/build
} -result true

tcltest::test setspolicy-1 {Set the timestamp policy of an existing evb} \
-setup {
    package require vardbEventBuilder
    set file [createDbFile]
    ::nscldaq::evb create evb file://$file
    evb createSchema
    
    evb createEventBuilder test charlie fox
    
    set h [::vardb::open $file]
} \
-cleanup {
    ::nscldaq::evb destroy evb
    ::vardb::close $h
    destroyDbFile $file
    
} \
-body {
    set info [list]
    evb evbSetTimestampPolicy test latest
    lappend info [::vardb::var get $h /EventBuilder/test/timestampPolicy]
    
    evb evbSetTimestampPolicy test average
    lappend info [::vardb::var get $h /EventBuilder/test/timestampPolicy]
    
    evb evbSetTimestampPolicy test earliest
    lappend info [::vardb::var get $h /EventBuilder/test/timestampPolicy]
} -result [list latest average earliest]

tcltest::test setsvcsuffix-1 {Set service suffix of an existing evb} \
-setup {
    package require vardbEventBuilder
    set file [createDbFile]
    ::nscldaq::evb create evb file://$file
    evb createSchema
    
    evb createEventBuilder test charlie fox
    
    set h [::vardb::open $file]
} \
-cleanup {
    ::nscldaq::evb destroy evb
    ::vardb::close $h
    destroyDbFile $file
    
} \
-body {
    evb evbSetServiceSuffix test MySuffix
    ::vardb::var get $h /EventBuilder/test/serviceSuffix
} -result MySuffix

tcltest::test rmevb-1 {Remove an event builder} \
-setup {
    package require vardbEventBuilder
    set file [createDbFile]
    ::nscldaq::evb create evb file://$file
    evb createSchema
    
    evb createEventBuilder test charlie  fox
    
    set h [::vardb::open $file]
} \
-cleanup {
    ::nscldaq::evb destroy evb
    ::vardb::close $h
    destroyDbFile $file
    
} \
-body {
    evb rmevb test
    catch {::vardb::cd /EventBuilder/test}
} -result 1

tcltest::test evbInfo-1 {Get info about an event builer} \
-setup {
    package require vardbEventBuilder
    set file [createDbFile]
    ::nscldaq::evb create evb file://$file
    evb createSchema
    
    evb createEventBuilder test charlie fox
    
    set h [::vardb::open $file]
} \
-cleanup {
    ::nscldaq::evb destroy evb
    ::vardb::close $h
    destroyDbFile $file
    
} \
-body {
    evb evbInfo test
    
} -result [dict create \
    name test host charlie dt 1 ring fox prefix ORDERER suffix "" build true \
    sourceId 0 tspolicy earliest        \
]

tcltest::test evbList-1 {Get info about all event builers} \
-setup {
    package require vardbEventBuilder
    set file [createDbFile]
    ::nscldaq::evb create evb file://$file
    evb createSchema
    
    evb createEventBuilder test charlie fox
    evb createEventBuilder test1 spdaq20 0400x [dict create tspolicy latest]
    set h [::vardb::open $file]
} \
-cleanup {
    ::nscldaq::evb destroy evb
    ::vardb::close $h
    destroyDbFile $file
    
} \
-body {
    evb evbList
} -result [list [dict create \
    name test host charlie dt 1 ring fox prefix ORDERER suffix "" build true \
    sourceId 0 tspolicy earliest        \
    ] [dict create \
       name test1 host spdaq20 dt 1 ring 0400x prefix ORDERER suffix "" build true \
        sourceId 0 tspolicy latest        \
    ] \
]

tcltest::test addSource-1 {Add data source with all the defaults} \
-setup {
    package require vardbEventBuilder
    set file [createDbFile]
    ::nscldaq::evb create evb file://$file
    evb createSchema
    
    evb createEventBuilder test charlie  fox
    evb createEventBuilder test1 spdaq20 0400x [dict create tspolicy latest]
    set h [::vardb::open $file]
} \
-cleanup {
    ::nscldaq::evb destroy evb
    ::vardb::close $h
    destroyDbFile $file
    
} \
-body {
    evb addSource test src1 charlie \
        /usr/opt/daq/current/bin/ringFragmentSource tcp://charlie/fox [list 1]
    
    set info [list]
    ::vardb::cd $h /EventBuilder/test/src1
    lappend info [::vardb::var get $h host ]
    lappend info [::vardb::var get $h path]
    lappend info [::vardb::var get $h info]
    lappend info [::vardb::var get $h id0]
    lappend info [::vardb::var get $h ring]
    lappend info [::vardb::var get $h default-id]
    lappend info [::vardb::var get $h timestamp-extractor]
    lappend info [::vardb::var get $h expect-bodyheaders]
    
} -result [list \
    charlie /usr/opt/daq/current/bin/ringFragmentSource "" 1 tcp://charlie/fox \
    0 "" true           \
]
tcltest::test addSource-2 {Add data source with defaults overidden}  \
-setup {
    package require vardbEventBuilder
    set file [createDbFile]
    ::nscldaq::evb create evb file://$file
    evb createSchema
    
    evb createEventBuilder test charlie fox
    evb createEventBuilder test1 spdaq20 0400x [dict create tspolicy latest]
    set h [::vardb::open $file]
} \
-cleanup {
    ::nscldaq::evb destroy evb
    ::vardb::close $h
    destroyDbFile $file
    
} \
-body {
    evb addSource test src1 charlie \
        /usr/opt/daq/current/bin/ringFragmentSource tcp://charlie/fox [list 1] \
        [dict create info {Test string} defaultId 1 expectBodyHeaders false \
         timestampExtractor /usr/bin/ls]
    
    set info [list]
    ::vardb::cd $h /EventBuilder/test/src1
    lappend info [::vardb::var get $h host ]
    lappend info [::vardb::var get $h path]
    lappend info [::vardb::var get $h info]
    lappend info [::vardb::var get $h id0]
    lappend info [::vardb::var get $h ring]
    lappend info [::vardb::var get $h default-id]
    lappend info [::vardb::var get $h timestamp-extractor]
    lappend info [::vardb::var get $h expect-bodyheaders]
    
} -result [list \
    charlie /usr/opt/daq/current/bin/ringFragmentSource "Test string" 1 tcp://charlie/fox \
    1 "/usr/bin/ls" false           \
]

tcltest::test dsSethost-1 {Set the host of a data source that exists} \
-setup {
    package require vardbEventBuilder
    set file [createDbFile]
    ::nscldaq::evb create evb file://$file
    evb createSchema
    
    evb createEventBuilder test charlie fox
    evb createEventBuilder test1 spdaq20 0400x [dict create tspolicy latest]
    set h [::vardb::open $file]
    
    evb addSource test src1 charlie \
        /usr/opt/daq/current/bin/ringFragmentSource tcp://charlie/fox [list 1]
} \
-cleanup {
    ::nscldaq::evb destroy evb
    ::vardb::close $h
    destroyDbFile $file
    
} \
-body {
    evb dsSetHost test src1 spdaq20
    
    ::vardb::var get $h /EventBuilder/test/src1/host
} -result spdaq20
    
tcltest::test dsSetPath {Change path of existing data source} \
-setup {
    package require vardbEventBuilder
    set file [createDbFile]
    ::nscldaq::evb create evb file://$file
    evb createSchema
    
    evb createEventBuilder test charlie fox
    evb createEventBuilder test1 spdaq20 0400x [dict create tspolicy latest]
    set h [::vardb::open $file]
    
    evb addSource test src1 charlie \
        /usr/opt/daq/current/bin/ringFragmentSource tcp://charlie/fox [list 1]
} \
-cleanup {
    ::nscldaq::evb destroy evb
    ::vardb::close $h
    destroyDbFile $file
    
} \
-body {
    evb dsSetPath test src1 /usr/bin/ls
    vardb::var get $h /EventBuilder/test/src1/path
    
} -result /usr/bin/ls

tcltest::test dsSetRingUri {Set input ring of existing data source } \
-setup {
    package require vardbEventBuilder
    set file [createDbFile]
    ::nscldaq::evb create evb file://$file
    evb createSchema
    
    evb createEventBuilder test charlie fox
    evb createEventBuilder test1 spdaq20 0400x [dict create tspolicy latest]
    set h [::vardb::open $file]
    
    evb addSource test src1 charlie \
        /usr/opt/daq/current/bin/ringFragmentSource tcp://charlie/fox [list 1]
} \
-cleanup {
    ::nscldaq::evb destroy evb
    ::vardb::close $h
    destroyDbFile $file
    
} \
-body {
    evb dsSetRingUri test src1 tcp://spdaq20/0400x
    
    vardb::var get $h /EventBuilder/test/src1/ring
} -result tcp://spdaq20/0400x

tcltest::test dsSetIds-1 {set new Id list for data source} \
-setup {
    package require vardbEventBuilder
    set file [createDbFile]
    ::nscldaq::evb create evb file://$file
    evb createSchema
    
    evb createEventBuilder test charlie fox
    evb createEventBuilder test1 spdaq20 0400x [dict create tspolicy latest]
    set h [::vardb::open $file]
    
    evb addSource test src1 charlie \
        /usr/opt/daq/current/bin/ringFragmentSource tcp://charlie/fox [list 1]
} \
-cleanup {
    ::nscldaq::evb destroy evb
    ::vardb::close $h
    destroyDbFile $file
    
} \
-body {
    evb dsSetIds test src1 [list 1 2 3]
    
    set info [list]
    lappend info [vardb::var get $h /EventBuilder/test/src1/id0]
    lappend info [vardb::var get $h /EventBuilder/test/src1/id1]
    lappend info [vardb::var get $h /EventBuilder/test/src1/id2]
} -result [list 1 2 3]

tcltest::test dsSetInfo-1 {Set the information string of a data source} \
-setup {
    package require vardbEventBuilder
    set file [createDbFile]
    ::nscldaq::evb create evb file://$file
    evb createSchema
    
    evb createEventBuilder test charlie fox
    evb createEventBuilder test1 spdaq20 0400x [dict create tspolicy latest]
    set h [::vardb::open $file]
    
    evb addSource test src1 charlie \
        /usr/opt/daq/current/bin/ringFragmentSource tcp://charlie/fox [list 1]
} \
-cleanup {
    ::nscldaq::evb destroy evb
    ::vardb::close $h
    destroyDbFile $file
    
} \
-body {
    evb dsSetInfo test src1 {This is a test}
    vardb::var get $h /EventBuilder/test/src1/info
} -result {This is a test}

tcltest::test dsSetDefaultId-1 {Set a new default id form a data source} \
-setup {
    package require vardbEventBuilder
    set file [createDbFile]
    ::nscldaq::evb create evb file://$file
    evb createSchema
    
    evb createEventBuilder test charlie fox
    evb createEventBuilder test1 spdaq20 0400x [dict create tspolicy latest]
    set h [::vardb::open $file]
    
    evb addSource test src1 charlie \
        /usr/opt/daq/current/bin/ringFragmentSource tcp://charlie/fox [list 1]
} \
-cleanup {
    ::nscldaq::evb destroy evb
    ::vardb::close $h
    destroyDbFile $file
    
} \
-body {
    evb dsSetDefaultId test src1 666
    vardb::var get $h /EventBuilder/test/src1/default-id
} -result 666

tcltest::test dsEnableBodyHeaders-1 {Turn on expect-bodyheaders for a data src} \
-setup {
    package require vardbEventBuilder
    set file [createDbFile]
    ::nscldaq::evb create evb file://$file
    evb createSchema
    
    evb createEventBuilder test charlie fox
    evb createEventBuilder test1 spdaq20 0400x [dict create tspolicy latest]
    set h [::vardb::open $file]
    
    evb addSource test src1 charlie \
        /usr/opt/daq/current/bin/ringFragmentSource tcp://charlie/fox [list 1] \
        [dict create expectBodyHeaders false]
} \
-cleanup {
    ::nscldaq::evb destroy evb
    ::vardb::close $h
    destroyDbFile $file
    
} \
-body {
    evb dsExpectBodyHeaders test src1
    
    vardb::var get $h /EventBuilder/test/src1/expect-bodyheaders
} -result true

tcltest::test dsDisableBodyHeaders-1 {Turn off expect-bodyheaders} \
-setup {
    package require vardbEventBuilder
    set file [createDbFile]
    ::nscldaq::evb create evb file://$file
    evb createSchema
    
    evb createEventBuilder test charlie fox
    evb createEventBuilder test1 spdaq20 0400x [dict create tspolicy latest]
    set h [::vardb::open $file]
    
    evb addSource test src1 charlie \
        /usr/opt/daq/current/bin/ringFragmentSource tcp://charlie/fox [list 1]
} \
-cleanup {
    ::nscldaq::evb destroy evb
    ::vardb::close $h
    destroyDbFile $file
    
} \
-body {
    evb dsDontExpectBodyHeaders test src1
    
    vardb::var get $h /EventBuilder/test/src1/expect-bodyheaders
} -result false

tcltest::test dsSetTsExtractor-1 {Change the timestamp extractor} \
-setup {
    package require vardbEventBuilder
    set file [createDbFile]
    ::nscldaq::evb create evb file://$file
    evb createSchema
    
    evb createEventBuilder test charlie fox
    evb createEventBuilder test1 spdaq20 0400x [dict create tspolicy latest]
    set h [::vardb::open $file]
    
    evb addSource test src1 charlie \
        /usr/opt/daq/current/bin/ringFragmentSource tcp://charlie/fox [list 1]
} \
-cleanup {
    ::nscldaq::evb destroy evb
    ::vardb::close $h
    destroyDbFile $file
    
} \
-body {
    evb dsSetTimestampExtractor test src1 /usr/bin/ls
    
    ::vardb::var get $h /EventBuilder/test/src1/timestamp-extractor
} -result /usr/bin/ls

tcltest::test dsInfo-1 {Get information about a data source} \
-setup {
    package require vardbEventBuilder
    set file [createDbFile]
    ::nscldaq::evb create evb file://$file
    evb createSchema
    
    evb createEventBuilder test charlie fox
    evb createEventBuilder test1 spdaq20 0400x [dict create tspolicy latest]
    set h [::vardb::open $file]
    
    evb addSource test src1 charlie \
        /usr/opt/daq/current/bin/ringFragmentSource tcp://charlie/fox [list 1]
} \
-cleanup {
    ::nscldaq::evb destroy evb
    ::vardb::close $h
    destroyDbFile $file
    
} \
-body {
    evb dsInfo test src1
} -result [dict create \
    name src1 host charlie path /usr/opt/daq/current/bin/ringFragmentSource \
    info {} ring tcp://charlie/fox ids [list 1] defaultId 0 \
    timestampExtractor {} expectBodyHeaders true      \
]

tcltest::test dsList-1 {List data sources when there's more than one} \
-setup {
    package require vardbEventBuilder
    set file [createDbFile]
    ::nscldaq::evb create evb file://$file
    evb createSchema
    
    evb createEventBuilder test charlie fox
 
    
    evb addSource test src1 charlie \
        /usr/opt/daq/current/bin/ringFragmentSource tcp://charlie/fox [list 1]
    evb addSource test src2 ddasdaq5 \
        /usr/bin/ls tcp://spdaq20/0400x [list 2 3] \
            [dict create expectBodyHeaders false info "Second source"]
} \
-cleanup {
    ::nscldaq::evb destroy evb
    destroyDbFile $file
    
} \
-body {
    evb listSources test
} -result [list [dict create \
    name src1 host charlie path /usr/opt/daq/current/bin/ringFragmentSource \
    info {} ring tcp://charlie/fox ids [list 1] defaultId 0 \
    timestampExtractor {} expectBodyHeaders true      \
    ]  \
    [dict create \
        name src2 host ddasdaq5 path /usr/bin/ls info {Second source}  \
        ring tcp://spdaq20/0400x ids [list 2 3] defaultId 0 timestampExtractor {} \
        expectBodyHeaders false   \
    ]
]

tcltest::test rmDs-1 {Remove existing data source} \
-setup {
    package require vardbEventBuilder
    set file [createDbFile]
    ::nscldaq::evb create evb file://$file
    evb createSchema
    
    evb createEventBuilder test charlie fox
 
    
    evb addSource test src1 charlie \
        /usr/opt/daq/current/bin/ringFragmentSource tcp://charlie/fox [list 1]
    evb addSource test src2 ddasdaq5 \
        /usr/bin/ls tcp://spdaq20/0400x [list 2 3] \
            [dict create expectBodyHeaders false info "Second source"]
} \
-cleanup {
    ::nscldaq::evb destroy evb
    destroyDbFile $file
    
} \
-body {
    evb rmSource test src1
    evb listSources test
} -result [list [dict create \
        name src2 host ddasdaq5 path /usr/bin/ls info {Second source}  \
        ring tcp://spdaq20/0400x ids [list 2 3] defaultId 0 timestampExtractor {} \
        expectBodyHeaders false   \
    ] \
]

tcltest::test setevbpos {set event builder editor position} \
-setup {
    package require vardbEventBuilder
    set file [createDbFile]
    ::nscldaq::evb create evb file://$file
    evb createSchema
    
    evb createEventBuilder test charlie fox
    
    set h [vardb::open $file]
    
} \
-cleanup {
    ::nscldaq::evb destroy evb
    vardb::close $h
    destroyDbFile $file
    
    
} \
-body {
    evb evbSetEditorPosition test 100 200
    
    set result [list]
    lappend result [vardb::var get $h /EventBuilder/test/editorx]
    lappend result [vardb::var get $h /EventBuilder/test/editory]
    
    set result
} -result [list 100 200]
    
tcltest::test getevbxpos {Get event builder x position} \
-setup {
    package require vardbEventBuilder
    set file [createDbFile]
    ::nscldaq::evb create evb file://$file
    evb createSchema
    
    evb createEventBuilder test charlie fox
    
    
} \
-cleanup {
    ::nscldaq::evb destroy evb

    destroyDbFile $file
    
    
} \
-body {
    evb evbSetEditorPosition test 100 200
    evb evbGetEditorXPosition test
} -result 100

tcltest::test getevbypos {Get event builder y position} \
-setup {
    package require vardbEventBuilder
    set file [createDbFile]
    ::nscldaq::evb create evb file://$file
    evb createSchema
    
    evb createEventBuilder test charlie fox
    
    
} \
-cleanup {
    ::nscldaq::evb destroy evb

    destroyDbFile $file
    
    
} \
-body {
    evb evbSetEditorPosition test 100 200
    evb evbGetEditorYPosition test
} -result 200


tcltest::test setdsPosition {Set data source editor position} \
-setup {
    package require vardbEventBuilder
    set file [createDbFile]
    ::nscldaq::evb create evb file://$file
    evb createSchema
    
    evb createEventBuilder test charlie fox
    evb addSource test src1 charlie \
        /usr/opt/daq/current/bin/ringFragmentSource tcp://charlie/fox [list 1]
    
    set h [vardb::open $file]
    
} \
-cleanup {
    ::nscldaq::evb destroy evb
    vardb::close $h
    destroyDbFile $file
    
    
} \
-body {
    evb dsSetEditorPosition test src1 200 400
    
    set result [list]
    lappend result [vardb::var get $h /EventBuilder/test/src1/editorx]
    lappend result [vardb::var get $h /EventBuilder/test/src1/editory]
    
    set result
} -result [list 200 400]

tcltest::test getdsXPosition {Get data source editor canvas x position} \
-setup {
    package require vardbEventBuilder
    set file [createDbFile]
    ::nscldaq::evb create evb file://$file
    evb createSchema
    
    evb createEventBuilder test charlie fox
    evb addSource test src1 charlie \
        /usr/opt/daq/current/bin/ringFragmentSource tcp://charlie/fox [list 1]
    
    
    
} \
-cleanup {
    ::nscldaq::evb destroy evb
    
    destroyDbFile $file
    
    
} \
-body {
    evb dsSetEditorPosition test src1 200 400
    evb dsGetEditorXPosition test src1
} -result 200


tcltest::test getdsYPosition {Get data source editor canvas y position} \
-setup {
    package require vardbEventBuilder
    set file [createDbFile]
    ::nscldaq::evb create evb file://$file
    evb createSchema
    
    evb createEventBuilder test charlie fox
    evb addSource test src1 charlie \
        /usr/opt/daq/current/bin/ringFragmentSource tcp://charlie/fox [list 1]
    
    
    
} \
-cleanup {
    ::nscldaq::evb destroy evb
    
    destroyDbFile $file
    
    
} \
-body {
    evb dsSetEditorPosition test src1 200 400
    evb dsGetEditorYPosition test src1
} -result 400
#-------------------------------------------
#-------------------------------------------------------------------------------
#
#   Global test teardown/reporting.


proc tcltest::cleanupTestsHook {} {
    variable numTests
    set ::exitCode $numTests(Failed)
}    


tcltest::cleanupTests

exit $exitCode;
