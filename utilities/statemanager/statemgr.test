#!/bin/sh
# -*- tcl -*-
# The next line is executed by /bin/sh, but not tcl \
exec tclsh "$0" ${1+"$@"}

#    This software is Copyright by the Board of Trustees of Michigan
#    State University (c) Copyright 2014.
#
#    You may use this software under the terms of the GNU public license
#    (GPL).  The terms of this license are described at:
#
#     http://www.gnu.org/licenses/gpl.txt
#
#    Authors:
#             Ron Fox
#             Jeromy Tompkins 
#	     NSCL
#	     Michigan State University
#	     East Lansing, MI 48824-1321



##
# @file statemgr.test
# @brief Tests of the state manager.
# @author Ron Fox <fox@nscl.msu.edu>
#

package require stateclient
package require varmgr
package require portAllocator
package require tcltest
package require Thread


# A quick note on -constraints below.  In tcltest a test with constraints is
# only run if its constraints are true. Since the setup/teardown of most tests
# is pretty expensive, and I want to maintain a quick development/test cycle,
# oldTests are generally added with -constraints oldTest and run via:
#
#  make all install  && tclsh statemgr.test -constraintes oldTest
#
#  This limits the set of tests that are run to the chunks of code under
#  development/test.  Once development is complete the associated tests
#  have their constraint changed to oldTest.
#
# The Makefile, on the other hand has -constraints {oldTest oldTest}
# so all tests get run.

tcltest::test statemgr-exists {State manager command exists} \
 -body {
    info command ::nscldaq::statemanager
} -result ::nscldaq::statemanager

tcltest::test statemgr-needs-subcommand {state manager cmd by itself is error} \
 -body {
    catch nscldaq::statemanager
} -result 1

tcltest::test statemgr-noxdelete {Delete of nonexistent is error} \
 -body {
    catch {nscldaq::statemanager -delete junk}

} -result 1

#-------------------------------------------------------------------
#  The remaining tests require that there be a
#  database and a variable server:



#  Infrastructure for tests that need a database setup.

set ::testFile ""
set ::bindir $::env(DAQBIN)
set ::serverPid ""

proc waitServer {} {
    portAllocator create lister
    while {1} {
        set ports [lister listPorts]
        foreach port $ports {
            if {[lindex $port 1] == "vardb-changes"} {
                lister destroy
                return
            }
            after 100
        }
    }
    
}

proc createRunDir h {
    varmgr::mkdir $h /RunState
    varmgr::statemachine $h RunStateMachine [dict create \
         0Initial NotReady NotReady [list 0Initial Readying] \
         Readying [list NotReady Ready] Ready [list Beginning NotReady] \
         Beginning [list Active NotReady] Active [list Pausing Ending NotReady] \
         Pausing [list Paused NotReady] Paused [list Ending Resuming NotReady] \
         Resuming [list Active NotReady] Ending [list Ready NotReady]           \
    ]
    
    
    varmgr::var create $h /RunState/State RunStateMachine
    varmgr::var create $h /RunState/RunNumber integer
    varmgr::var create $h /RunState/Title     string
    varmgr::var create $h /RunState/Recording bool false
    varmgr::var create $h /RunState/Timeout   integer  60
    varmgr::var create $h /RunState/ReadoutParentDir string
    
}


proc createProgram {h name} {
    set dir /RunState/$name
    varmgr::mkdir $h $dir
    varmgr::var create $h $dir/State RunStateMachine
    varmgr::var create $h $dir/enable bool   true
    varmgr::var create $h $dir/standalone bool false
    varmgr::var create $h $dir/path  string "/some/test/path"
    varmgr::var create $h $dir/host string "somehost.nscl.msu.edu"
    varmgr::var create $h $dir/outring string "output"
    varmgr::var create $h $dir/inring string "tcp://localhost/ring"
    
}

proc setup {} {
    set dbPath [tcltest::makeFile "" testdb.db]
    file delete -force $dbPath ;    # just using it to get a file in tempdir.
    
    varmgr::create $dbPath
    set h [varmgr::open file://$dbPath]
    
    createRunDir $h
    createProgram $h test
    
    varmgr::close $h
    set ::testFile $dbPath
    
    # start the server
    #
    
    set pid [exec -- $::bindir/vardbServer --database $dbPath &]
    set ::serverPid $pid
    
    waitServer
}


proc cleanup {} {
    # Kill the server
    
    exec kill -9 $::serverPid
    
    # Destroy the database
    
    tcltest::removeFile $::testFile
    
    # Reset global vars:
    
    set ::testFile ""
    set ::serverPid ""
}


proc programList {name} {

    set h [varmgr::open tcp://localhost]
    varmgr::cd $h /RunState/$name
    set enable [varmgr::var get $h enable]
    set salone [varmgr::var get $h standalone]
    set path   [varmgr::var get $h path]
    set host   [varmgr::var get $h host]
    set outring [varmgr::var get $h outring]
    set inring  [varmgr::var get $h inring]
    varmgr::close $h
    
    return [list $enable $salone $path $host $outring $inring]
}

# Very basic create/delete/instance tests

tcltest::test create-delete-ok {Can delete created instancde} \
 -setup {
    setup
} \
-cleanup {
    cleanup
} \
-body {
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
    catch {nscldaq::statemanager -delete mgr}
} -result 0


tcltest::test instance-is-ensemble {Instance commands need subcommands} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    catch {mgr}
} -result 1

#--------------------------------------------------------
#
#  programParentDir command:

tcltest::test pgmparent-initial {Gets the initial program parent dir} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    mgr programParentDir
} -result "/RunState"

tcltest::test pgmparent-changed {Gets program parent dir after changed} \
 -setup {
    setup
    
    set h [varmgr::open  tcp://localhost]
    varmgr::mkdir $h /programs
    varmgr::var set $h /RunState/ReadoutParentDir /programs
    varmgr::close $h
    
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    mgr programParentDir
} -result "/programs"

tcltest::test pgmparent-set {Can modify the program parent dir} \
 -setup {
    setup
    
    set h [varmgr::open  tcp://localhost]
    varmgr::mkdir $h /programs
     varmgr::close $h
    
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    mgr programParentDir /programs
    mgr programParentDir
} -result /programs

tcltest::test pgmparent-toomany {Too many parameters to programParentDir errs} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    catch {mgr programParentDir a b}
} -result 1

# Test for invalid subcommand:

tcltest::test invsubcommand {Invalid subcommand is an error} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    catch {mgr nosuchsubcommand}
} -result 1

#  Tests for addProgram.

tcltest::test addProgram-name {addProgram needs a name} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    catch {mgr addProgram}
} -result 1

tcltest::test addProgram-dict {addProgram needs a dict} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    catch {mgr addProgram testing}
} -result 1

tcltest::test addProgram-toomany {add program has too many params} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    catch {mgr addProgram testing b c}
} -result 1

tcltest::test addProgram-success {Add a program fullspec.} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    set programDef [dict create                                      \
        enabled true standalone false path /home/fox/test host a.b.c \
        outring test inring tcp://b.d.c/fox                         \
    ]
    mgr addProgram testing $programDef
    programList testing
} -result [list true false /home/fox/test a.b.c test tcp://b.d.c/fox]

tcltest::test addProgram-defaults {Map applies default values} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    set programDef [dict create path /home/fox/test host a.b.c ]
    mgr addProgram testing $programDef
    
    programList testing
} -result [list true false /home/fox/test a.b.c "" ""]

tcltest::test addProgram-missingMandatory1 {Mandatory parameter missing} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    catch {mgr addProgram testing [dict create path /home/fox/test]}
} -result 1


tcltest::test addProgram-missingMandatory2 {Mandatory parameter missing} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    catch {mgr addProgram testing [dict create host a.b.c]}
} -result 1

#  getProgram

tcltest::test getProgram-ok {Can get info about the 'test' program} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    set progDict [mgr getProgram test]
    list [dict get $progDict enabled]   \
        [dict get $progDict standalone] \
        [dict get $progDict path]       \
        [dict get $progDict host]       \
        [dict get $progDict outring]    \
        [dict get $progDict inring]
    
} -result [list \
    true false /some/test/path somehost.nscl.msu.edu \
    output tcp://localhost/ring]

tcltest::test getProgram-badprog {Invalid programname -> error} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    catch {mgr getProgram no-such-program}
} -result 1

tcltest::test getProgram-needsprogram {needs a program parameter} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    catch {mgr getProgram }
} -result 1

tcltest::test getProgram-extraparams {Error if extra params} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    catch {mgr getProgram test extra}
} -result 1

# modifyProgram:

tcltest::test modify-enabled {Modify the enable state} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    mgr modifyProgram test [dict create enabled false]
    set off [dict get [mgr getProgram test] enabled]
    
    mgr modifyProgram test [dict create enabled true]
    set on  [dict get [mgr getProgram test] enabled]
    
    list $on $off
} -result [list true false]

tcltest::test modify-standalone {Modify the standalone state} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    mgr modifyProgram test [dict create standalone false]
    set off [dict get [mgr getProgram test] standalone]
    
    mgr modifyProgram test [dict create standalone true]
    set on  [dict get [mgr getProgram test] standalone]
    
    list $on $off
} -result [list true false]

tcltest::test modify-path {Modify the path variable} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    mgr modifyProgram test [dict create path /something/new]
    dict get [mgr getProgram test] path
} -result /something/new


tcltest::test modify-host {Modify the host} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    mgr modifyProgram test [dict create host something.borrowed.old.or.new]
    dict get [mgr getProgram test] host
} -result something.borrowed.old.or.new


tcltest::test modify-oring {Modify output ring} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    mgr modifyProgram test [dict create outring some-outring]
    dict get [mgr getProgram test] outring
} -result some-outring

tcltest::test modify-inring {modify input ring} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    mgr modifyProgram test [dict create inring tcp://some.host/somering]
    dict get [mgr getProgram test] inring
} -result tcp://some.host/somering

tcltest::test modify-needprogram {Need a program name} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    catch {mgr modifyProgram}
} -result 1

tcltest::test modify-needdict {modify program needs modify dict} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    catch {mgr modifyProgram test}
} -result 1

tcltest::test modify-needexistingprog {Modify program prog must exist} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    catch {mgr modifyProgram testing [dict create enabled true]}
} -result 1


# enableProgram

tcltest::test enable-ok {Enable program works} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    mgr modifyProgram test [dict create enabled false];  #first turn off.
    mgr enableProgram test
    dict get [mgr getProgram test] enabled
} -result true

tcltest::test enable-badprogram {Enable requires a good program} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    catch {mgr enableProgram nosuch}
} -result 1

tcltest::test enable-needsprogram {Enable requires a program arg} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    catch {mgr enableProgram}
} -result 1


#  Tests for disbable program

tcltest::test disable-ok {Disable program works} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    mgr disableProgram test
    dict get [mgr getProgram test] enabled
} -result false


tcltest::test disable-badProgram {Program must exist} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    catch {mgr disableProgram junk}
} -result 1

tcltest::test disable-needProgram {program must be supplied} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    catch {mgr disableProgram}
} -result 1

#  isProgramEnabled test:

tcltest::test isenabled-initial {It starts out enabled} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    mgr isProgramEnabled test
} -result 1

# set standalone.

tcltest::test setstandalone-ok {set a program to standalone mode} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    mgr setStandalone test
    set h [varmgr::open tcp://localhost]
    set state [varmgr::var get $h /RunState/test/standalone]
    varmgr::close $h
    
    set state
} -result true

tcltest::test setstandalone-needprogram {setStanadlone needs a program} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    catch {mgr setStandalone}
} -result 1

tcltest::test setstandalone-needonly-program {setStandalone  too many params} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    catch {mgr setStandalone test junk}
} -result 1

tcltest::test setstandalone-program-exists {program must exist} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    catch {mgr setStandalone junk}
} -result 1

# setNoStandalone:

tcltest::test setnostandalone-ok {setnoStandalone - does what it should} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    mgr setStandalone test;            # get it in standalone mode..
    mgr setNoStandalone test;          # turn it back off.
    set h [varmgr::open tcp://localhost]
    set state [varmgr::var get $h /RunState/test/standalone]
    varmgr::close $h
    
    set state
} -result false    
   
tcltest::test setnostandalone-needsprogram {Must have program parameter} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    catch {mgr setNoStandalone}
} -result 1

tcltest::test setnostandalone-extraparams {Must have only program param} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    catch {mgr setNoStandalone test junk}
} -result 1

tcltest::test setnostandalone-exitingprogram {Must specify existing program} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    catch {mgr setNoStandalone junk}
} -result 1

tcltest::test isStandalone-no {Program is not standalone} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    mgr isStandalone test
} -result 0

tcltest::test isStandalone-yes {Program is standalone} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    mgr setStandalone test
    mgr isStandalone test
} -result 1

tcltest::test isStandalone-needprogram {isStandalone needs program param} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    catch {mgr isStandalone}
} -result 1

tcltest::test isStandalone-needonlyprogram {isStandalone with extra params} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    catch {mgr isStandalone test junk}
} -result 1

tcltest::test isStandalone-existingprogram {isStandalone program must exist} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    catch {mgr isStandalone junk}
} -result 1

# listPrograms

tcltest::test listPrograms-1 {List initial program set (test)} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    mgr listPrograms
} -result test


tcltest::test listPrograms-several {list programs when several} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    set h [varmgr::open tcp://localhost]
    createProgram $h atest
    createProgram $h btest
    createProgram $h ztest
    varmgr::close $h
    
    mgr listPrograms
} -result [list atest btest test ztest]


tcltest::test listPrograms-none {list programs when none present} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    set h [varmgr::open tcp://localhost]
    varmgr::mkdir $h /programs
    varmgr::close $h
    
    mgr programParentDir /programs;    #empty of programs.
    mgr listPrograms
} -result [list]
    

tcltest::test listPrograms-extraparam {list programs - extra parameter} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    catch {mgr listPrograms junk}
} -result 1

# listEnabledPrograms - only those with enable == 'true'
#

tcltest::test listenabled-1 {List initial program, enabled} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    mgr listEnabledPrograms
} -result test

tcltest::test listenabled-0-from-1 {disable initial program} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    mgr disableProgram test
    mgr listEnabledPrograms
} -result [list]

tcltest::test listenabled-many {enabled with all enabled} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
    set h [varmgr::open tcp://localhost]
    createProgram $h atest
    createProgram $h btest
    createProgram $h ztest
    varmgr::close $h
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    
    mgr listEnabledPrograms
} -result [list atest btest test ztest]

tcltest::test listenabled-mixed {enabled with some enabled} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
    set h [varmgr::open tcp://localhost]
    createProgram $h atest
    createProgram $h btest
    createProgram $h ztest
    varmgr::close $h
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    mgr disableProgram btest
    mgr disableProgram ztest
    
    mgr listEnabledPrograms
} -result [list atest test]

tcltest::test listenabled-extraparam {extra parameter} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    catch {mgr listEnabledPrograms junk}
} -result 1

# listStandalonePrograms those with the standalone flag set.

tcltest::test listStandalone-0  {Initially there are no standalone programs} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    mgr listStandalonePrograms
} -result [list]

tcltest::test listStandalone-1 {set test to standalone -list} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    mgr setStandalone test
    mgr listStandalonePrograms
} -result test

tcltest::test listStandalone-many {Many programs all standalone} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
    set h [varmgr::open tcp://localhost]
    createProgram $h atest
    createProgram $h btest
    createProgram $h ztest
    varmgr::close $h    
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    mgr setStandalone atest
    mgr setStandalone btest
    mgr setStandalone test
    mgr setStandalone ztest
    
    mgr listStandalonePrograms
} -result [list atest btest test ztest]
    
tcltest::test listStandalone-some-from-many {Mix of standalone/non} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
    set h [varmgr::open tcp://localhost]
    createProgram $h atest
    createProgram $h btest
    createProgram $h ztest
    varmgr::close $h    
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    mgr setStandalone atest
    mgr setStandalone test
    
    mgr listStandalonePrograms
} -result [list atest test]

tcltest::test listStandalone-extraparams {extra parameters} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    catch {mgr listStandalonePrograms junk}
} -result 1

# listInactivePrograms - probrams with either enabled off or standalone on.

tcltest::test listInactivePrograms-0 {nothing inactive to begin with} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    mgr listInactivePrograms
} -result [list]

tcltest::test listInactivePrograms-dis1 {Disable test} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    mgr disableProgram test
    mgr listInactivePrograms
} -result test

tcltest::test listInactivePrograms-sa1 {standalone test} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    mgr setStandalone test
    mgr listInactivePrograms
} -result test

tcltest::test listInactivePrograms-mixed {inactive mixed bag} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
    set h [varmgr::open tcp://localhost]
    createProgram $h atest
    createProgram $h btest
    createProgram $h ztest
    varmgr::close $h    
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    mgr disableProgram atest
    mgr setStandalone  btest
    
    mgr disableProgram ztest
    mgr setStandalone  ztest
    
    mgr listInactivePrograms
} -result [list atest btest ztest]

tcltest::test listInactivePrograms-extraarg {listInactive with extra parameter} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    catch {mgr listInactivePrograms junk}
} -result 1

# listActivePrograms - those programs that are enabled and not standalone.

tcltest::test listactive-1   {test initially is active} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup    
} \
-body {
    mgr listActivePrograms
} -result test

tcltest::test listactive-0-disabled {test becomes inactive via disable} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    mgr disableProgram test
    mgr listActivePrograms
} -result [list]

tcltest::test listinactive-0-standalone {test becomes inactive via standalone} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    mgr setStandalone test
    mgr listActivePrograms
} -result [list]

tcltest::test listinactive-several {several programs some inactive for whatever} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
    set h [varmgr::open tcp://localhost]
    createProgram $h atest
    createProgram $h btest
    createProgram $h ztest
    varmgr::close $h    
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    mgr disableProgram atest
    mgr setStandalone  btest
    
    mgr disableProgram ztest
    mgr setStandalone  ztest
    
    mgr listActivePrograms
} -result test

tcltest::test listinactive-extraparam {Extra parameter on listInactive} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    catch {mgr listActivePrograms junk}
} -result 1

# deleteProgram

tcltest::test delete-exists {Delete an existing program} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    mgr deleteProgram test
    
    mgr listPrograms
} -result [list]

tcltest::test delete-nox    {Delete a program that does not exist} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    catch {mgr deleteProgram junk}
} -result 1

tcltest::test delete-needprogram {Delete without a program fails} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    catch {mgr deleteProgram}
} -result 1

tcltest::test delete-extraparam {delete with extra param fails} \
 -setup {
   setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    catch {mgr deleteProgram test junk}
} -result 1

#  setGlobalState  - can set the global state.

tcltest::test setgblstate-ok {set to valid next state} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    mgr setGlobalState NotReady
    
    set h [varmgr::open tcp://localhost]
    set state [varmgr::var get $h /RunState/State]
    varmgr::close $h
    
    set state
} -result NotReady

tcltest::test setgblstate-badnext {Invalid next state} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    catch {mgr setGlobalState Readying}
} -result 1

tcltest::test setgblstate-needstate {Need a state parameter} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    catch {mgr setGlobalState}
} -result 1

tcltest::test setgblstate-extraparam {extra parameter} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {

    catch {mgr setGlobalState NotReady junk}
} -result 1


# getGlobalState:

tcltest::test getgblState-initial {initial value is correct} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    mgr getGlobalState

} -result 0Initial


tcltest::test getgblState-changed {Global state after change} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    mgr setGlobalState NotReady
    mgr getGlobalState

} -result NotReady


tcltest::test getgblState-ExtraParam {extra parameter on getGlobalState} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    catch {mgr getGlobalState junk}
} -result 1

# getParticipantStates

tcltest::test getpartstates-initial {Initial participant state} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    mgr getParticipantStates
} -result [list [list test 0Initial]]

tcltest::test getpartstates-changed {Participant state changed} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
    ::nscldaq::stateclient  cl  tcp://localhost tcp://localhost test
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    ::nscldaq::stateclient  -delete cl
    cleanup
    
} \
-body {
    cl setstate NotReady
    
    mgr getParticipantStates
} -result [list [list test NotReady]]

tcltest::test getpartstate-several {more than one participant state} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
    ::nscldaq::stateclient  test  tcp://localhost tcp://localhost test
    
    set h [varmgr::open tcp://localhost]
    createProgram $h atest
    varmgr::close $h
    
    ::nscldaq::stateclient atest tcp://localhost tcp://localhost atest
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    ::nscldaq::stateclient  -delete test
    ::nscldaq::stateclient  -delete atest
    cleanup
    
} \
-body {
    test setstate NotReady
    
    mgr getParticipantStates
} -result [list [list atest 0Initial] [list test NotReady]]

tcltest::test getpartstates-extraparam {Extra parameter provided} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    catch {mgr getParticipantState junk}
} -result 1


# title getting/setting

tcltest::test title-initial {Initial value of Title} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    mgr title
} -result {}

tcltest::test title-change-get {Set a new title and get it back} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    mgr title {This is a new title}
    mgr title
} -result {This is a new title}

tcltest::test title-extra-param {Extra parameters} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    catch {mgr title {this is a new title} junk}
} -result 1

# timeout - get/set the run state transition timeout.

tcltest::test timeout-get-initial {Get initial timeout value} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    mgr timeout
} -result 60

tcltest::test timeout-set-get {Modify timeout and get it back} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    mgr timeout 35
    mgr timeout
} -result 35

tcltest::test timeout-extra-param {Too many params is a fail} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    catch {mgr timeout 12 junk}
} -result 1

tcltest::test timeout-mbint {timeout must be an integer} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    catch {mgr timeout george}
} -result 1

# set/get recording status.

tcltest::test recording-initial {Get initial recording status} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    mgr recording
} -result 0

tcltest::test recording-set-get {Change the state and get it} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    mgr recording on
    mgr recording
} -result 1

tcltest::test recording-set-off-ok {Boolean keywords for off are ok} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    mgr recording on
    mgr recording off
    mgr recording
} -result 0

tcltest::test recording-extra-params {Extra parameters to recording} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    catch {recording on junk}
} -result 1

# runNumber - set/get new run number.

tcltest::test runnumber-initial {Get the initial run number} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    mgr runNumber
} -result 0

tcltest::test runnumber-setget {Change/get run number.} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    mgr runNumber 1234
    mgr runNumber
} -result 1234

tcltest::test runnumber-mbint {Run number must be an integer} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    catch {mgr runNumber abcd}
} -result 1

tcltest::test runnumber-extraparam {runNumber cannot have extra params} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    catch {mgr runNumber 1234 junk}
} -result 1


# waitTransition - first we need some procs/threads to make this all work.

#  This proc can be popped off as a thread to perform program state
#  transitions.
#  It's parameter is the sequence of state transitions it should perform
#  once it is triggered by a global state transition.
#  It is intended that this proc be spun  off as a thread.

proc programSequencer {mutex condvar transitions} {
    package require stateclient
    package require portAllocator

    # This proc is called on the state change:
    # @param client - client handle.
    # @param mystates - State transitions to perform.
    # @param newState - New global state.
    proc handleStateChange {client mystates newState} {
        foreach state $mystates {
            $client setstate $state
        }
        incr ::done
    }
    # Create a client, set up the handle state proc and
    # vwait to get into the event loop:
    
    set ::done 0;     # Vwait var.
    ::nscldaq::stateclient client tcp://localhost tcp://localhost test
    
    client onStateChange [list handleStateChange client $transitions]
    thread::mutex lock $mutex
    thread::cond  notify $condvar
    thread::mutex unlock $mutex
    vwait ::done
    ::nscldaq::stateclient -delete client
    thread::release;     # Allow exit.

}

set mutexId [thread::mutex create]
set condId  [thread::cond create]

#  Load a proc into a thread:
#  @param tid - thread id.
#  @param procName - Name of the proc.
#
proc pushProc {tid procName} {
    set argList [info args $procName]
    set body    [info body $procName]
    
    set proc [list proc $procName $argList $body]
    
    
    set status [thread::send $tid $proc msg]
    if {$status} {
        error "Failed to send $procName to $tid: $msg"
    }
    
    
}

# Set up the sequencer thread.

proc seqSetup {transitions} {
    set tid [thread::create -joinable]
    pushProc $tid programSequencer
    
    # Synchronized thread start:
    
    thread::mutex lock $::mutexId
    thread::send -async $tid [list programSequencer $::mutexId $::condId $transitions]
    thread::cond wait $::condId $::mutexId
    thread::mutex unlock $::mutexId
    
    return $tid
}

# record changes

set stateChangeRecord [list]

proc recordChange {program newstate} {
    lappend ::stateChangeRecord [list $program $newstate]
}


tcltest::test  waitTransition-ok-nocallback {Wait for transitions without cb} \
 -setup {
    setup
    set ::stateChangeRecord [list]
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
    set tid [seqSetup NotReady]
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    after 1;         # seem to need to yield to let the thread exit?!?
    thread::join $tid

    
} \
-body {
    mgr setGlobalState NotReady
    mgr waitTransition
} -result 1

tcltest::test waitTransition-ok-callback {Wait for transitions with cb} \
 -setup {
    setup
    set ::stateChangeRecord [list]
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
    set tid [seqSetup NotReady]
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    after 1;         # seem to need to yield to let the thread exit?!?
    thread::join $tid

    
} \
-body {
    mgr setGlobalState NotReady
    set status [mgr waitTransition recordChange]
    list $status $::stateChangeRecord
} -result [list 1 [list [list test NotReady]]]


tcltest::test waitTransition-timeout {Wait for transitions that timeout} \
 -setup {
    setup
    set ::stateChangeRecord [list]
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup

    
} \
-body {
    mgr timeout 1
    mgr setGlobalState NotReady
    mgr waitTransition
} -result 0

tcltest::test waitTransition-extra-param {Extra parameter fails} \
 -setup {
    setup
    set ::stateChangeRecord [list]
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup

    
} \
-body {
    catch {mgr waitTransition a b}
} -result 1

# processMessages

set messages [list]
proc processCallback info {
    lappend ::messages $info
}

tcltest::test processMessages-0  {No messages to process.} \
 -setup {
    setup
    set ::messages [list]
    set ::stateChangeRecord [list]
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
} \
-body {
    mgr processMessages processCallback
    llength $::messages
} -result 0


tcltest::test processMessages-1 {One message to process} \
 -setup {
    setup
    set ::messages [list]
    set ::stateChangeRecord [list]
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
    set tid [seqSetup NotReady]
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup

    
} \
-body {
    mgr setGlobalState NotReady

    # Wait for local state changtes.
    
    after 1;         # seem to need to yield to let the thread exit?!?
    thread::join $tid
    
    mgr processMessages processCallback
    
    set ::messages
} -result [list \
           [dict create type GlobalStateChange state NotReady] \
           [dict create type ProgramStateChange state NotReady program test] \
        ]

tcltest::test processMessages-extraparams {extra parameters are errors} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    
} \
-body {
    catch {mgr processMessages processCallback junk}
} -result 1

#  isActive

tcltest::test isActive-yes {test initially is active} \
 -setup {
    setup
    set ::stateChangeRecord [list]
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
} \
-body {
    mgr isActive test
} -result 1

tcltest::test isActive-notenabled {test is disabled -> inactive} \
 -setup {
    setup
    set ::stateChangeRecord [list]
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
} -body {
    mgr disableProgram test
    mgr isActive test
} -result 0

tcltest::test isActive-standalone {test is standalone ->inactive} \
 -setup {
    setup
    set ::stateChangeRecord [list]
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
} -body {
    mgr setStandalone test
    mgr isActive test
} -result 0

tcltest::test isActive-needs-program {need a program name} \
 -setup {
    setup
    set ::stateChangeRecord [list]
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
} -body {
    catch {mgr isActive}
} -result 1

tcltest::test isActive-extraParams {extra param is an error} \
 -setup {
    setup
    set ::stateChangeRecord [list]
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
} -body {
    catch {mgr isActive test junk}
} -result 1

tcltest::test isActive-mustexist {program must exist} \
 -setup {
    setup
    set ::stateChangeRecord [list]
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
} -body {
    catch {mgr isActive junk}
} -result 1

#  setProgramState

tcltest::test setProgState-ok {Set a program state} \
 -setup {
    setup
    set ::stateChangeRecord [list]
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
    set h [varmgr::open tcp://localhost]
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
    varmgr::close $h
    
} -body {
    mgr setProgramState test NotReady
  
    varmgr::var get $h /RunState/test/State  
}  -result NotReady

tcltest::test setProgState-badState {Invalid state transition fails} \
 -setup {
    setup
    set ::stateChangeRecord [list]
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
} -body {
    catch {mgr setProgramState test Readying}
} -result 1

tcltest::test setProgState-badProgram {program must exist}  \
 -setup {
    setup
    set ::stateChangeRecord [list]
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
} -body {
    catch {mgr setProgramState junk NotReady}
} -result 1

tcltest::test setProgState-need-all-params {All params must be provided} \
 -setup {
    setup
    set ::stateChangeRecord [list]
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
} -body {
    catch {mgr setProgramState test}
} -result 1

tcltest::test setProgState-extra-params {Must not have extra parameters} \
 -setup {
    setup
    set ::stateChangeRecord [list]
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
} -body {
    catch {mgr setProgramState test NotReady junk}
} -result 1

#  getProgramState

tcltest::test getProgState-initial {Get initial program state} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
} -body {
    mgr getProgramState test
} -result 0Initial

tcltest::test getProgState-changed {Get program state after change} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
} -body {
    mgr setProgramState test NotReady
    mgr getProgramState test
} -result NotReady

tcltest::test getProgState-need-progname {get program state needs program name} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
} -body {
    catch {mgr getProgramState}
} -result 1

tcltest::test getProgState-extraparams {Extra parameters are bad} \
 -setup {
    setup
    ::nscldaq::statemanager mgr tcp://localhost tcp://localhost
} \
-cleanup {
    ::nscldaq::statemanager -delete mgr
    cleanup
} -body {
    catch {mgr getProgramState test junk}
} -result 1

#
#------------------------------------------------------------------
#
# Magic to exit with errors if there are test failures:

proc tcltest::cleanupTestHook {} {
    variable numTests
    set ::exitCode $numTests(Failed)
}


tcltest::cleanupTests



