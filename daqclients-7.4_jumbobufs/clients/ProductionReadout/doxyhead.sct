//////////////////////////CLASS_NAME.h file//////////////////////////////////

NO_OUTPUT_BEGIN
   This script produces header files from wc4 diagrams which are commented
   for use with the doxygen code documenter.
		Ron Fox
		NSCL
		Michigan State University
		East Lansing, MI 48824-1321

NO_OUTPUT_END
#ifndef __$CAPITALIZE_ALL$CLASS_NAME$_H  
#define __$CAPITALIZE_ALL$CLASS_NAME$_H
[                               
#ifndef __$CAPITALIZE_ALL$BASE_CLASS$_H
#include "BASE_CLASS$.h"
#endif
]                               
[#include <INCLUDE_FILE>        
]                               
[                               
#ifndef __$CAPITALIZE_ALL$ASSOCIATION_ONE_CLASS$_H
#include "ASSOCIATION_ONE_CLASS.h"
#endif
]                                                               
[                               
#ifndef __$CAPITALIZE_ALL$AGGREGATION_ONE_CLASS$_H
#include "AGGREGATION_ONE_CLASS$.h"
#endif
]                                                               
[                               
#ifndef __$CAPITALIZE_ALL$ASSOCIATION_MANY_CLASS$_H
#include "ASSOCIATION_MANY_CLASS$.h"
#endif
]                                                               
[                               
#ifndef __$CAPITALIZE_ALL$AGGREGATION_MANY_CLASS$_H
#include "AGGREGATION_MANY_CLASS$.h"
#endif
]

/*!
   CLASS_DESCRIPTION
 */		
class CLASS_NAME[NO_RETURN NO_REPEAT: NO_REPEAT public BASE_CLASS ,DELETE_LAST_SYMBOL] CLASS_LIBRARY_BASE_CLASS     
{ 
private:
[COLUMN_TAB(3) CPP_ATTRIBUTE_STATIC CPP_ATTRIBUTE_CONSTANT ATTRIBUTE_TYPE ATTRIBUTE_NAME$; //!< ATTRIBUTE_DESCRIPTION]
 
[COLUMN_TAB(3) AGGREGATION_ONE_CLASS AGGREGATION_ONE_NAME$;] 

[COLUMN_TAB(3) ASSOCIATION_ONE_CLASS$* ASSOCIATION_ONE_NAME$;]

[COLUMN_TAB(3) ASSOCIATION_ONE_CLASS null$ASSOCIATION_ONE_CLASS;]

[COLUMN_TAB(3) int AGGREGATION_MANY_NAME$Index;]

[COLUMN_TAB(3) AGGREGATION_MANY_CLASS AGGREGATION_MANY_NAME LITERAL_SYMBOL[maxNumberOf$AGGREGATION_MANY_CLASS$s LITERAL_SYMBOL];]   

[COLUMN_TAB(3) int ASSOCIATION_MANY_NAME$Index;] 

[COLUMN_TAB(3) ASSOCIATION_MANY_CLASS$* ASSOCIATION_MANY_NAME LITERAL_SYMBOL[maxNumberOf$ASSOCIATION_MANY_CLASS$s LITERAL_SYMBOL];] 

[COLUMN_TAB(3) ASSOCIATION_MANY_CLASS$ null$ASSOCIATION_MANY_CLASS;]

public:
	// Constructors, destructors and other cannonical operations: 

COLUMN_TAB(3) CLASS_NAME ();                      //!< Default constructor.
COLUMN_TAB(3) CLASS_NAME(const CLASS_NAME$& rhs); //!< Copy constructor.
COLUMN_TAB(3) OPERATION_CPP_VIRTUAL_BASE_CLASS ~ CLASS_NAME ( ) { } //!< Destructor.

COLUMN_TAB(3) CLASS_NAME& operator= (const CLASS_NAME$& rhs); //!< Assignment
COLUMN_TAB(3) int         operator==(const CLASS_NAME$& rhs) const; //!< Comparison for equality.
COLUMN_TAB(3) int         operator!=(const CLASS_NAME$& rhs) const {
COLUMN_TAB(6) return !(operator==(rhs));
COLUMN_TAB(3) }

	// Selectors for class attributes:
public:

[COLUMN_TAB(3) const ASSOCIATION_ONE_CLASS$* get$ASSOCIATION_ONE_CLASS$() const
[COLUMN_TAB(3) { return ASSOCIATION_ONE_NAME$;
[COLUMN_TAB(3) }]

[COLUMN_TAB(3) ATTRIBUTE_TYPE get$ATTRIBUTE_NAME() const {
COLUMN_TAB(6) return ATTRIBUTE_NAME$;
COLUMN_TAB(3) }
]
	// Mutators:
protected:  

[COLUMN_TAB(3) void set$ASSOCIATION_ONE_CLASS ($ASSOCIATION_ONE_CLASS$* const a$ASSOCIATION_ONE_NAME$)
COLUMN_TAB(3) { 
COLUMN_TAB(6) ASSOCIATION_ONE_NAME = a$ASSOCIATION_ONE_NAME$;
COLUMN_TAB(3) }  
]

	// Class operations:


[
COLUMN_TAB(3)CPP_OPERATION_VIRTUAL CPP_OPERATION_STATIC OPERATION_RETURN_TYPE OPERATION_NAME (CPP_OPERATION_PARAMETERS) CPP_OPERATION_CONSTANT CPP_OPERATION_PURE_VIRTUAL;
] 
 

};

#endif
