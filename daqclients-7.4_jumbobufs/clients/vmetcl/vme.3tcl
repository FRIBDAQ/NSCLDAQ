'\"
'\" Copyright (c) 2004  Michigan State University
'\" The TCL formatting macros have been shamelessly stolen
'\" from the httpd tcl man page:
'\"
'\" Copyright (c) 1995-1997 Sun Microsystems, Inc.
'\" Copyright (c) 1998-2000 by Ajuba Solutions.
'\"
'\" See the file "license.terms" for information on usage and redistribution
'\" of this file, and for a DISCLAIMER OF ALL WARRANTIES.
'\" 
'\" RCS: @(#) $Id: http.n,v 1.10.2.5 2002/04/18 16:46:09 dgp Exp $
'\" 
'\" The definitions below are for supplemental macros used in Tcl/Tk
'\" manual entries.
'\"
'\" .AP type name in/out ?indent?
'\"	Start paragraph describing an argument to a library procedure.
'\"	type is type of argument (int, etc.), in/out is either "in", "out",
'\"	or "in/out" to describe whether procedure reads or modifies arg,
'\"	and indent is equivalent to second arg of .IP (shouldn't ever be
'\"	needed;  use .AS below instead)
'\"
'\" .AS ?type? ?name?
'\"	Give maximum sizes of arguments for setting tab stops.  Type and
'\"	name are examples of largest possible arguments that will be passed
'\"	to .AP later.  If args are omitted, default tab stops are used.
'\"
'\" .BS
'\"	Start box enclosure.  From here until next .BE, everything will be
'\"	enclosed in one large box.
'\"
'\" .BE
'\"	End of box enclosure.
'\"
'\" .CS
'\"	Begin code excerpt.
'\"
'\" .CE
'\"	End code excerpt.
'\"
'\" .VS ?version? ?br?
'\"	Begin vertical sidebar, for use in marking newly-changed parts
'\"	of man pages.  The first argument is ignored and used for recording
'\"	the version when the .VS was added, so that the sidebars can be
'\"	found and removed when they reach a certain age.  If another argument
'\"	is present, then a line break is forced before starting the sidebar.
'\"
'\" .VE
'\"	End of vertical sidebar.
'\"
'\" .DS
'\"	Begin an indented unfilled display.
'\"
'\" .DE
'\"	End of indented unfilled display.
'\"
'\" .SO
'\"	Start of list of standard options for a Tk widget.  The
'\"	options follow on successive lines, in four columns separated
'\"	by tabs.
'\"
'\" .SE
'\"	End of list of standard options for a Tk widget.
'\"
'\" .OP cmdName dbName dbClass
'\"	Start of description of a specific option.  cmdName gives the
'\"	option's name as specified in the class command, dbName gives
'\"	the option's name in the option database, and dbClass gives
'\"	the option's class in the option database.
'\"
'\" .UL arg1 arg2
'\"	Print arg1 underlined, then print arg2 normally.
'\"
'\" RCS: @(#) $Id: man.macros,v 1.3.12.1 2001/04/03 22:06:43 hobbs Exp $
'\"
'\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp
..
'\"	# SO - start of list of standard options
.de SO
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
'\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\fBoptions\\fR manual entry for details on the standard options.
..
'\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
'\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
'\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.de UL
\\$1\l'|0\(ul'\\$2
..
'\"  End of stolen macros --------------------------------
.TH "Vme" 3tcl  1.0 NSCLDaq "NSCL DAQ TCL Packages"
.BS
.SH NAME
Vme \- VME bus access from TCL scripts.
.SH SYNOPSIS
\fBpackage require Vme
.sp
\fBvme create \fImapname\fR \-device \fI modifier ?-crate cratenum? base size\fR
.sp
\fBvme list\fR
.sp
\fBvme delete \fImapname\fR
.sp
\fImapname \fB get \-b|\-w|\-l \fIoffset\fR
.sp
\fImapname \fB set \-b|\-w|\-l \fIoffset value\fR
.sp

.SH DESCRIPTION
.PP
The \fBVme\fR package provides access to the VME bus from TCL Scripts.  This package
can be used to implement device test programs as well as graphical user interfaces
for devices plugged into the VME bus.  Note that the package will only operate on 
systems that have a VME bus interface installed.
.PP 
The model of operation is that you use the \fBvme create\fR command to create a named
address space chunk.  The name of the address space chunk becomes a command which can
then be used to manipulate or view the contents of the address space.  VME accesses are
synchronized via the NSCL VME access semaphore so that it is safe to run scripts that
access the VME bus while data taking, and even block transfers, are in operation.
.PP
Once you are finished with an addres space chunk the \fBvme delete\Fr command can be used to 
destroy it. The \fBvme list\Fr command can be used, as well to list the set of vme address space
chunks that have been defined.
.SH COMMANDS
.TP
\fBvme create\fR \fI name \fR -device \fI modifier \fR  ?\-crate \fIcratenum\fR? \fIbase size\fR
The \fBvme create\fR command creates a named address space.  The address space is given the 
name \fIname\fR which becomes a new TCL command that can be used to access this space.
The space has base address at \fIbase\fR and size \fIsize\fR.  The address modifier associated
with this space is defined by \fImodifier\fR which can be one of:
.RS 
.TP
\fBshortio\fP
Specifies short I/O space. The short I/O space recognizes 16 significant bits of address. Short
I/O space is usually used by simple I/O devices with small memory footprints.
.TP
\fBstandard\fP
Specifies standard address space.  The VME standard address space decodes 24 bits of address.  

.TP
\fBextended\fP
Specifies extended address space.  The VME extended address space decodes 32 bits of address. 

.RE
The optional \-crate switch and associated parameter can be used to specify the VME crate on 
a system with multiple VME crates.  The value defaults to 0, which is correct for single
crate systems.
.TP 
\fBvme delete\fP \fImapname\fP
Deletes a map that was created via \fBvme create\fR.   When the map is deleted any resources
associated with the map are released.  The \fImapname\fP command is removed from the
TCL command set as well.
.TP
\fBvme list\fP
Returns a list of the VME maps that are currently active.  The list is a properly formatted 
TCL list consisting of two element sublists.  Each sublist contains:
.RS
.TP
\fIname\fP
The name of the map
.TP
\fIvirtual-address\fP
The process virtual address of the base of the map.  Note that at this time it is not possible
to obtain either the size of the map nor the VME base address of a map.
.RE
.TP
\fIname\fP \fBget\fP \-b|\-w|\-l \fIoffset\fP
Returns the value of the location at \fIoffset\fR relative to the base of the map \fIname\fR.
The switches determine the width of the data transfer:
.RS
.TP
\-b
A byte will be transferred (8 bits).
.TP
\-w
A word (16 bits) will be transferred.
.TP
\-l
A longword (32 bits) will be transferred.
.RE
.TP
\fIname\fP \fBset\fP  \-b|\-w|\-l \fIoffset value\fP
Writes \fIvalue\fR to the VME bus at \fIoffset\fR from the base of the map named \fIname\fR.
The width of the transfer is determined by the \-b, \-w, \-l switches which have the same
meaning as for the \fBget\fR subcommand.

.SH EXAMPLE
.PP
the example below creates an A24 address space map that is based a 0x400000, covers
0x1000 bytes.  The longword at offset 0x100 is incremented, then the map is deleted.
.DS

package require Vme
vme create mymap -device standard 0x400000 0x1000
set vmevalue [mymap get -l 0x100]
incr vmevalue
mymap set -l 0x100 $vmevalue
vme delete mymap

.DE
.SH "SEE ALSO"
caennet(3tcl), camac(3tcl), vhq(3tcl), wienercamac(3tcl)