
# Process this file with autoconf to produce a configure script.
AC_PREREQ(2.59)

AC_INIT(configure.in)
AC_CONFIG_AUX_DIR(config)
AM_CONFIG_HEADER(config.h)
AC_CONFIG_MACRO_DIR([m4])


#    Separate device libraries.

AM_INIT_AUTOMAKE(llnlReadout, 3.6, fox@nscl.msu.edu)  
LT_INIT

#
#   The variable below should track the
#   version number above to ensure that
#   all the .so's get appropriately versioned:
#
SOVERSION="1:0"


#  Checks for parameters:

#  Compute the system type:
#  We can only build on linux-gnu  
#  We also have restrictions  on the versions for the drivers.
#


AC_MSG_CHECKING([operating system ])

AC_CANONICAL_HOST

if test "$host_os" == "linux-gnu"
then
   kernel_full_version="$(uname -r)"
   kernel_version="$(echo $kernel_full_version | cut -f1,2 -d.)"
   AC_MSG_RESULT([Building on $host_os kernel $kernel_version])   
else
   AC_MSG_ERROR([This software can only be built on linux-gnu not $host_os])
fi



# Checks for programs.
AC_PROG_AWK
AC_PROG_CXX
AC_PROG_CC
AC_PROG_CPP
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_LIBTOOL
AC_PATH_PROG(DOXYGEN, doxygen, echo)

# Documentation tools:

AC_PROG_LN_S
AC_PATH_PROG(HCDOCBOOK,   docbook2dvi,  echo)
AC_PATH_PROG(HTMLDOCBOOK, docbook2html, echo)
AC_PATH_PROG(DVIPDF,      dvipdf,       echo)
AC_PATH_PROG(MANDOCBOOK,  xmlto,        echo)



#  Needed components for hyperlatex


AC_PATH_PROG(MANDB, mandb, echo)
AC_PATH_PROG(HYPERLATEX, hyperlatex, echo)	
AC_CHECK_PROG(HAVELATEX,  latex, yes, no)		
AC_CHECK_PROG(HAVEDVIPS,  dvips, yes, no)		
AC_CHECK_PROG(HAVEKPATHSEA, kpsewhich, yes, no)	

AC_PROG_GCC_TRADITIONAL
AC_C_INLINE

# Checks for header files.

AC_HEADER_STDC
AC_CHECK_HEADERS([malloc.h stdint.h stdlib.h string.h unistd.h])
AC_HEADER_STDBOOL

# Checks for typedefs, structures, and compiler characteristics.

AC_HEADER_STDBOOL
AC_C_CONST
AC_C_INLINE
AC_TYPE_INT8_T
AC_TYPE_OFF_T
AC_TYPE_SIZE_T
AC_STRUCT_TM
AC_TYPE_UID_T
AC_TYPE_UINT16_T
AC_TYPE_UINT32_T
AC_TYPE_UINT8_T

# Checks for library functions.

AC_FUNC_MALLOC
AC_FUNC_STRTOD
AC_CHECK_FUNCS([strerror])
AC_CHECK_FUNCS([strtol])
AC_CHECK_FUNCS([strtoul])
AC_CHECK_FUNCS([localtime_r memset])

#  See if the C++ runtime libs have .h's on them or
#  if h-less versions can be used for what we need:
#

AC_LANG_PUSH(C++)
AC_CHECK_HEADER(iostream, [AC_DEFINE([HAVE_HLESS_IOSTREAM],1,[<iostream> exists])],[])
AC_CHECK_HEADER(istream,  [AC_DEFINE([HAVE_HLESS_ISTREAM],1,[<istream> exists])],[])
AC_CHECK_HEADER(ostream,  [AC_DEFINE([HAVE_HLESS_OSTREAM],1,[<ostream> exists])],[])
AC_CHECK_HEADER(streambuf,[AC_DEFINE([HAVE_HLESS_STREAMBUF],1,[<streambuf> exists])],[])
AC_CHECK_HEADER(fstream,  [AC_DEFINE([HAVE_HLESS_FSTREAM],1,[<fstream> exists])],[])
AC_CHECK_HEADER(iomanip,  [AC_DEFINE([HAVE_HLESS_IOMANIP],1,[<iomanip> exists])],[])
AC_CHECK_HEADER(sstream,  [AC_DEFINE([HAVE_HLESS_SSTREAM],1,[<sstream> exists])],[])
AC_CHECK_HEADER(typeinfo, [AC_DEFINE([HAVE_HLESS_TYPEINFO],1,[<typeinfo> exists])],[])



#   Is there an std namespace to import from?

AC_COMPILE_IFELSE([using namespace std;], [AC_DEFINE([HAVE_STD_NAMESPACE],[1],[1 if std namespace defined])])
AH_VERBATIM([VHAVE_STD_NAMESPACE],[
/* Define STD macro according to HAVE_STD_NAMESPACE value */
#ifdef HAVE_STD_NAMESPACE
#define STD(name)  std::name
#else
#define STD(name) name
#endif])



AC_LANG_POP(C++)


#  We now look for cppunit.  This is needed to build c++ tests
#  If it is available, we'll define the following:
#  CPPUNIT   - Indicating to the Makefiles to enable building the tests.
#  CPPUNIT_INCLUDES - Any switches needed at compile time for cppunit.
#  CPPUNIT_LDFLAGS  - Any switches needed at link time for cppunit.
#
#

	AC_LANG_PUSH(C++)
	AC_MSG_CHECKING([for cppunit unit testing framework])

	AC_CHECK_HEADERS([cppunit/Test.h], [havecppunit="yes"], [havecppunit="no"])
	AC_MSG_RESULT([$havecppunit])
	if test "$havecppunit" == "yes"
	then
		CPPUNIT_INCLUDES=""
		CPPUNIT_LDFLAGS="-lcppunit -ldl"
		AC_SUBST(CPPUNIT_INCLUDES)
		AC_SUBST(CPPUNIT_LDFLAGS)
         fi
         AC_LANG_POP(C++)


#  We require an installation of libusb.... we'll
#  hunt in the following locations:
#   Headers:   /usr/include /usr/local/include --with-usb-headerdir=xxxx
#   Library:   /lib /usr/lib /usr/local/lib     --with-usb-libdir=xxxx
#  
#  If we don't fail, this will result in
#     USBSWITCHES
#     USB_LIBS
#
#  Where USBSWITCHES will be added to STD_DEFINES_AND_INCLUDES.
#
headerdirs="/usr/include /usr/local/include"
libdirs="/lib /usr/lib /usr/local/lib"

usbheaderdir=""
usblibdir=""

AC_MSG_CHECKING([for libusb headers])
AC_ARG_WITH(usb-headerdir,
	[   --with-usb-headerdir=Path to usb.h],
	[usbheaderdir=$withval],[])

if test "$usbheaderdir" == ""
then
   for dir in $headerdirs
   do
      if test "$usbheaderdir" == ""
      then
         AC_CHECK_FILE([$dir/usb.h],
	               [usbheaderdir=$dir])
      fi
   done
fi

if test "$usbheaderdir" != ""
then
	USBSWITCHES="-I${usbheaderdir}"
	AC_MSG_RESULT([found in $usbheaderdir])
else
	AC_MSG_ERROR([Can't find usb.h install libusb development or try using --with-usb-header-dir to help me find it])
fi

AC_MSG_CHECKING([for libusb library]) 
AC_ARG_WITH(usb-libdir,
	[   --with-usb-libdir=Path to libusb.a],
	[usblibdir=$withval],[])

if test "$usblibdir" == ""
then	
   for dir in $libdirs
   do	
      if test "$usblibdir" == ""
      then
         AC_CHECK_FILE([$dir/libusb.a],
		       [usblibdir=$dir])
      fi
   done
fi

if test "$usblibdir" != "" 
then
   USB_LIBS="-L${usblibdir} -lusb"
   AC_MSG_RESULT([found in $usblibdir])
else
   AC_MSG_ERROR([Can't find libusb.a install libusb or try using --with-usb-libdir to tell me where to find it])
fi


#  TCL headers:
#    We know of a few places the headers can live:
#       /usr/include              redhat linux.
#       /usr/include/tcl          debian dude that made  link to default tcl.
#       /usr/include/tcl<version> debian linux
#       /usr/local/include        default for source based install.
#       Whatever the user specifies. 
#        For now, the versions we look for are determined by the
#        variable tcl_versions  that variable is a list of version 
#        number specifiers.
#
tcl_versions="8.4 8.3 8.2 8.5"
tcl_header_dir=""
AC_MSG_CHECKING([for tcl headers])

AC_ARG_WITH(tcl-header-dir,
	[  --with-tcl-header-dir=path Path to tcl headers],
	[tcl_header_dir="$withval"
	tcl_headers_found="yes"],[tcl_headers_found="no"])


	# /usr/include

if test $tcl_headers_found == "no"; then
   AC_CHECK_FILE([/usr/include/tcl.h],
	[tcl_header_dir="/usr/include"
	tcl_headers_found="yes"])
fi

	# /usr/include/tcl

if test $tcl_headers_found == "no"; then
   AC_CHECK_FILE([/usr/include/tcl/tcl.h],
	[tcl_header_dir="/usr/include/tcl"
	tcl_headers_found="yes"])
fi

	# /usr/include/tcl<version>

if test $tcl_headers_found == "no" ; then
 for version in $tcl_versions;  do
   if test $tcl_headers_found == "no" ; then   # stop at first match
      testdir=/usr/include/tcl$version
      AC_CHECK_FILE([${testdir}/tcl.h],
	[tcl_header_dir=${testdir}
	 tcl_headers_found="yes"])
   fi
 done
fi

      # /usr/local/include
if test $tcl_headers_found == "no"; then
   AC_CHECK_FILE([/usr/local/include/tcl.h],
	[tcl_header_dir="/usr/local/include/tcl"
	tcl_headers_found="yes"])
fi


if test $tcl_headers_found == "yes"; then
   TCL_FLAGS="-I${tcl_header_dir}"
   AC_MSG_RESULT([found in $tcl_header_dir])
else
   AC_MSG_ERROR([can't find tcl.h try using --with-tcl-header-dir to help me])
fi

#  Tcl libraries:
#     We look for the following:
#      /usr/lib/libtcl.a           - Usually a link to a default lib.
#      /usr/lib/libtcl<version>.a  - version of tcl from tcl_versions
#      /usr/local/lib/libtcl.a     - As above but installed from source.
#      /usr/local/lib<version>.a   - As Above but installed from source.
#      If --with-tcl-libdir=dir      is supplied, that directory is 
#                                    searched first.
# ASSUMPTIONS:  libtcl and libtk will have the same naming conventions.
#

tcl_libsearchpath=""
tcl_libfound="no"
AC_MSG_CHECKING([Tcl/Tk library to use])

	# Does the user want us to look somewhere in particular:

AC_ARG_WITH(tcl-libdir,
	[  --with-tcl-libdir=dir Specify where the tcl libraries live.],
	[tcl_libsearchpath=$withval])

tcl_libsearchpath="$tcl_libsearchpath /usr/lib /usr/local/lib"

tcl_libfiles=libtcl.a

for v in ${tcl_versions}
do
   tcl_libfiles="$tcl_libfiles libtcl${v}.a"
   tcl_libfiles="$tcl_libfiles libtcl${v}.so"
done


for dir in ${tcl_libsearchpath} 
do
  for file in ${tcl_libfiles}
  do
    fname=$dir/$file
    if test $tcl_libfound == "no" 
    then
      AC_CHECK_FILE($fname,
	[tcl_libdir=$dir
         tcl_libname=$file
	 tcl_libfound="yes"
	])
    fi
  done
done

if test $tcl_libfound == "yes"
then
  # Find the lib basename:

  tcl_libname=$(echo $tcl_libname|cut -c 4- )  # trim off lib 
  #
  #  Use basename to trim of the .a or .so:
  #

  tcl_libname=$(basename $(basename $tcl_libname .a) .so)
  echo tcl libname $tcl_libname

  tk_libname=tk$(echo $tcl_libname|cut -c 4-)   # trim off tc...and use tk


  TCL_LDFLAGS="-L${tcl_libdir}  -l${tcl_libname} -l${tk_libname}"

else
  AC_MSG_ERROR([Unable to find the tcl library, help me out with --with-tcl-libdir])
fi


#  Spectrodaq related stuff:

# NSCL DAQ specific checks:

#  We need to locate Spectrodaq most of all:
#
#   We look in the following order:
#    1. In /opt/spectrodaq/bin
#    2. In /usr/opt/spectrodaq/bin
#    3. In the location suggested by --with-spectrodaq-home

spectrodaq_conf_dir=""

AC_MSG_CHECKING([ for spectrodaq-conf ])


  AC_ARG_WITH(spectrodaq-home,
       [  --with-spectrodaq-home=top level directory of spectrodaq installation],
       [spectrodaq_conf_dir="$withval/bin"
	spectrodaq_found="yes"],[spectrodaq_found="no"])


if test $spectrodaq_found == "no"; then
   AC_CHECK_FILE(/opt/spectrodaq/bin/spectrodaq-conf,
	[spectrodaq_conf_dir=/opt/spectrodaq/bin
	 spectrodaq_found="yes"])
fi 

if test $spectrodaq_found == "no"; then
  AC_CHECK_FILE(/usr/opt/spectrodaq/bin/spectrodaq-conf,
	[spectrodaq_conf_dir=/usr/opt/spectrodaq/bin
	spectrodaq_found="yes"])
fi

if test $spectrodaq_found == "no"; then
	AC_MSG_ERROR([ Cannot locate spectrodaq-conf help me by using --with-spectrodaq-home])
else
SPECTRODAQ_FLAGS=$($spectrodaq_conf_dir/spectrodaq-conf --cflags)
SPECTRODAQ_FLAGS="$SPECTRODAQ_FLAGS -pthread"
SPECTRODAQ_LDFLAGS=$($spectrodaq_conf_dir/spectrodaq-conf --libs)
AC_MSG_RESULT([ found in $spectrodaq_conf_dir ])
fi

#  Now that we have spectrodaq, we need to see if it has a 
#  spectrodaq_main defined... if so, some of our stuff needs
#  to implement main().
#
AC_LANG_PUSH(C++)
oldcxxflags="$CXXFLAGS"
CXXFLAGS="$CXXFLAGS $SPECTRODAQ_FLAGS"
AC_MSG_CHECKING([spectrodaq has spectrodaq_main() separable])
AC_COMPILE_IFELSE([
using namespace std;
#include <spectrodaq.h>
main(int argc, char**argv, char** envp)
{
  return spectrodaq_main(argc, argv, envp);
}], [separate="yes" ], [separate="no"])
  

if test "$separate" == "yes"
then
   AC_DEFINE([HAVE_SPECTRODAQ_MAIN], 1, [spectrodaq has separable main])
fi
AC_MSG_RESULT([$separate])
CXXFLAGS="$oldcxxflags"
AC_LANG_POP(C++)

#----------------------------------------------------------------
#  NSCLDAQ
#           look for the  highest version from
#           8.2, 8.1, 8.0
#----------------------------------------------------------------

subdirs="8.2 8.1 8.0"
daqfound="no"

AC_MSG_CHECKING([ for nscldaq ])

for dir in $subdirs
do
	if test $daqfound == "no"
	then
		AC_CHECK_FILE(/usr/opt/daq/$dir/include/config.h,
			     [daqdir=/usr/opt/daq/$dir
			     daqfound="yes"])
	fi
done

if test $daqfound == "yes"
then
	AC_MSG_RESULT([Found in $daqdir])
	NSCLDAQ_FLAGS="-I$daqdir/include"
	NSCLDAQ_LIB="-L$daqdir/lib"
else
	AC_MSG_ERROR([NSCLDAQ needs to be installed!])
fi
# define substitutions:

  # libusb:

AC_SUBST(USBSWITCHES)
AC_SUBST(USB_LIBS)

	# Hyperlatex:

AC_SUBST(HYPERLATEX)
AC_SUBST(LATEX)
AC_SUBST(DVIPS)


#   The base part of the .so version:

AC_SUBST(SOVERSION)

# Documentation tools

AC_SUBST(HCDOCBOOK)
AC_SUBST(DVIPDF)
AC_SUBST(MANDOCBOOK)
AC_SUBST(HTMLDOCBOOK)

# CPPUNIT testing:

AC_SUBST(CPPUNIT_INCLUDES)
AC_SUBST(CPPUNIT_LDFLAGS)

# TCL headers and libs:

AC_SUBST(TCL_FLAGS)
AC_SUBST(TCL_LDFLAGS)

# Spectrodaq related stuff:

AC_SUBST(SPECTRODAQ_FLAGS)
AC_SUBST(SPECTRODAQ_LDFLAGS)

# NSCLDAQdir stuff:

AC_SUBST(NSCLDAQ_FLAGS)
AC_SUBST(NSCLDAQ_LIB)
AC_SUBST(daqdir)

#  Create output files:

AC_OUTPUT([Makefile
	  vmusb/Makefile
	  devices/Makefile
	  threadcomm/Makefile
	  router/Makefile
	  rdothread/Makefile
	  tclserver/Makefile
	  daqconfig/Makefile
	  commands/Makefile])
