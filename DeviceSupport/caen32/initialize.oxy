/*!
	\page Initialization Module initialization.

	This page summarizes the most frequently used CAENcard initialization
	member functions.  These functions are grouped as follows:
	- \ref DeviceIndependent
	- \ref DeviceDependent

	Device independent functions work on all module types, while Device 
	dependent functions only work on specific module types (e.g. on 775
	TDC's).  If you call a device dependent member function on an 
	incompatible module, it will throw a string exception.  The code
	below shows how to turn this exception into an informative 
	message before attempting to fix up the problem at a 
	higher level in the code (or exit).

	\code
	#include <iostream>
	#include <string>
	#include <CAENcard.h>
	...
	    CAENcard* pCard;
	...
	    try {
	      pCard->commonStart();
            }
	    catch (string msg) {
	      cerr << "Failed to set module  in common start mode";
	      cerr << " module type: V" << pCard->cardType() << endl;
	      cerr << "Message: " << msg << endl;
	      cerr.flush();
	      throw;
	    }	
	...
	\endcode

	The code, assuming the module is a TDC attempts to 
	initialize it to run in common start mode.  If this
	module is not a TDC, a string exception will be thrown
	by CAENcard::commonStart and the catch block shown
	will be called.   The catch block uses the
	member CAENcard::cardType() to get the actual	
	module type, and the exception message caught to 
	construct an informative message that is emitted to
	stderr.  The exception is then rethrown.  If there
	is no exception handler at a higher level in the call
	stack the program will exit.  

	It is also possible to attempt corrective action
	within the catch block above, depending on the needs of
	your application.


	\section DeviceIndependent Device Independent Initialization Functions.

	This section is a list of the major initialization functions that
	are device independent.  Device independent member functions can be called
	regardless of the type of card being controlled.   The order in which
	the functions are called at initialization time is, in general, not 
	important.

	To find out more about
	each of these functions, click on the name of the function.
	- CAENcard::setCrate - Define the logical crate number of the device
	- CAENcard::setThreshold - Set the thresholds for zero supression in
	                           channels.
        - CAENcard::keepUnderThresholdData and  CAENcard::discardUnderThresholdData 
	    control whether or not conversions below the channel threshold values
	    will be discarded from the data stream.  Default is to discard.
	- CAENcard::keepOverflowData and CAENcard::discardOverflowData
	   control whether or overflow conversions will be discarded from the
	   data stream.  The default is to discard.
	-  CAENcard::cardOff CAENcard::cardOn  are used to disable and enable the
	    entire card.  A disabled card will never produce data.  By default
	    cards are enabled.
        - CAENcard::ChannelOff and CAENcard::ChannelOn allow you to individually
	    disable and enable input channels on the card.  By default, all 
	    channels are enabled.
        - CAENcard::resetEventCounter The module has an event counter that appears
	    in the data for each event.  This function sets that counter to zero.
        - CAENcard::clearData  Clears the data memory of the device.
	- CAENcard::setFastClearWindow  sets the width of the window during which
	    a fast clear can abort the conversions and clear the module.
        - CAENcard::enableSmallThresholds CAENcard::disableSmallThresholds
           Starting with firmware revision 5.1 and later, the module supports
	   two threshold scales.  This function allows you to switch between 
	   them.  See page 13 of the hardware manual for more information about
	   this.  To determine the module firmware revision, you can call
	   CAENcard::getFirmware.  The default is have Small Thresholds disabled,
	   as this is the only mode available on modules pre firmware 5.1
	   Note that the NSCL can do firmware upgrades on modules to the
	   current firmware revision if desired/required.
	

	\section DeviceDependent Device Dependent Initialization functions.

	The functions described in this section are only available on a subset
	of the module types.  Each function is given a short description and 
	the set of modules that support this function are documented.

	To find out more about
	each of these functions, click on the name of the function.  Note that
	calling one of the functions below with a module that is not of
	the correct module type will in general cause a string exception to be
	thrown.  The module type can be determined using the CAENcard::cardType
	function.  See \ref Initialization for an example of how to catch
	string exceptions.

	- CAENcard::keepInvalidData and CAENcard::discardInvalidData (V775)
	  in the event conversions produce 'invalid data', these functions
	  control whether or not these data are suppressed from the event.
	  Default is discardInvalidData.
	- CAENcard::commonStart (V775) initializes the module to digitize
	  in common start mode.  This is incompatible with CAENcard::commonStop
	  and the chronologically last function of these executed will control
	  the module mode.
	- CAENcard::commonStop (V775) initalizes the module to digitize in
	  common stop mode. This is incompatible with CAENcard::commonStart
	  and the chronologically last function of these executed will control
	  the module mode.
        - CAENcard::setRange (V775) sets the module conversion full scale range.
	- CAENcard::setPedestalCurrent (V792, V862)  Sets the compensation pedestal
	  current for the QDC.  
	- CAENcard::getIped (V792, V862) Returns the value of the
	  compensation current for the QDC.

*/