.TH CSTREAMIOERROR 3daq "November 2004" "NSCLDAQ-8.0" "NSCL DAQ programmer's manual"
.SH NAME
CStreamIOError \- Exception for problems with streams.
.SH SYNOPSIS
.B #include <config.h>
.br
.B #include <histotypes.h>
.br
.B #include <StreamIOError.h>
.br
.B class CStreamIOError : public CException
.sp
.nf
  typedef enum _IoStreamConditions {
    EndFile,
    BadSet,
    FailSet
  } IoStreamConditions;
.fi
.B Constructors
.sp
\fBCStreamIOError(IoStreamConditions \fIeReason\fB,
		 const  char* \fIpDoing\fB, ios& \fIrStream\fB)
.br
\fBCStreamIOError(IoStreamConditions \fIeReason\fB,
	  const string&  \fIrDoing\fB, ios& \fIrStream\fB)
.br
\fBCStreamIOError (const CStreamIOError& \fIaCStreamIOError\fB )
.br
.sp
.B Operator overloads
.sp
\fBint operator== (const CStreamIOError& \fIaCStreamIOError\fB)
.br
.sp
.B Inquiry functions
.sp
\fBIoStreamConditions getReason() const
.br
\fBios& getStream()
.br
.sp
.B Base Class Overrides
.sp
\fBvirtual   const char* ReasonText ()    const;
.br
\fB virtual   Int_t ReasonCode ()    const;\fR

.SH DESCRIPTION
.PP
The CStreamIOError class is an exception class that is used to report on error
conditions detected during I/O to and from C++ streams.   Unfortunately, it is
a truth about C++ streams that their error information is very plain vanilla
and not very specific. 
.PP
One caution when catching this class.  While the exception contains a reference
to the stream that reported the condition, it is possible that the stream
itself has gone out of scope.  Be very sure you know what the call stack is
like before referencing this or else you may wind up with a SEGFLT or worse.
.PP
The non copy constructors for this class have two parameters in addition to the
\fIpDoing\fR parameter: \fIeReason\fR specifies why the exception was thrown,
and \fIrSTream\fR is a reference to the stream that detected the failure (see
the note above).
.PP
The member functions defined by this class are:
.TP
\fBint operator== (const CStreamIOError& \fIaCStreamIOError)\fR
Returns true if *this is functionally equivalent to aCStreamIOError.
Functional equivalence is defined as the base class returning equality, and
*this's reason and stream being the same as those in aCStreamIOError.
.TP
\fBIoStreamConditions getReason() const\fR
Returns the stream error condition.  This will be one of the values from the
enum CStreamIOError::IoStreamConditions
.TP
\fBios& getStream()\fR
Returns the reference to the stream that caused the exception to be thrown.
Note one last time, that  the actual stream may have gone out of scope,
depending on how and where it was opened.  Be very careful referencing this.
.TP
\fBvirtual   const char* ReasonText ()    const\fR
Returns a pointer to the textual reason the exception was thrown.
.TP
\fB virtual   Int_t ReasonCode ()    const\fR
Returns the reason for the exception (A CStreamIOError::IoStreamConditions)
cast to an integer.
.SH "SEE ALSO"
Exception