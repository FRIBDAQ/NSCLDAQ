.TH CException 3daq "October 2004" "NSCLDAQ-8.0" "DAQ programming manual"
.SH NAME
CException \- Base class of the NSCLDAQ exception hierarchy.
.SH SYNOPSIS

.B #include <config.h>
.br
.B #include <Exception.h>
.br
.sp
.B Constructors:
.br
.sp
\fBCException(const char \fIpszAction\fB)
.br
\fBCException(const string& \fIrsAction\fB)
.br
\fBCException(const CException& \fIrhs\fB)
.br
.sp
.B Operators:
.br
.sp
 \fBint operator== (const CException& \fIaCException\fB);
.br
 \fBint operator!= (const CException& \fIrException\fB)
.br
.sp
.B Class operations.
.br
.sp
\fBvirtual const char* ReasonText () const  ;
.br
\fBvirtual Int_t ReasonCode () const  ;
.br
\fB const char* WasDoing () const  ;
.br
.SH DESCRIPTION
.PP
This is the base class of the NSCL DAQ exception class.  If something is going
wrong, a member of this class hierarchy will be instantiated and \fBthrown\fR.
Each exception has associated with it a reason and an action that was underway
when the exceptional condition occured.  The intent of the \fBAction\fR
parameters is that they document roughly what the program was doing and where
it was executing when the exception was thrown.
.PP
Aside from the constructors the following are defined:
.TP 
operator==
Compares \fBthis\fR with another exception and returns true if the reason and
the actions were identical.
.TP
operator!=
Returns true if \fBoperator==\fR would return false.
.TP
ReasonText
Returns a \fBconst char*\fR that points to the reason the exception was thrown.
.TP
ReasonCode
Returns an integer code that represents the reason the exception was thrown.
This must normally be interpreted differently from class to class within the
hierarchy.
.TP
WasDoing
Returns a \fBconst char*\fR that points to the string describing what the
program was doing at the time the exception was thrown.

.SH SEE ALSO
ErrnoException, RangeError, StreamIOError





