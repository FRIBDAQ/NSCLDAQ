'\"
'\" Copyright (c) 2004  Michigan State University
'\" The TCL formatting macros have been shamelessly stolen
'\" from the httpd tcl man page:
'\"
'\" Copyright (c) 1995-1997 Sun Microsystems, Inc.
'\" Copyright (c) 1998-2000 by Ajuba Solutions.
'\"
'\" See the file "license.terms" for information on usage and redistribution
'\" of this file, and for a DISCLAIMER OF ALL WARRANTIES.
'\" 
'\" RCS: @(#) $Id$
'\" 
'\" The definitions below are for supplemental macros used in Tcl/Tk
'\" manual entries.
'\"
'\" .AP type name in/out ?indent?
'\"	Start paragraph describing an argument to a library procedure.
'\"	type is type of argument (int, etc.), in/out is either "in", "out",
'\"	or "in/out" to describe whether procedure reads or modifies arg,
'\"	and indent is equivalent to second arg of .IP (shouldn't ever be
'\"	needed;  use .AS below instead)
'\"
'\" .AS ?type? ?name?
'\"	Give maximum sizes of arguments for setting tab stops.  Type and
'\"	name are examples of largest possible arguments that will be passed
'\"	to .AP later.  If args are omitted, default tab stops are used.
'\"
'\" .BS
'\"	Start box enclosure.  From here until next .BE, everything will be
'\"	enclosed in one large box.
'\"
'\" .BE
'\"	End of box enclosure.
'\"
'\" .CS
'\"	Begin code excerpt.
'\"
'\" .CE
'\"	End code excerpt.
'\"
'\" .VS ?version? ?br?
'\"	Begin vertical sidebar, for use in marking newly-changed parts
'\"	of man pages.  The first argument is ignored and used for recording
'\"	the version when the .VS was added, so that the sidebars can be
'\"	found and removed when they reach a certain age.  If another argument
'\"	is present, then a line break is forced before starting the sidebar.
'\"
'\" .VE
'\"	End of vertical sidebar.
'\"
'\" .DS
'\"	Begin an indented unfilled display.
'\"
'\" .DE
'\"	End of indented unfilled display.
'\"
'\" .SO
'\"	Start of list of standard options for a Tk widget.  The
'\"	options follow on successive lines, in four columns separated
'\"	by tabs.
'\"
'\" .SE
'\"	End of list of standard options for a Tk widget.
'\"
'\" .OP cmdName dbName dbClass
'\"	Start of description of a specific option.  cmdName gives the
'\"	option's name as specified in the class command, dbName gives
'\"	the option's name in the option database, and dbClass gives
'\"	the option's class in the option database.
'\"
'\" .UL arg1 arg2
'\"	Print arg1 underlined, then print arg2 normally.
'\"
'\" RCS: @(#) $Id$
'\"
'\"	# Set up traps and other miscellaneous stuff for Tcl/Tk man pages.
.if t .wh -1.3i ^B
.nr ^l \n(.l
.ad b
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ta \\n()Au \\n()Bu
.ie !"\\$3"" \{\
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp
..
'\"	# SO - start of list of standard options
.de SO
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
'\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\fBoptions\\fR manual entry for details on the standard options.
..
'\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
'\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
'\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.de UL
\\$1\l'|0\(ul'\\$2
..
'\"  End of stolen macros --------------------------------
.TH "CPortManager class" 3 0.1 NSCLDaq "NSCL DAQ C++ packages"
.BS
.SH NAME
CPortManager \- C++ class interface to the Port Manager server.
.SH SYNOPSIS
.DS
#include <config.h>
#include <CPortManager.h>
#include <CPortManagerException.h>

class CPortManager {
public:
	//! portInfo lists the information about a single port.
	typedef struct _portInfo {
		int         s_Port;
		string      s_Application;
		string      s_User;
	} portInfo;
public:   
    CPortManager(string host = string("localhost"));
    CPortManager(string host, int Port);
    ~CPortManager();

    int operator==(const CPortManager& rhs) const;
    int operator!=(const CPortManager& rhs) const;

    int allocatePort(string application);
    vector<portInfo> getPortUsage();
};

.DE

add
.DS
-I/usr/opt/daq/current/include 
.DE
to your compilation lines.

add 
.DS
-L/usr/opt/daq/current/lib -lPortManager
.DE
to your link line.
.SH DESCRIPTION
.PP
\fBCPortManager\fR provides a C++ application programming interface into the
NSCL port manager server.  This class serves as a proxy for communication with
port management servers.  Once you have created a \fBCPortManager\fR object,
you can use it to allocate ports (if the server is local), and to list port
usage of any server on the network.
.PP
Note that members of this class can throw exceptions of type
\fBCPortManagerException\fR.  See the man page on that class for more information.
.SH "PUBLIC INTERFACE"
.TP
\fBCPortManager::CPortManager\fR(string \fIhost\fR = string("localhost"));
.TP
\fBCPortManager::CPortManager\fR(string \fIhost\fR, int \fIport\fR)
 Constructs a port manager object on the specified host and port.  In the first
form of the call, the class first attempts to read the port number from
/var/tmp/daqportmanager/listen.port before falling back to the default port
number of 30000.  The \fIhost\fR parameter is the name of the host to which the
object will connect when required to do so.
.TP
int \fBCPortManager::allocatePort\fR(string \fIapplication\fR);
Contacts the server and attempts to allocate a port.  If successful, the port
number is returned.  On failure a \fBCPortManagerException\fR is thrown
describing why the call failed. 
.sp
The \fIapplication\fR parameter is the name of the application for which the
port is requested.   This should be a string that clearly identifies the
function of the application.  
.sp
If a port was successfully allocated, the object will maintain a connection to
the server.  When destroyed, CPortManager objects do not close this
connection. This is done to ensure the application retains ownership 
.TP
vector<CPortManager::portInfo> \fBgetPortUsage\fR();
Interacts with the server to find out how it has allocated its ports.
Returns a vector of \fBCPortManager::portInfo\fR structs.  Each element of
the vector describes a single allocated port: \fBs_Port\fR is the number of the
port. \fBs_Application\fR is a string containing the application
name. \fBs_User\fR is a string containing the user running the application.
.SH "EXAMPLES"
.PP
Allocates a port to "MyApplication"

.DS
    . . . 
CPortManager pm;
int port;
try {
   port = pm.allocatePort("MyApplication");
   ListenOnPort(port);                      // Not shown for brevity
}
catch (CPortManagerException &error) {
   cerr << "Could not allocate a port: " << error << endl;
   exit(-1);
}
   . . .
.DE
.PP
Lists to cout the port allocations on a server in ahost.nscl.msu.edu:
.DS
 . . .
CPortManager pm("ahost.nscl.msu.edu");
vector<CPortManager::portInfo> info = pm.getPortUsage();
for(int i =0; i < info.size(); i++) {
   cout << "Port " << info.s_Port 
        << " allocated to " << info.s_Application
        << " run by " << info.s_User << endl;
}
 . . .
.DE
.SH "SEE ALSO"

portAllocator(3tcl), CPortManagerException(3), DaqPortManager(8)