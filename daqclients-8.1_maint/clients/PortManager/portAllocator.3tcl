\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
.AS Tcl_Interp Tcl_CreateInterp in/out
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.if !"\\$2"" .br
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp
..
'\"	# SO - start of list of standard options
.de SO
.SH "STANDARD OPTIONS"
.LP
.nf
.ta 5.5c 11c
.ft B
..
'\"	# SE - end of list of standard options
.de SE
.fi
.ft R
.LP
See the \\fBoptions\\fR manual entry for details on the standard options.
..
'\"	# OP - start of full description for a single option
.de OP
.LP
.nf
.ta 4c
Command-Line Name:	\\fB\\$1\\fR
Database Name:	\\fB\\$2\\fR
Database Class:	\\fB\\$3\\fR
.fi
.IP
..
'\"	# CS - begin code excerpt
.de CS
.RS
.nf
.ta .25i .5i .75i 1i
..
'\"	# CE - end code excerpt
.de CE
.fi
.RE
..
.de UL
\\$1\l'|0\(ul'\\$2
..
'\"  End of stolen macros --------------------------------
.TH "portAllocator package" 3tcl 0.1 NSCLDaq "NSCL DAQ TCL Packages"
.BS
.SH NAME
portAllocator \- Allocate TCP/IP server ports from TCL Scripts.
.SH SYNOPSIS
\fBpackage require portAllocator
.sp
\fB::portAllocator create \fIname\fR ?\-hostname \fIhost\fR? ?\-port \fIport\fR
.sp
\fI::name\fR listPorts
.sp
\fI::name\fR allocatePort \fIapplication\fR
.sp
\fI::name\fR destroy
.sp

.SH DESCRIPTION
.PP
The \fBportAllocator\fR package provides access to the NSCL TCP/IP port
management server.  It can be used by TCP/IP server applications t obtain
a server listen port.  The package follows an object oriented model.  The
application creates a portAllocator object, which stands as a proxy between
the application and a port manager server.  Using this object the application
can allocated and deallocate ports, as well as request port allocation
information.
.PP
Once your application has finished interacting with a portAllocator object, it
can destroy it.  If the application must hold a connection to the server in
order to maintain one or more allocated ports, destruction of the requesting
object will not result in that connection being closed.

.SH COMMANDS
.TP
\fB::portAllocator create \fIname\fR ?\-hostname \fIhost\fR? ?\-port \fIport\fR
Creates a port allocator with the specified \fIname\fR.  The optional
\-hostname options allows you to specify with which host you want the allocator
to communicate.  If not supplied, this defaults to \fIlocalhost\fR.  The
optional \-port switch allows you to specify a port on which to connect.  If
not specified,the allocator will first attempt to read the port number from the
file /var/tmp/daqportmgr/listen.port before falling back to port number 30000.
.sp
The command returns the fully qualified name of the allocator.  This name can
be stored in a variable for later use (see EXAMPLES).
.TP
\fI::name\fR listPorts
Returns a TCL formatted list that describes the ports that are currently
allocated by the server.  Each element of the list is a three element sublist
containing in order, the allocated port, the name of the application holding
the port, and the name of the user that is running the application.
.TP
\fI::name\fR allocatePort \fIapplication\fR
Attempts to allocate a port from the server.  Note that the protocol only
allows you to allocate ports from a server running on localhost.
\fIapplication\fR is the name of the application under which you would like to
register port ownership.  
.TP
\fI::name\fR destroy
Destroys a portAllocator.  If the portAllocator is holding open a connection to
the server because the application has allocated a port, this connection will
remain open.

.SH EXAMPLES
.PP
 The example below allocates a port from the localhost, and starts listening
for connections.
.DS
package require portAllocator
set p [::portAllocator create local]
set port [$p allocatePort]
socket -server handleConnections $port 

.DE
.PP
The example below requests that the host somehost.nscl.msu.edu return a list of
the ports in use.  The port usage is then printed at stdout:
.DS
package require portAllocator
set p [::portAllocator create remote -hostname somehost.nscl.msu.edu]
set usage [$p listPorts]
foreach allocation $usage {
  set port        [lindex $allocation 0]
  set application [lindex $allocation 1]
  set user        [lindex $allocation 2]
  puts "Port $port allocated to $application run by $user"
}
.DE
.SH "SEE ALSO"
CPortManager(3), CPortManagerException(3),  DaqPortManager(8), 